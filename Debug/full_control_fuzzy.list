
full_control_fuzzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007890  08007890  00008890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd4  08007cd4  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd4  08007cd4  00008cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cdc  08007cdc  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cdc  08007cdc  00008cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ce0  08007ce0  00008ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007ce4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d8  08007ebc  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08007ebc  0000947c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfd3  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002058  00000000  00000000  000171db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00019238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a98  00000000  00000000  00019fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d9b  00000000  00000000  0001aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd9c  00000000  00000000  0003d7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3566  00000000  00000000  0004d597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  00120b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001256dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007878 	.word	0x08007878

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08007878 	.word	0x08007878

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <fuzzy_pwm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* ======= Fuzzy Membership Functions ======= */
float fuzzy_pwm(float error) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	@ 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	ed87 0a01 	vstr	s0, [r7, #4]
    float pwm_adjustment = 0.0f;
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	@ 0x34

    // Define fuzzy sets for error
    float neg_large = fmax(0, fmin(1, (error < -3) ? 1 : (-error - 1) / 2));
 8000fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbc:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8000fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	d503      	bpl.n	8000fd2 <fuzzy_pwm+0x2a>
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4bc4      	ldr	r3, [pc, #784]	@ (80012e0 <fuzzy_pwm+0x338>)
 8000fd0:	e011      	b.n	8000ff6 <fuzzy_pwm+0x4e>
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	eef1 7a67 	vneg.f32	s15, s15
 8000fda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000fe6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fea:	ee16 0a90 	vmov	r0, s13
 8000fee:	f7ff facb 	bl	8000588 <__aeabi_f2d>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	ed9f 1bb6 	vldr	d1, [pc, #728]	@ 80012d0 <fuzzy_pwm+0x328>
 8000ffa:	ec43 2b10 	vmov	d0, r2, r3
 8000ffe:	f006 fbbd 	bl	800777c <fmin>
 8001002:	eeb0 7a40 	vmov.f32	s14, s0
 8001006:	eef0 7a60 	vmov.f32	s15, s1
 800100a:	ed9f 1bb3 	vldr	d1, [pc, #716]	@ 80012d8 <fuzzy_pwm+0x330>
 800100e:	eeb0 0a47 	vmov.f32	s0, s14
 8001012:	eef0 0a67 	vmov.f32	s1, s15
 8001016:	f006 fc05 	bl	8007824 <fmax>
 800101a:	ec53 2b10 	vmov	r2, r3, d0
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fdc3 	bl	8000bac <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    float neg_small = fmax(0, fmin(1, (error >= -3 && error < -1) ? (-error - 1) / 2 : 0));
 800102a:	edd7 7a01 	vldr	s15, [r7, #4]
 800102e:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	db1b      	blt.n	8001074 <fuzzy_pwm+0xcc>
 800103c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001040:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	d512      	bpl.n	8001074 <fuzzy_pwm+0xcc>
 800104e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001052:	eef1 7a67 	vneg.f32	s15, s15
 8001056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800105a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800105e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001062:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001066:	ee16 0a90 	vmov	r0, s13
 800106a:	f7ff fa8d 	bl	8000588 <__aeabi_f2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	e003      	b.n	800107c <fuzzy_pwm+0xd4>
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	ed9f 1b94 	vldr	d1, [pc, #592]	@ 80012d0 <fuzzy_pwm+0x328>
 8001080:	ec43 2b10 	vmov	d0, r2, r3
 8001084:	f006 fb7a 	bl	800777c <fmin>
 8001088:	eeb0 7a40 	vmov.f32	s14, s0
 800108c:	eef0 7a60 	vmov.f32	s15, s1
 8001090:	ed9f 1b91 	vldr	d1, [pc, #580]	@ 80012d8 <fuzzy_pwm+0x330>
 8001094:	eeb0 0a47 	vmov.f32	s0, s14
 8001098:	eef0 0a67 	vmov.f32	s1, s15
 800109c:	f006 fbc2 	bl	8007824 <fmax>
 80010a0:	ec53 2b10 	vmov	r2, r3, d0
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd80 	bl	8000bac <__aeabi_d2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float zero = fmax(0, fmin(1, (error >= -1 && error <= 1) ? (1 - fabs(error)) : 0));
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80010b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	db1c      	blt.n	80010fc <fuzzy_pwm+0x154>
 80010c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	d813      	bhi.n	80010fc <fuzzy_pwm+0x154>
 80010d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d8:	eef0 7ae7 	vabs.f32	s15, s15
 80010dc:	ee17 0a90 	vmov	r0, s15
 80010e0:	f7ff fa52 	bl	8000588 <__aeabi_f2d>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	497c      	ldr	r1, [pc, #496]	@ (80012e0 <fuzzy_pwm+0x338>)
 80010ee:	f7ff f8eb 	bl	80002c8 <__aeabi_dsub>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	ec43 2b17 	vmov	d7, r2, r3
 80010fa:	e001      	b.n	8001100 <fuzzy_pwm+0x158>
 80010fc:	ed9f 7b76 	vldr	d7, [pc, #472]	@ 80012d8 <fuzzy_pwm+0x330>
 8001100:	ed9f 1b73 	vldr	d1, [pc, #460]	@ 80012d0 <fuzzy_pwm+0x328>
 8001104:	eeb0 0a47 	vmov.f32	s0, s14
 8001108:	eef0 0a67 	vmov.f32	s1, s15
 800110c:	f006 fb36 	bl	800777c <fmin>
 8001110:	eeb0 7a40 	vmov.f32	s14, s0
 8001114:	eef0 7a60 	vmov.f32	s15, s1
 8001118:	ed9f 1b6f 	vldr	d1, [pc, #444]	@ 80012d8 <fuzzy_pwm+0x330>
 800111c:	eeb0 0a47 	vmov.f32	s0, s14
 8001120:	eef0 0a67 	vmov.f32	s1, s15
 8001124:	f006 fb7e 	bl	8007824 <fmax>
 8001128:	ec53 2b10 	vmov	r2, r3, d0
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd3c 	bl	8000bac <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
    float pos_small = fmax(0, fmin(1, (error > 1 && error <= 3) ? (error - 1) / 2 : 0));
 8001138:	edd7 7a01 	vldr	s15, [r7, #4]
 800113c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	dd19      	ble.n	800117e <fuzzy_pwm+0x1d6>
 800114a:	edd7 7a01 	vldr	s15, [r7, #4]
 800114e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	d810      	bhi.n	800117e <fuzzy_pwm+0x1d6>
 800115c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001168:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800116c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001170:	ee16 0a90 	vmov	r0, s13
 8001174:	f7ff fa08 	bl	8000588 <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	e003      	b.n	8001186 <fuzzy_pwm+0x1de>
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 80012d0 <fuzzy_pwm+0x328>
 800118a:	ec43 2b10 	vmov	d0, r2, r3
 800118e:	f006 faf5 	bl	800777c <fmin>
 8001192:	eeb0 7a40 	vmov.f32	s14, s0
 8001196:	eef0 7a60 	vmov.f32	s15, s1
 800119a:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 80012d8 <fuzzy_pwm+0x330>
 800119e:	eeb0 0a47 	vmov.f32	s0, s14
 80011a2:	eef0 0a67 	vmov.f32	s1, s15
 80011a6:	f006 fb3d 	bl	8007824 <fmax>
 80011aa:	ec53 2b10 	vmov	r2, r3, d0
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fcfb 	bl	8000bac <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    float pos_large = fmax(0, fmin(1, (error > 3) ? 1 : (error - 1) / 2));
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	dd03      	ble.n	80011d4 <fuzzy_pwm+0x22c>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b43      	ldr	r3, [pc, #268]	@ (80012e0 <fuzzy_pwm+0x338>)
 80011d2:	e00f      	b.n	80011f4 <fuzzy_pwm+0x24c>
 80011d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011e0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80011e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011e8:	ee16 0a90 	vmov	r0, s13
 80011ec:	f7ff f9cc 	bl	8000588 <__aeabi_f2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 80012d0 <fuzzy_pwm+0x328>
 80011f8:	ec43 2b10 	vmov	d0, r2, r3
 80011fc:	f006 fabe 	bl	800777c <fmin>
 8001200:	eeb0 7a40 	vmov.f32	s14, s0
 8001204:	eef0 7a60 	vmov.f32	s15, s1
 8001208:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80012d8 <fuzzy_pwm+0x330>
 800120c:	eeb0 0a47 	vmov.f32	s0, s14
 8001210:	eef0 0a67 	vmov.f32	s1, s15
 8001214:	f006 fb06 	bl	8007824 <fmax>
 8001218:	ec53 2b10 	vmov	r2, r3, d0
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fcc4 	bl	8000bac <__aeabi_d2f>
 8001224:	4603      	mov	r3, r0
 8001226:	623b      	str	r3, [r7, #32]

    // Define PWM change for each fuzzy set
    float pwm_neg_large = 20.0f;  // Slow down aggressively
 8001228:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <fuzzy_pwm+0x33c>)
 800122a:	61fb      	str	r3, [r7, #28]
    float pwm_neg_small = 40.0f;  // Slow down moderately
 800122c:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <fuzzy_pwm+0x340>)
 800122e:	61bb      	str	r3, [r7, #24]
    float pwm_zero = 50.0f;       // Maintain speed
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <fuzzy_pwm+0x344>)
 8001232:	617b      	str	r3, [r7, #20]
    float pwm_pos_small = 70.0f;  // Speed up moderately
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <fuzzy_pwm+0x348>)
 8001236:	613b      	str	r3, [r7, #16]
    float pwm_pos_large = 90.0f;  // Speed up aggressively
 8001238:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <fuzzy_pwm+0x34c>)
 800123a:	60fb      	str	r3, [r7, #12]

    // Defuzzification (Weighted Average Method)
    pwm_adjustment = (
        (neg_large * pwm_neg_large) +
 800123c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001240:	edd7 7a07 	vldr	s15, [r7, #28]
 8001244:	ee27 7a27 	vmul.f32	s14, s14, s15
        (neg_small * pwm_neg_small) +
 8001248:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (neg_large * pwm_neg_large) +
 8001254:	ee37 7a27 	vadd.f32	s14, s14, s15
        (zero * pwm_zero) +
 8001258:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800125c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001260:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (neg_small * pwm_neg_small) +
 8001264:	ee37 7a27 	vadd.f32	s14, s14, s15
        (pos_small * pwm_pos_small) +
 8001268:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800126c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001270:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (zero * pwm_zero) +
 8001274:	ee37 7a27 	vadd.f32	s14, s14, s15
        (pos_large * pwm_pos_large)
 8001278:	edd7 6a08 	vldr	s13, [r7, #32]
 800127c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001280:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (pos_small * pwm_pos_small) +
 8001284:	ee77 6a27 	vadd.f32	s13, s14, s15
    ) / (neg_large + neg_small + zero + pos_small + pos_large + 0.0001f); // Avoid division by zero
 8001288:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800128c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001294:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80012f8 <fuzzy_pwm+0x350>
 80012b0:	ee37 7a87 	vadd.f32	s14, s15, s14
    pwm_adjustment = (
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    return pwm_adjustment;
 80012bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012be:	ee07 3a90 	vmov	s15, r3
}
 80012c2:	eeb0 0a67 	vmov.f32	s0, s15
 80012c6:	3738      	adds	r7, #56	@ 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	3ff00000 	.word	0x3ff00000
	...
 80012e0:	3ff00000 	.word	0x3ff00000
 80012e4:	41a00000 	.word	0x41a00000
 80012e8:	42200000 	.word	0x42200000
 80012ec:	42480000 	.word	0x42480000
 80012f0:	428c0000 	.word	0x428c0000
 80012f4:	42b40000 	.word	0x42b40000
 80012f8:	38d1b717 	.word	0x38d1b717

080012fc <process_uart_data>:


void process_uart_data() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    char *cmd_token = strtok((char *)rx_buffer, ",");
 8001302:	4918      	ldr	r1, [pc, #96]	@ (8001364 <process_uart_data+0x68>)
 8001304:	4818      	ldr	r0, [pc, #96]	@ (8001368 <process_uart_data+0x6c>)
 8001306:	f004 fac7 	bl	8005898 <strtok>
 800130a:	6078      	str	r0, [r7, #4]
    char *imu_token = strtok(NULL, ",");
 800130c:	4915      	ldr	r1, [pc, #84]	@ (8001364 <process_uart_data+0x68>)
 800130e:	2000      	movs	r0, #0
 8001310:	f004 fac2 	bl	8005898 <strtok>
 8001314:	6038      	str	r0, [r7, #0]

    if (cmd_token && imu_token) {
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01a      	beq.n	8001352 <process_uart_data+0x56>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d017      	beq.n	8001352 <process_uart_data+0x56>
        cmd_vel = atof(cmd_token);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f003 fbd2 	bl	8004acc <atof>
 8001328:	ec53 2b10 	vmov	r2, r3, d0
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc3c 	bl	8000bac <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <process_uart_data+0x70>)
 8001338:	6013      	str	r3, [r2, #0]
        imu_vel = atof(imu_token);
 800133a:	6838      	ldr	r0, [r7, #0]
 800133c:	f003 fbc6 	bl	8004acc <atof>
 8001340:	ec53 2b10 	vmov	r2, r3, d0
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc30 	bl	8000bac <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <process_uart_data+0x74>)
 8001350:	6013      	str	r3, [r2, #0]
    }
    memset(rx_buffer, 0, 32);
 8001352:	2220      	movs	r2, #32
 8001354:	2100      	movs	r1, #0
 8001356:	4804      	ldr	r0, [pc, #16]	@ (8001368 <process_uart_data+0x6c>)
 8001358:	f004 fafa 	bl	8005950 <memset>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	08007890 	.word	0x08007890
 8001368:	200002f0 	.word	0x200002f0
 800136c:	20000314 	.word	0x20000314
 8001370:	20000318 	.word	0x20000318

08001374 <set_pwm>:


void set_pwm(float duty_cycle) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (duty_cycle > 100.0f) duty_cycle = 100.0f;
 800137e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001382:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80013e0 <set_pwm+0x6c>
 8001386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	dd01      	ble.n	8001394 <set_pwm+0x20>
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <set_pwm+0x70>)
 8001392:	607b      	str	r3, [r7, #4]
    if (duty_cycle < 0.0f) duty_cycle = 0.0f;
 8001394:	edd7 7a01 	vldr	s15, [r7, #4]
 8001398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d502      	bpl.n	80013a8 <set_pwm+0x34>
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (htim3.Init.Period * duty_cycle) / 100);
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <set_pwm+0x74>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013bc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80013e0 <set_pwm+0x6c>
 80013c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <set_pwm+0x74>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013cc:	ee17 2a90 	vmov	r2, s15
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	42c80000 	.word	0x42c80000
 80013e4:	42c80000 	.word	0x42c80000
 80013e8:	200001f4 	.word	0x200001f4

080013ec <set_direction>:

void set_direction(int direction) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    // Direction control: 0 = reverse, 1 = forward
    if (direction == 1) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d105      	bne.n	8001406 <set_direction+0x1a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // DIR pin LOW for forward
 80013fa:	2200      	movs	r2, #0
 80013fc:	2102      	movs	r1, #2
 80013fe:	4806      	ldr	r0, [pc, #24]	@ (8001418 <set_direction+0x2c>)
 8001400:	f001 f8e0 	bl	80025c4 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // DIR pin HIGH for reverse
    }
}
 8001404:	e004      	b.n	8001410 <set_direction+0x24>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // DIR pin HIGH for reverse
 8001406:	2201      	movs	r2, #1
 8001408:	2102      	movs	r1, #2
 800140a:	4803      	ldr	r0, [pc, #12]	@ (8001418 <set_direction+0x2c>)
 800140c:	f001 f8da 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020400 	.word	0x40020400

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001422:	f000 fd01 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001426:	f000 f8c1 	bl	80015ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142a:	f000 f9db 	bl	80017e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800142e:	f000 f9af 	bl	8001790 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001432:	f000 f983 	bl	800173c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001436:	f000 f927 	bl	8001688 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

//HAL_UART_Receive_IT(&huart1, rx_data, 32);
HAL_UART_Receive_IT(&huart1, &rx_data[rx_index], 1);
 800143a:	4b50      	ldr	r3, [pc, #320]	@ (800157c <main+0x160>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	4b4f      	ldr	r3, [pc, #316]	@ (8001580 <main+0x164>)
 8001442:	4413      	add	r3, r2
 8001444:	2201      	movs	r2, #1
 8001446:	4619      	mov	r1, r3
 8001448:	484e      	ldr	r0, [pc, #312]	@ (8001584 <main+0x168>)
 800144a:	f002 fc1b 	bl	8003c84 <HAL_UART_Receive_IT>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Start PWM
 800144e:	2100      	movs	r1, #0
 8001450:	484d      	ldr	r0, [pc, #308]	@ (8001588 <main+0x16c>)
 8001452:	f001 ff09 	bl	8003268 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
  {
	  if (data_received) {
 8001456:	4b4d      	ldr	r3, [pc, #308]	@ (800158c <main+0x170>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <main+0x4c>
	              process_uart_data();
 800145e:	f7ff ff4d 	bl	80012fc <process_uart_data>
	              data_received = 0;
 8001462:	4b4a      	ldr	r3, [pc, #296]	@ (800158c <main+0x170>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
	          }    /* USER CODE END WHILE */
	  //float error = cmd_vel - imu_vel;

	  float error = cmd_vel - imu_vel;
 8001468:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <main+0x174>)
 800146a:	ed93 7a00 	vldr	s14, [r3]
 800146e:	4b49      	ldr	r3, [pc, #292]	@ (8001594 <main+0x178>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	edc7 7a01 	vstr	s15, [r7, #4]

	          // Compute PWM using Fuzzy Logic
	          pwm_duty = fuzzy_pwm(error);
 800147c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001480:	f7ff fd92 	bl	8000fa8 <fuzzy_pwm>
 8001484:	eef0 7a40 	vmov.f32	s15, s0
 8001488:	4b43      	ldr	r3, [pc, #268]	@ (8001598 <main+0x17c>)
 800148a:	edc3 7a00 	vstr	s15, [r3]

	          // Set direction (accelerate or decelerate)
	          if (cmd_vel > imu_vel) {
 800148e:	4b40      	ldr	r3, [pc, #256]	@ (8001590 <main+0x174>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b3f      	ldr	r3, [pc, #252]	@ (8001594 <main+0x178>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	dd1a      	ble.n	80014da <main+0xbe>
	              set_direction(0);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff ffa1 	bl	80013ec <set_direction>
	              strcpy(adjust, "0.2\n");
 80014aa:	4b3c      	ldr	r3, [pc, #240]	@ (800159c <main+0x180>)
 80014ac:	4a3c      	ldr	r2, [pc, #240]	@ (80015a0 <main+0x184>)
 80014ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b2:	6018      	str	r0, [r3, #0]
 80014b4:	3304      	adds	r3, #4
 80014b6:	7019      	strb	r1, [r3, #0]
	              	      HAL_Delay(100);
 80014b8:	2064      	movs	r0, #100	@ 0x64
 80014ba:	f000 fd27 	bl	8001f0c <HAL_Delay>
	              	      HAL_UART_Transmit_IT(&huart1, (uint8_t *)adjust, strlen(adjust));
 80014be:	4837      	ldr	r0, [pc, #220]	@ (800159c <main+0x180>)
 80014c0:	f7fe fea6 	bl	8000210 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4934      	ldr	r1, [pc, #208]	@ (800159c <main+0x180>)
 80014cc:	482d      	ldr	r0, [pc, #180]	@ (8001584 <main+0x168>)
 80014ce:	f002 fba3 	bl	8003c18 <HAL_UART_Transmit_IT>
	              	      HAL_Delay(100);
 80014d2:	2064      	movs	r0, #100	@ 0x64
 80014d4:	f000 fd1a 	bl	8001f0c <HAL_Delay>
 80014d8:	e048      	b.n	800156c <main+0x150>
	          } else if (cmd_vel < imu_vel) {
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <main+0x174>)
 80014dc:	ed93 7a00 	vldr	s14, [r3]
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <main+0x178>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	d51a      	bpl.n	8001526 <main+0x10a>
	              set_direction(1);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff ff7b 	bl	80013ec <set_direction>
	              strcpy(adjust, "-0.2\n");
 80014f6:	4b29      	ldr	r3, [pc, #164]	@ (800159c <main+0x180>)
 80014f8:	4a2a      	ldr	r2, [pc, #168]	@ (80015a4 <main+0x188>)
 80014fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014fe:	6018      	str	r0, [r3, #0]
 8001500:	3304      	adds	r3, #4
 8001502:	8019      	strh	r1, [r3, #0]
	              	      HAL_Delay(100);
 8001504:	2064      	movs	r0, #100	@ 0x64
 8001506:	f000 fd01 	bl	8001f0c <HAL_Delay>
	              	      HAL_UART_Transmit_IT(&huart1, (uint8_t *)adjust, strlen(adjust));
 800150a:	4824      	ldr	r0, [pc, #144]	@ (800159c <main+0x180>)
 800150c:	f7fe fe80 	bl	8000210 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29b      	uxth	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4921      	ldr	r1, [pc, #132]	@ (800159c <main+0x180>)
 8001518:	481a      	ldr	r0, [pc, #104]	@ (8001584 <main+0x168>)
 800151a:	f002 fb7d 	bl	8003c18 <HAL_UART_Transmit_IT>
	              	      HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	@ 0x64
 8001520:	f000 fcf4 	bl	8001f0c <HAL_Delay>
 8001524:	e022      	b.n	800156c <main+0x150>
	          }
	          else {  // When cmd_vel == imu_vel
	          	      pwm_duty = 0.0f;  // Stop actuator
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <main+0x17c>)
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	          	      set_pwm(pwm_duty);
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <main+0x17c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	f7ff ff1c 	bl	8001374 <set_pwm>

	          	      // Send 0 to stop imu_vel changes
	          	      strcpy(adjust, "0\n");
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <main+0x180>)
 800153e:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <main+0x18c>)
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4611      	mov	r1, r2
 8001544:	8019      	strh	r1, [r3, #0]
 8001546:	3302      	adds	r3, #2
 8001548:	0c12      	lsrs	r2, r2, #16
 800154a:	701a      	strb	r2, [r3, #0]
	          	      HAL_Delay(10);
 800154c:	200a      	movs	r0, #10
 800154e:	f000 fcdd 	bl	8001f0c <HAL_Delay>
	          	      HAL_UART_Transmit_IT(&huart1, (uint8_t *)adjust, strlen(adjust));
 8001552:	4812      	ldr	r0, [pc, #72]	@ (800159c <main+0x180>)
 8001554:	f7fe fe5c 	bl	8000210 <strlen>
 8001558:	4603      	mov	r3, r0
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	490f      	ldr	r1, [pc, #60]	@ (800159c <main+0x180>)
 8001560:	4808      	ldr	r0, [pc, #32]	@ (8001584 <main+0x168>)
 8001562:	f002 fb59 	bl	8003c18 <HAL_UART_Transmit_IT>
	          	      HAL_Delay(10);
 8001566:	200a      	movs	r0, #10
 8001568:	f000 fcd0 	bl	8001f0c <HAL_Delay>
	          	  }

	          // Apply PWM
	          set_pwm(pwm_duty);
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <main+0x17c>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	f7ff fefd 	bl	8001374 <set_pwm>
  {
 800157a:	e76c      	b.n	8001456 <main+0x3a>
 800157c:	200002cc 	.word	0x200002cc
 8001580:	200002d0 	.word	0x200002d0
 8001584:	2000023c 	.word	0x2000023c
 8001588:	200001f4 	.word	0x200001f4
 800158c:	20000310 	.word	0x20000310
 8001590:	20000314 	.word	0x20000314
 8001594:	20000318 	.word	0x20000318
 8001598:	20000000 	.word	0x20000000
 800159c:	2000031c 	.word	0x2000031c
 80015a0:	08007894 	.word	0x08007894
 80015a4:	0800789c 	.word	0x0800789c
 80015a8:	080078a4 	.word	0x080078a4

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b094      	sub	sp, #80	@ 0x50
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	2234      	movs	r2, #52	@ 0x34
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 f9c8 	bl	8005950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <SystemClock_Config+0xd4>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	4a29      	ldr	r2, [pc, #164]	@ (8001680 <SystemClock_Config+0xd4>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e0:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <SystemClock_Config+0xd4>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <SystemClock_Config+0xd8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015f8:	4a22      	ldr	r2, [pc, #136]	@ (8001684 <SystemClock_Config+0xd8>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <SystemClock_Config+0xd8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160c:	2302      	movs	r3, #2
 800160e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001614:	2310      	movs	r3, #16
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001618:	2302      	movs	r3, #2
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800161c:	2300      	movs	r3, #0
 800161e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001620:	2310      	movs	r3, #16
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001624:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001628:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800162a:	2304      	movs	r3, #4
 800162c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800162e:	2302      	movs	r3, #2
 8001630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001632:	2302      	movs	r3, #2
 8001634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fb26 	bl	8002c8c <HAL_RCC_OscConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001646:	f000 f993 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164a:	230f      	movs	r3, #15
 800164c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164e:	2302      	movs	r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	2102      	movs	r1, #2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 ffc6 	bl	80025f8 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001672:	f000 f97d 	bl	8001970 <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3750      	adds	r7, #80	@ 0x50
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016aa:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <MX_TIM3_Init+0xac>)
 80016ac:	4a22      	ldr	r2, [pc, #136]	@ (8001738 <MX_TIM3_Init+0xb0>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 80016b0:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <MX_TIM3_Init+0xac>)
 80016b2:	2253      	movs	r2, #83	@ 0x53
 80016b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <MX_TIM3_Init+0xac>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <MX_TIM3_Init+0xac>)
 80016be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_TIM3_Init+0xac>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_TIM3_Init+0xac>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016d0:	4818      	ldr	r0, [pc, #96]	@ (8001734 <MX_TIM3_Init+0xac>)
 80016d2:	f001 fd79 	bl	80031c8 <HAL_TIM_PWM_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016dc:	f000 f948 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016e8:	f107 0320 	add.w	r3, r7, #32
 80016ec:	4619      	mov	r1, r3
 80016ee:	4811      	ldr	r0, [pc, #68]	@ (8001734 <MX_TIM3_Init+0xac>)
 80016f0:	f002 f9c6 	bl	8003a80 <HAL_TIMEx_MasterConfigSynchronization>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016fa:	f000 f939 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fe:	2360      	movs	r3, #96	@ 0x60
 8001700:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	4807      	ldr	r0, [pc, #28]	@ (8001734 <MX_TIM3_Init+0xac>)
 8001716:	f001 fe6f 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001720:	f000 f926 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001724:	4803      	ldr	r0, [pc, #12]	@ (8001734 <MX_TIM3_Init+0xac>)
 8001726:	f000 f973 	bl	8001a10 <HAL_TIM_MspPostInit>

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001f4 	.word	0x200001f4
 8001738:	40000400 	.word	0x40000400

0800173c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 8001742:	4a12      	ldr	r2, [pc, #72]	@ (800178c <MX_USART1_UART_Init+0x50>)
 8001744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_USART1_UART_Init+0x4c>)
 8001774:	f002 fa00 	bl	8003b78 <HAL_UART_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800177e:	f000 f8f7 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000023c 	.word	0x2000023c
 800178c:	40011000 	.word	0x40011000

08001790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 8001796:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <MX_USART2_UART_Init+0x50>)
 8001798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 800179c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017c8:	f002 f9d6 	bl	8003b78 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017d2:	f000 f8cd 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000284 	.word	0x20000284
 80017e0:	40004400 	.word	0x40004400

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a36      	ldr	r2, [pc, #216]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <MX_GPIO_Init+0xf8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <MX_GPIO_Init+0xf8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b29      	ldr	r3, [pc, #164]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a28      	ldr	r2, [pc, #160]	@ (80018dc <MX_GPIO_Init+0xf8>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <MX_GPIO_Init+0xf8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2120      	movs	r1, #32
 800186e:	481c      	ldr	r0, [pc, #112]	@ (80018e0 <MX_GPIO_Init+0xfc>)
 8001870:	f000 fea8 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2102      	movs	r1, #2
 8001878:	481a      	ldr	r0, [pc, #104]	@ (80018e4 <MX_GPIO_Init+0x100>)
 800187a:	f000 fea3 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001884:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4814      	ldr	r0, [pc, #80]	@ (80018e8 <MX_GPIO_Init+0x104>)
 8001896:	f000 fd01 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800189a:	2320      	movs	r3, #32
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <MX_GPIO_Init+0xfc>)
 80018b2:	f000 fcf3 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018b6:	2302      	movs	r3, #2
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_GPIO_Init+0x100>)
 80018ce:	f000 fce5 	bl	800229c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	@ 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800

080018ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a17      	ldr	r2, [pc, #92]	@ (8001958 <HAL_UART_RxCpltCallback+0x6c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d127      	bne.n	800194e <HAL_UART_RxCpltCallback+0x62>
        if (rx_data[0] == '\n') {
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_UART_RxCpltCallback+0x70>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b0a      	cmp	r3, #10
 8001904:	d10c      	bne.n	8001920 <HAL_UART_RxCpltCallback+0x34>
            rx_buffer[rx_index] = '\0';
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_UART_RxCpltCallback+0x74>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_UART_RxCpltCallback+0x78>)
 800190e:	2100      	movs	r1, #0
 8001910:	5499      	strb	r1, [r3, r2]
            data_received = 1;
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_UART_RxCpltCallback+0x7c>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_UART_RxCpltCallback+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e011      	b.n	8001944 <HAL_UART_RxCpltCallback+0x58>
        } else {
            rx_buffer[rx_index++] = rx_data[0];
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <HAL_UART_RxCpltCallback+0x74>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	b2d1      	uxtb	r1, r2
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <HAL_UART_RxCpltCallback+0x74>)
 800192a:	7011      	strb	r1, [r2, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_UART_RxCpltCallback+0x70>)
 8001930:	7819      	ldrb	r1, [r3, #0]
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_UART_RxCpltCallback+0x78>)
 8001934:	5499      	strb	r1, [r3, r2]
            if (rx_index >= 32) rx_index = 0;
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_UART_RxCpltCallback+0x74>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b1f      	cmp	r3, #31
 800193c:	d902      	bls.n	8001944 <HAL_UART_RxCpltCallback+0x58>
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <HAL_UART_RxCpltCallback+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, &rx_data[0], 1);
 8001944:	2201      	movs	r2, #1
 8001946:	4905      	ldr	r1, [pc, #20]	@ (800195c <HAL_UART_RxCpltCallback+0x70>)
 8001948:	4808      	ldr	r0, [pc, #32]	@ (800196c <HAL_UART_RxCpltCallback+0x80>)
 800194a:	f002 f99b 	bl	8003c84 <HAL_UART_Receive_IT>
    }
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40011000 	.word	0x40011000
 800195c:	200002d0 	.word	0x200002d0
 8001960:	200002cc 	.word	0x200002cc
 8001964:	200002f0 	.word	0x200002f0
 8001968:	20000310 	.word	0x20000310
 800196c:	2000023c 	.word	0x2000023c

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <Error_Handler+0x8>

0800197c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <HAL_MspInit+0x4c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <HAL_MspInit+0x4c>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001990:	6453      	str	r3, [r2, #68]	@ 0x44
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ba:	2007      	movs	r0, #7
 80019bc:	f000 fb9a 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800

080019cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10d      	bne.n	80019fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_TIM_PWM_MspInit+0x40>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	4a09      	ldr	r2, [pc, #36]	@ (8001a0c <HAL_TIM_PWM_MspInit+0x40>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <HAL_TIM_PWM_MspInit+0x40>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <HAL_TIM_MspPostInit+0x68>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d11d      	bne.n	8001a6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_TIM_MspPostInit+0x6c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <HAL_TIM_MspPostInit+0x6c>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_TIM_MspPostInit+0x6c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a4e:	2340      	movs	r3, #64	@ 0x40
 8001a50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <HAL_TIM_MspPostInit+0x70>)
 8001a6a:	f000 fc17 	bl	800229c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	@ 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a3a      	ldr	r2, [pc, #232]	@ (8001b8c <HAL_UART_MspInit+0x108>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d135      	bne.n	8001b12 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a38      	ldr	r2, [pc, #224]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a31      	ldr	r2, [pc, #196]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ade:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af0:	2307      	movs	r3, #7
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4826      	ldr	r0, [pc, #152]	@ (8001b94 <HAL_UART_MspInit+0x110>)
 8001afc:	f000 fbce 	bl	800229c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	2025      	movs	r0, #37	@ 0x25
 8001b06:	f000 fb00 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b0a:	2025      	movs	r0, #37	@ 0x25
 8001b0c:	f000 fb19 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b10:	e038      	b.n	8001b84 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a20      	ldr	r2, [pc, #128]	@ (8001b98 <HAL_UART_MspInit+0x114>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d133      	bne.n	8001b84 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_UART_MspInit+0x10c>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b54:	230c      	movs	r3, #12
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b64:	2307      	movs	r3, #7
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4809      	ldr	r0, [pc, #36]	@ (8001b94 <HAL_UART_MspInit+0x110>)
 8001b70:	f000 fb94 	bl	800229c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2026      	movs	r0, #38	@ 0x26
 8001b7a:	f000 fac6 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b7e:	2026      	movs	r0, #38	@ 0x26
 8001b80:	f000 fadf 	bl	8002142 <HAL_NVIC_EnableIRQ>
}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	@ 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40004400 	.word	0x40004400

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf2:	f000 f96b 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <USART1_IRQHandler+0x10>)
 8001c02:	f002 f865 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000023c 	.word	0x2000023c

08001c10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <USART2_IRQHandler+0x10>)
 8001c16:	f002 f85b 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000284 	.word	0x20000284

08001c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_kill>:

int _kill(int pid, int sig)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c3e:	f003 fe8f 	bl	8005960 <__errno>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2216      	movs	r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
  return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_exit>:

void _exit (int status)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffe7 	bl	8001c34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c66:	bf00      	nop
 8001c68:	e7fd      	b.n	8001c66 <_exit+0x12>

08001c6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e00a      	b.n	8001c92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c7c:	f3af 8000 	nop.w
 8001c80:	4601      	mov	r1, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	60ba      	str	r2, [r7, #8]
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dbf0      	blt.n	8001c7c <_read+0x12>
  }

  return len;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e009      	b.n	8001cca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	60ba      	str	r2, [r7, #8]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbf1      	blt.n	8001cb6 <_write+0x12>
  }
  return len;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_close>:

int _close(int file)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	605a      	str	r2, [r3, #4]
  return 0;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_isatty>:

int _isatty(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f003 fdf4 	bl	8005960 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20020000 	.word	0x20020000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	20000328 	.word	0x20000328
 8001dac:	20000480 	.word	0x20000480

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dd8:	f7ff ffea 	bl	8001db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f003 fdb3 	bl	800596c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff fb09 	bl	800141c <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e18:	08007ce4 	.word	0x08007ce4
  ldr r2, =_sbss
 8001e1c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e20:	2000047c 	.word	0x2000047c

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f94f 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fd8e 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f967 	bl	800215e <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea8:	f000 f92f 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000004 	.word	0x20000004
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	20000008 	.word	0x20000008

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	2000032c 	.word	0x2000032c

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000032c 	.word	0x2000032c

08001f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ffee 	bl	8001ef4 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f24:	d005      	beq.n	8001f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_Delay+0x44>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f32:	bf00      	nop
 8001f34:	f7ff ffde 	bl	8001ef4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f7      	bhi.n	8001f34 <HAL_Delay+0x28>
  {
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	@ (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	@ (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	@ (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	@ 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	@ 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020d4:	f7ff ff8e 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff29 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff3e 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff8e 	bl	8002048 <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5d 	bl	8001ff4 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff31 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa2 	bl	80020b0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff feb6 	bl	8001ef4 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d008      	beq.n	80021a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e052      	b.n	800224e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0216 	bic.w	r2, r2, #22
 80021b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <HAL_DMA_Abort+0x62>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0208 	bic.w	r2, r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f8:	e013      	b.n	8002222 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fa:	f7ff fe7b 	bl	8001ef4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b05      	cmp	r3, #5
 8002206:	d90c      	bls.n	8002222 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e015      	b.n	800224e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e4      	bne.n	80021fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002234:	223f      	movs	r2, #63	@ 0x3f
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e00c      	b.n	800228e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2205      	movs	r2, #5
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e165      	b.n	8002584 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8154 	bne.w	800257e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80ae 	beq.w	800257e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b5d      	ldr	r3, [pc, #372]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	4a5c      	ldr	r2, [pc, #368]	@ (800259c <HAL_GPIO_Init+0x300>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002430:	6453      	str	r3, [r2, #68]	@ 0x44
 8002432:	4b5a      	ldr	r3, [pc, #360]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a58      	ldr	r2, [pc, #352]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4f      	ldr	r2, [pc, #316]	@ (80025a4 <HAL_GPIO_Init+0x308>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x21a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4e      	ldr	r2, [pc, #312]	@ (80025a8 <HAL_GPIO_Init+0x30c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x216>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4d      	ldr	r2, [pc, #308]	@ (80025ac <HAL_GPIO_Init+0x310>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x212>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4c      	ldr	r2, [pc, #304]	@ (80025b0 <HAL_GPIO_Init+0x314>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x20e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4b      	ldr	r2, [pc, #300]	@ (80025b4 <HAL_GPIO_Init+0x318>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x20a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4a      	ldr	r2, [pc, #296]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x206>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a49      	ldr	r2, [pc, #292]	@ (80025bc <HAL_GPIO_Init+0x320>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x202>
 800249a:	2306      	movs	r3, #6
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 800249e:	2307      	movs	r3, #7
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b3a      	ldr	r3, [pc, #232]	@ (80025c0 <HAL_GPIO_Init+0x324>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fa:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <HAL_GPIO_Init+0x324>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002500:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_GPIO_Init+0x324>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002524:	4a26      	ldr	r2, [pc, #152]	@ (80025c0 <HAL_GPIO_Init+0x324>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252a:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <HAL_GPIO_Init+0x324>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254e:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <HAL_GPIO_Init+0x324>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002554:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_GPIO_Init+0x324>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002578:	4a11      	ldr	r2, [pc, #68]	@ (80025c0 <HAL_GPIO_Init+0x324>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae96 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0cc      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d90c      	bls.n	8002634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b65      	ldr	r3, [pc, #404]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d044      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b3f      	ldr	r3, [pc, #252]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e067      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b37      	ldr	r3, [pc, #220]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4934      	ldr	r1, [pc, #208]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7ff fc04 	bl	8001ef4 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7ff fc00 	bl	8001ef4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20c      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f855 	bl	800282c <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fb64 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	080078a8 	.word	0x080078a8
 80027bc:	20000004 	.word	0x20000004
 80027c0:	20000008 	.word	0x20000008

080027c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0a9b      	lsrs	r3, r3, #10
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4903      	ldr	r1, [pc, #12]	@ (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	080078b8 	.word	0x080078b8

08002804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002808:	f7ff ffdc 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0b5b      	lsrs	r3, r3, #13
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4903      	ldr	r1, [pc, #12]	@ (8002828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	080078b8 	.word	0x080078b8

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002830:	b0ae      	sub	sp, #184	@ 0xb8
 8002832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002852:	4bcb      	ldr	r3, [pc, #812]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b0c      	cmp	r3, #12
 800285c:	f200 8206 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x440>
 8002860:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002866:	bf00      	nop
 8002868:	0800289d 	.word	0x0800289d
 800286c:	08002c6d 	.word	0x08002c6d
 8002870:	08002c6d 	.word	0x08002c6d
 8002874:	08002c6d 	.word	0x08002c6d
 8002878:	080028a5 	.word	0x080028a5
 800287c:	08002c6d 	.word	0x08002c6d
 8002880:	08002c6d 	.word	0x08002c6d
 8002884:	08002c6d 	.word	0x08002c6d
 8002888:	080028ad 	.word	0x080028ad
 800288c:	08002c6d 	.word	0x08002c6d
 8002890:	08002c6d 	.word	0x08002c6d
 8002894:	08002c6d 	.word	0x08002c6d
 8002898:	08002a9d 	.word	0x08002a9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x358>)
 800289e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028a2:	e1e7      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a4:	4bb8      	ldr	r3, [pc, #736]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x35c>)
 80028a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028aa:	e1e3      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4bb4      	ldr	r3, [pc, #720]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b8:	4bb1      	ldr	r3, [pc, #708]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d071      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c4:	4bae      	ldr	r3, [pc, #696]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fc:	0150      	lsls	r0, r2, #5
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4621      	mov	r1, r4
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	6439      	str	r1, [r7, #64]	@ 0x40
 8002908:	4629      	mov	r1, r5
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800291c:	4649      	mov	r1, r9
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002926:	4641      	mov	r1, r8
 8002928:	018a      	lsls	r2, r1, #6
 800292a:	4641      	mov	r1, r8
 800292c:	1a51      	subs	r1, r2, r1
 800292e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002930:	4649      	mov	r1, r9
 8002932:	eb63 0301 	sbc.w	r3, r3, r1
 8002936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002944:	4649      	mov	r1, r9
 8002946:	00cb      	lsls	r3, r1, #3
 8002948:	4641      	mov	r1, r8
 800294a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800294e:	4641      	mov	r1, r8
 8002950:	00ca      	lsls	r2, r1, #3
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	4603      	mov	r3, r0
 8002958:	4622      	mov	r2, r4
 800295a:	189b      	adds	r3, r3, r2
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
 800295e:	462b      	mov	r3, r5
 8002960:	460a      	mov	r2, r1
 8002962:	eb42 0303 	adc.w	r3, r2, r3
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002974:	4629      	mov	r1, r5
 8002976:	024b      	lsls	r3, r1, #9
 8002978:	4621      	mov	r1, r4
 800297a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800297e:	4621      	mov	r1, r4
 8002980:	024a      	lsls	r2, r1, #9
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002990:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002994:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002998:	f7fe f958 	bl	8000c4c <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029a6:	e067      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a8:	4b75      	ldr	r3, [pc, #468]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80029b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029c2:	2300      	movs	r3, #0
 80029c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029ca:	4622      	mov	r2, r4
 80029cc:	462b      	mov	r3, r5
 80029ce:	f04f 0000 	mov.w	r0, #0
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	0159      	lsls	r1, r3, #5
 80029d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029dc:	0150      	lsls	r0, r2, #5
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4621      	mov	r1, r4
 80029e4:	1a51      	subs	r1, r2, r1
 80029e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029e8:	4629      	mov	r1, r5
 80029ea:	eb63 0301 	sbc.w	r3, r3, r1
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029fc:	4649      	mov	r1, r9
 80029fe:	018b      	lsls	r3, r1, #6
 8002a00:	4641      	mov	r1, r8
 8002a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a06:	4641      	mov	r1, r8
 8002a08:	018a      	lsls	r2, r1, #6
 8002a0a:	4641      	mov	r1, r8
 8002a0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a10:	4649      	mov	r1, r9
 8002a12:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a2a:	4692      	mov	sl, r2
 8002a2c:	469b      	mov	fp, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	eb1a 0303 	adds.w	r3, sl, r3
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	462b      	mov	r3, r5
 8002a38:	eb4b 0303 	adc.w	r3, fp, r3
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	028b      	lsls	r3, r1, #10
 8002a4e:	4621      	mov	r1, r4
 8002a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a54:	4621      	mov	r1, r4
 8002a56:	028a      	lsls	r2, r1, #10
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a60:	2200      	movs	r2, #0
 8002a62:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a64:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a6a:	f7fe f8ef 	bl	8000c4c <__aeabi_uldivmod>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4613      	mov	r3, r2
 8002a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a78:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a9a:	e0eb      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a9c:	4b38      	ldr	r3, [pc, #224]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa8:	4b35      	ldr	r3, [pc, #212]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d06b      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab4:	4b32      	ldr	r3, [pc, #200]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	2200      	movs	r2, #0
 8002abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002abe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ac8:	2300      	movs	r3, #0
 8002aca:	667b      	str	r3, [r7, #100]	@ 0x64
 8002acc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	f04f 0000 	mov.w	r0, #0
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	0159      	lsls	r1, r3, #5
 8002ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae2:	0150      	lsls	r0, r2, #5
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4621      	mov	r1, r4
 8002aea:	1a51      	subs	r1, r2, r1
 8002aec:	61b9      	str	r1, [r7, #24]
 8002aee:	4629      	mov	r1, r5
 8002af0:	eb63 0301 	sbc.w	r3, r3, r1
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b02:	4659      	mov	r1, fp
 8002b04:	018b      	lsls	r3, r1, #6
 8002b06:	4651      	mov	r1, sl
 8002b08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0c:	4651      	mov	r1, sl
 8002b0e:	018a      	lsls	r2, r1, #6
 8002b10:	4651      	mov	r1, sl
 8002b12:	ebb2 0801 	subs.w	r8, r2, r1
 8002b16:	4659      	mov	r1, fp
 8002b18:	eb63 0901 	sbc.w	r9, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b30:	4690      	mov	r8, r2
 8002b32:	4699      	mov	r9, r3
 8002b34:	4623      	mov	r3, r4
 8002b36:	eb18 0303 	adds.w	r3, r8, r3
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	eb49 0303 	adc.w	r3, r9, r3
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b50:	4629      	mov	r1, r5
 8002b52:	024b      	lsls	r3, r1, #9
 8002b54:	4621      	mov	r1, r4
 8002b56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	024a      	lsls	r2, r1, #9
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b66:	2200      	movs	r2, #0
 8002b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b70:	f7fe f86c 	bl	8000c4c <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b7e:	e065      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x420>
 8002b80:	40023800 	.word	0x40023800
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	2200      	movs	r2, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	4611      	mov	r1, r2
 8002b98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ba2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	464b      	mov	r3, r9
 8002baa:	f04f 0000 	mov.w	r0, #0
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	0159      	lsls	r1, r3, #5
 8002bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb8:	0150      	lsls	r0, r2, #5
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	1a51      	subs	r1, r2, r1
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bd8:	4659      	mov	r1, fp
 8002bda:	018b      	lsls	r3, r1, #6
 8002bdc:	4651      	mov	r1, sl
 8002bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002be2:	4651      	mov	r1, sl
 8002be4:	018a      	lsls	r2, r1, #6
 8002be6:	4651      	mov	r1, sl
 8002be8:	1a54      	subs	r4, r2, r1
 8002bea:	4659      	mov	r1, fp
 8002bec:	eb63 0501 	sbc.w	r5, r3, r1
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	00eb      	lsls	r3, r5, #3
 8002bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bfe:	00e2      	lsls	r2, r4, #3
 8002c00:	4614      	mov	r4, r2
 8002c02:	461d      	mov	r5, r3
 8002c04:	4643      	mov	r3, r8
 8002c06:	18e3      	adds	r3, r4, r3
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	eb45 0303 	adc.w	r3, r5, r3
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c1e:	4629      	mov	r1, r5
 8002c20:	028b      	lsls	r3, r1, #10
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c28:	4621      	mov	r1, r4
 8002c2a:	028a      	lsls	r2, r1, #10
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c34:	2200      	movs	r2, #0
 8002c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c3e:	f7fe f805 	bl	8000c4c <__aeabi_uldivmod>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4613      	mov	r3, r2
 8002c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	0f1b      	lsrs	r3, r3, #28
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c6a:	e003      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	37b8      	adds	r7, #184	@ 0xb8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400

08002c8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e28d      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8083 	beq.w	8002db2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cac:	4b94      	ldr	r3, [pc, #592]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d019      	beq.n	8002cec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cb8:	4b91      	ldr	r3, [pc, #580]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cd0:	d00c      	beq.n	8002cec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b88      	ldr	r3, [pc, #544]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b84      	ldr	r3, [pc, #528]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x124>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d157      	bne.n	8002db0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e25a      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x90>
 8002d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7b      	ldr	r2, [pc, #492]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xcc>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0xb4>
 8002d26:	4b76      	ldr	r3, [pc, #472]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b73      	ldr	r3, [pc, #460]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a72      	ldr	r2, [pc, #456]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xcc>
 8002d40:	4b6f      	ldr	r3, [pc, #444]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6e      	ldr	r2, [pc, #440]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a6b      	ldr	r2, [pc, #428]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff f8c8 	bl	8001ef4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff f8c4 	bl	8001ef4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e21f      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b61      	ldr	r3, [pc, #388]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xdc>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7ff f8b4 	bl	8001ef4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7ff f8b0 	bl	8001ef4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	@ 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e20b      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b57      	ldr	r3, [pc, #348]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x104>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d06f      	beq.n	8002e9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dbe:	4b50      	ldr	r3, [pc, #320]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d017      	beq.n	8002dfa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dca:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de2:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d11c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b44      	ldr	r3, [pc, #272]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x186>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1d3      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4937      	ldr	r1, [pc, #220]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	e03a      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e30:	4b34      	ldr	r3, [pc, #208]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7ff f85d 	bl	8001ef4 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7ff f859 	bl	8001ef4 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1b4      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b28      	ldr	r3, [pc, #160]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4925      	ldr	r1, [pc, #148]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7ff f83c 	bl	8001ef4 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7ff f838 	bl	8001ef4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e193      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d036      	beq.n	8002f18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7ff f81c 	bl	8001ef4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7ff f818 	bl	8001ef4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e173      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x234>
 8002ede:	e01b      	b.n	8002f18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7ff f805 	bl	8001ef4 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	e00e      	b.n	8002f0c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eee:	f7ff f801 	bl	8001ef4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d907      	bls.n	8002f0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e15c      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	42470000 	.word	0x42470000
 8002f08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ea      	bne.n	8002eee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8097 	beq.w	8003054 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b83      	ldr	r3, [pc, #524]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f46:	4b7c      	ldr	r3, [pc, #496]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b79      	ldr	r3, [pc, #484]	@ (800313c <HAL_RCC_OscConfig+0x4b0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b76      	ldr	r3, [pc, #472]	@ (800313c <HAL_RCC_OscConfig+0x4b0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	@ (800313c <HAL_RCC_OscConfig+0x4b0>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe ffc1 	bl	8001ef4 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fe ffbd 	bl	8001ef4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e118      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b6c      	ldr	r3, [pc, #432]	@ (800313c <HAL_RCC_OscConfig+0x4b0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x31e>
 8002f9c:	4b66      	ldr	r3, [pc, #408]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	4a65      	ldr	r2, [pc, #404]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x358>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x340>
 8002fb2:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	4a60      	ldr	r2, [pc, #384]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x358>
 8002fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd0:	4a59      	ldr	r2, [pc, #356]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd8:	4b57      	ldr	r3, [pc, #348]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a56      	ldr	r2, [pc, #344]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fde:	f023 0304 	bic.w	r3, r3, #4
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe ff82 	bl	8001ef4 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe ff7e 	bl	8001ef4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0d7      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	4b4b      	ldr	r3, [pc, #300]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ee      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x368>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe ff6c 	bl	8001ef4 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe ff68 	bl	8001ef4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0c1      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003036:	4b40      	ldr	r3, [pc, #256]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ee      	bne.n	8003020 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	4a3a      	ldr	r2, [pc, #232]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 800304e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80ad 	beq.w	80031b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305e:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b08      	cmp	r3, #8
 8003068:	d060      	beq.n	800312c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d145      	bne.n	80030fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b33      	ldr	r3, [pc, #204]	@ (8003140 <HAL_RCC_OscConfig+0x4b4>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe ff3c 	bl	8001ef4 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe ff38 	bl	8001ef4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e093      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b29      	ldr	r3, [pc, #164]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	071b      	lsls	r3, r3, #28
 80030ca:	491b      	ldr	r1, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <HAL_RCC_OscConfig+0x4b4>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe ff0d 	bl	8001ef4 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe ff09 	bl	8001ef4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e064      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f0:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x452>
 80030fc:	e05c      	b.n	80031b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_RCC_OscConfig+0x4b4>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe fef6 	bl	8001ef4 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fef2 	bl	8001ef4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e04d      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x480>
 800312a:	e045      	b.n	80031b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e040      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000
 8003140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003144:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_RCC_OscConfig+0x538>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d030      	beq.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d129      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d122      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800317a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800317c:	4293      	cmp	r3, r2
 800317e:	d119      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d10f      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e041      	b.n	800325e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe fbec 	bl	80019cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 f9b8 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_TIM_PWM_Start+0x24>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e022      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d109      	bne.n	80032a6 <HAL_TIM_PWM_Start+0x3e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e015      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d109      	bne.n	80032c0 <HAL_TIM_PWM_Start+0x58>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e008      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07c      	b.n	80033d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0x82>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032e8:	e013      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_PWM_Start+0x92>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f8:	e00b      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d104      	bne.n	800330a <HAL_TIM_PWM_Start+0xa2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003308:	e003      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2201      	movs	r2, #1
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fb8a 	bl	8003a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <HAL_TIM_PWM_Start+0x174>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_TIM_PWM_Start+0xcc>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2c      	ldr	r2, [pc, #176]	@ (80033e0 <HAL_TIM_PWM_Start+0x178>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d101      	bne.n	8003338 <HAL_TIM_PWM_Start+0xd0>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_TIM_PWM_Start+0xd2>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <HAL_TIM_PWM_Start+0x174>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003360:	d01d      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1f      	ldr	r2, [pc, #124]	@ (80033e4 <HAL_TIM_PWM_Start+0x17c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d018      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1d      	ldr	r2, [pc, #116]	@ (80033e8 <HAL_TIM_PWM_Start+0x180>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <HAL_TIM_PWM_Start+0x184>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00e      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a16      	ldr	r2, [pc, #88]	@ (80033e0 <HAL_TIM_PWM_Start+0x178>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a18      	ldr	r2, [pc, #96]	@ (80033f0 <HAL_TIM_PWM_Start+0x188>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_TIM_PWM_Start+0x136>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a16      	ldr	r2, [pc, #88]	@ (80033f4 <HAL_TIM_PWM_Start+0x18c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d111      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d010      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c0:	e007      	b.n	80033d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40010400 	.word	0x40010400
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40001800 	.word	0x40001800

080033f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003412:	2302      	movs	r3, #2
 8003414:	e0ae      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	f200 809f 	bhi.w	8003564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003426:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003461 	.word	0x08003461
 8003430:	08003565 	.word	0x08003565
 8003434:	08003565 	.word	0x08003565
 8003438:	08003565 	.word	0x08003565
 800343c:	080034a1 	.word	0x080034a1
 8003440:	08003565 	.word	0x08003565
 8003444:	08003565 	.word	0x08003565
 8003448:	08003565 	.word	0x08003565
 800344c:	080034e3 	.word	0x080034e3
 8003450:	08003565 	.word	0x08003565
 8003454:	08003565 	.word	0x08003565
 8003458:	08003565 	.word	0x08003565
 800345c:	08003523 	.word	0x08003523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f934 	bl	80036d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0208 	orr.w	r2, r2, #8
 800347a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0204 	bic.w	r2, r2, #4
 800348a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6999      	ldr	r1, [r3, #24]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	619a      	str	r2, [r3, #24]
      break;
 800349e:	e064      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f984 	bl	80037b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6999      	ldr	r1, [r3, #24]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	021a      	lsls	r2, r3, #8
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	619a      	str	r2, [r3, #24]
      break;
 80034e0:	e043      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f9d9 	bl	80038a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0208 	orr.w	r2, r2, #8
 80034fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0204 	bic.w	r2, r2, #4
 800350c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	61da      	str	r2, [r3, #28]
      break;
 8003520:	e023      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fa2d 	bl	8003988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800353c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69d9      	ldr	r1, [r3, #28]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	021a      	lsls	r2, r3, #8
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	61da      	str	r2, [r3, #28]
      break;
 8003562:	e002      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	75fb      	strb	r3, [r7, #23]
      break;
 8003568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a46      	ldr	r2, [pc, #280]	@ (80036a8 <TIM_Base_SetConfig+0x12c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a43      	ldr	r2, [pc, #268]	@ (80036ac <TIM_Base_SetConfig+0x130>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a42      	ldr	r2, [pc, #264]	@ (80036b0 <TIM_Base_SetConfig+0x134>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a41      	ldr	r2, [pc, #260]	@ (80036b4 <TIM_Base_SetConfig+0x138>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a40      	ldr	r2, [pc, #256]	@ (80036b8 <TIM_Base_SetConfig+0x13c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a35      	ldr	r2, [pc, #212]	@ (80036a8 <TIM_Base_SetConfig+0x12c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035dc:	d027      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a32      	ldr	r2, [pc, #200]	@ (80036ac <TIM_Base_SetConfig+0x130>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d023      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a31      	ldr	r2, [pc, #196]	@ (80036b0 <TIM_Base_SetConfig+0x134>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a30      	ldr	r2, [pc, #192]	@ (80036b4 <TIM_Base_SetConfig+0x138>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2f      	ldr	r2, [pc, #188]	@ (80036b8 <TIM_Base_SetConfig+0x13c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d017      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2e      	ldr	r2, [pc, #184]	@ (80036bc <TIM_Base_SetConfig+0x140>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a2d      	ldr	r2, [pc, #180]	@ (80036c0 <TIM_Base_SetConfig+0x144>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00f      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2c      	ldr	r2, [pc, #176]	@ (80036c4 <TIM_Base_SetConfig+0x148>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2b      	ldr	r2, [pc, #172]	@ (80036c8 <TIM_Base_SetConfig+0x14c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2a      	ldr	r2, [pc, #168]	@ (80036cc <TIM_Base_SetConfig+0x150>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a29      	ldr	r2, [pc, #164]	@ (80036d0 <TIM_Base_SetConfig+0x154>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a10      	ldr	r2, [pc, #64]	@ (80036a8 <TIM_Base_SetConfig+0x12c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0xf8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a12      	ldr	r2, [pc, #72]	@ (80036b8 <TIM_Base_SetConfig+0x13c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f023 0201 	bic.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	611a      	str	r2, [r3, #16]
  }
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40010400 	.word	0x40010400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40014400 	.word	0x40014400
 80036c4:	40014800 	.word	0x40014800
 80036c8:	40001800 	.word	0x40001800
 80036cc:	40001c00 	.word	0x40001c00
 80036d0:	40002000 	.word	0x40002000

080036d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 0201 	bic.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f023 0302 	bic.w	r3, r3, #2
 800371c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a20      	ldr	r2, [pc, #128]	@ (80037ac <TIM_OC1_SetConfig+0xd8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_OC1_SetConfig+0x64>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a1f      	ldr	r2, [pc, #124]	@ (80037b0 <TIM_OC1_SetConfig+0xdc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d10c      	bne.n	8003752 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0308 	bic.w	r3, r3, #8
 800373e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <TIM_OC1_SetConfig+0xd8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <TIM_OC1_SetConfig+0x8e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a14      	ldr	r2, [pc, #80]	@ (80037b0 <TIM_OC1_SetConfig+0xdc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40010000 	.word	0x40010000
 80037b0:	40010400 	.word	0x40010400

080037b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f023 0210 	bic.w	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0320 	bic.w	r3, r3, #32
 80037fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a22      	ldr	r2, [pc, #136]	@ (8003898 <TIM_OC2_SetConfig+0xe4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_OC2_SetConfig+0x68>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a21      	ldr	r2, [pc, #132]	@ (800389c <TIM_OC2_SetConfig+0xe8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10d      	bne.n	8003838 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003836:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a17      	ldr	r2, [pc, #92]	@ (8003898 <TIM_OC2_SetConfig+0xe4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_OC2_SetConfig+0x94>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a16      	ldr	r2, [pc, #88]	@ (800389c <TIM_OC2_SetConfig+0xe8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d113      	bne.n	8003870 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800384e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40010000 	.word	0x40010000
 800389c:	40010400 	.word	0x40010400

080038a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a21      	ldr	r2, [pc, #132]	@ (8003980 <TIM_OC3_SetConfig+0xe0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_OC3_SetConfig+0x66>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a20      	ldr	r2, [pc, #128]	@ (8003984 <TIM_OC3_SetConfig+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10d      	bne.n	8003922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800390c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <TIM_OC3_SetConfig+0xe0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_OC3_SetConfig+0x92>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a15      	ldr	r2, [pc, #84]	@ (8003984 <TIM_OC3_SetConfig+0xe4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d113      	bne.n	800395a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40010000 	.word	0x40010000
 8003984:	40010400 	.word	0x40010400

08003988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	031b      	lsls	r3, r3, #12
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a12      	ldr	r2, [pc, #72]	@ (8003a2c <TIM_OC4_SetConfig+0xa4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_OC4_SetConfig+0x68>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a11      	ldr	r2, [pc, #68]	@ (8003a30 <TIM_OC4_SetConfig+0xa8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d109      	bne.n	8003a04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	019b      	lsls	r3, r3, #6
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40010400 	.word	0x40010400

08003a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2201      	movs	r2, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1a      	ldr	r2, [r3, #32]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	401a      	ands	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e05a      	b.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a21      	ldr	r2, [pc, #132]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae4:	d01d      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1a      	ldr	r2, [pc, #104]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a15      	ldr	r2, [pc, #84]	@ (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10c      	bne.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40010400 	.word	0x40010400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40001800 	.word	0x40001800

08003b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e042      	b.n	8003c10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fd ff70 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	@ 0x24
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fd11 	bl	80045e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d121      	bne.n	8003c76 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_UART_Transmit_IT+0x26>
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e01a      	b.n	8003c78 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	@ 0x21
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c70:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d112      	bne.n	8003cc4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_UART_Receive_IT+0x26>
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00b      	b.n	8003cc6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 faba 	bl	8004234 <UART_Start_Receive_IT>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	e000      	b.n	8003cc6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_UART_IRQHandler+0x66>
 8003d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fb99 	bl	8004466 <UART_Receive_IT>
      return;
 8003d34:	e25b      	b.n	80041ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80de 	beq.w	8003efc <HAL_UART_IRQHandler+0x22c>
 8003d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80d1 	beq.w	8003efc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0xae>
 8003d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_UART_IRQHandler+0xd2>
 8003d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <HAL_UART_IRQHandler+0xf6>
 8003dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d011      	beq.n	8003df6 <HAL_UART_IRQHandler+0x126>
 8003dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d105      	bne.n	8003dea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f043 0208 	orr.w	r2, r3, #8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 81f2 	beq.w	80041e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_UART_IRQHandler+0x14e>
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fb24 	bl	8004466 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <HAL_UART_IRQHandler+0x17a>
 8003e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d04f      	beq.n	8003eea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa2c 	bl	80042a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d141      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3314      	adds	r3, #20
 8003e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1d9      	bne.n	8003e5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d013      	beq.n	8003eda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80040b0 <HAL_UART_IRQHandler+0x3e0>)
 8003eb8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe f9c9 	bl	8002256 <HAL_DMA_Abort_IT>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d016      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e00e      	b.n	8003ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f994 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	e00a      	b.n	8003ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f990 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	e006      	b.n	8003ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f98c 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ef6:	e175      	b.n	80041e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	bf00      	nop
    return;
 8003efa:	e173      	b.n	80041e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 814f 	bne.w	80041a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8148 	beq.w	80041a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8141 	beq.w	80041a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	f040 80b6 	bne.w	80040b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8145 	beq.w	80041e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f66:	429a      	cmp	r2, r3
 8003f68:	f080 813e 	bcs.w	80041e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f7e:	f000 8088 	beq.w	8004092 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003fae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1d9      	bne.n	8003f82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ff2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e1      	bne.n	8003fce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3314      	adds	r3, #20
 8004010:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800401a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800401c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3314      	adds	r3, #20
 800402a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800402e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004030:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800403c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e3      	bne.n	800400a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004062:	f023 0310 	bic.w	r3, r3, #16
 8004066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004074:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004076:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800407a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e3      	bne.n	8004050 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe f872 	bl	8002176 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f8b7 	bl	800421c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040ae:	e09b      	b.n	80041e8 <HAL_UART_IRQHandler+0x518>
 80040b0:	0800436f 	.word	0x0800436f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 808e 	beq.w	80041ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8089 	beq.w	80041ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004100:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004104:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800410c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e3      	bne.n	80040da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	623b      	str	r3, [r7, #32]
   return(result);
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004136:	633a      	str	r2, [r7, #48]	@ 0x30
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800413c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e3      	bne.n	8004112 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	60fb      	str	r3, [r7, #12]
   return(result);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0310 	bic.w	r3, r3, #16
 800416e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800417c:	61fa      	str	r2, [r7, #28]
 800417e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69b9      	ldr	r1, [r7, #24]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	617b      	str	r3, [r7, #20]
   return(result);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e3      	bne.n	8004158 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f83d 	bl	800421c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041a2:	e023      	b.n	80041ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <HAL_UART_IRQHandler+0x4f4>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8ea 	bl	8004396 <UART_Transmit_IT>
    return;
 80041c2:	e014      	b.n	80041ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00e      	beq.n	80041ee <HAL_UART_IRQHandler+0x51e>
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f92a 	bl	8004436 <UART_EndTransmit_IT>
    return;
 80041e2:	e004      	b.n	80041ee <HAL_UART_IRQHandler+0x51e>
    return;
 80041e4:	bf00      	nop
 80041e6:	e002      	b.n	80041ee <HAL_UART_IRQHandler+0x51e>
      return;
 80041e8:	bf00      	nop
 80041ea:	e000      	b.n	80041ee <HAL_UART_IRQHandler+0x51e>
      return;
 80041ec:	bf00      	nop
  }
}
 80041ee:	37e8      	adds	r7, #232	@ 0xe8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2222      	movs	r2, #34	@ 0x22
 800425e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004278:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0220 	orr.w	r2, r2, #32
 8004298:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b095      	sub	sp, #84	@ 0x54
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3314      	adds	r3, #20
 80042ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3314      	adds	r3, #20
 8004302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004304:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800430a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e5      	bne.n	80042e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	2b01      	cmp	r3, #1
 800431e:	d119      	bne.n	8004354 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f023 0310 	bic.w	r3, r3, #16
 8004336:	647b      	str	r3, [r7, #68]	@ 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004340:	61ba      	str	r2, [r7, #24]
 8004342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6979      	ldr	r1, [r7, #20]
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	613b      	str	r3, [r7, #16]
   return(result);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e5      	bne.n	8004320 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004362:	bf00      	nop
 8004364:	3754      	adds	r7, #84	@ 0x54
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff ff3d 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b21      	cmp	r3, #33	@ 0x21
 80043a8:	d13e      	bne.n	8004428 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b2:	d114      	bne.n	80043de <UART_Transmit_IT+0x48>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d110      	bne.n	80043de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	1c9a      	adds	r2, r3, #2
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]
 80043dc:	e008      	b.n	80043f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6211      	str	r1, [r2, #32]
 80043e8:	781a      	ldrb	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10f      	bne.n	8004424 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004412:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004422:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800444c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fecc 	bl	80041f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08c      	sub	sp, #48	@ 0x30
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b22      	cmp	r3, #34	@ 0x22
 8004478:	f040 80ae 	bne.w	80045d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004484:	d117      	bne.n	80044b6 <UART_Receive_IT+0x50>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d113      	bne.n	80044b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	1c9a      	adds	r2, r3, #2
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044b4:	e026      	b.n	8004504 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c8:	d007      	beq.n	80044da <UART_Receive_IT+0x74>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <UART_Receive_IT+0x82>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e008      	b.n	80044fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004514:	2b00      	cmp	r3, #0
 8004516:	d15d      	bne.n	80045d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0220 	bic.w	r2, r2, #32
 8004526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	2b01      	cmp	r3, #1
 800455c:	d135      	bne.n	80045ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	613b      	str	r3, [r7, #16]
   return(result);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f023 0310 	bic.w	r3, r3, #16
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	623a      	str	r2, [r7, #32]
 8004586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	69f9      	ldr	r1, [r7, #28]
 800458a:	6a3a      	ldr	r2, [r7, #32]
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	61bb      	str	r3, [r7, #24]
   return(result);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d10a      	bne.n	80045bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fe2a 	bl	800421c <HAL_UARTEx_RxEventCallback>
 80045c8:	e002      	b.n	80045d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fd f98e 	bl	80018ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e002      	b.n	80045da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3730      	adds	r7, #48	@ 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e8:	b0c0      	sub	sp, #256	@ 0x100
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	68d9      	ldr	r1, [r3, #12]
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	ea40 0301 	orr.w	r3, r0, r1
 800460c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	431a      	orrs	r2, r3
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	431a      	orrs	r2, r3
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800463c:	f021 010c 	bic.w	r1, r1, #12
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800464a:	430b      	orrs	r3, r1
 800464c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	6999      	ldr	r1, [r3, #24]
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	ea40 0301 	orr.w	r3, r0, r1
 800466a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b8f      	ldr	r3, [pc, #572]	@ (80048b0 <UART_SetConfig+0x2cc>)
 8004674:	429a      	cmp	r2, r3
 8004676:	d005      	beq.n	8004684 <UART_SetConfig+0xa0>
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b8d      	ldr	r3, [pc, #564]	@ (80048b4 <UART_SetConfig+0x2d0>)
 8004680:	429a      	cmp	r2, r3
 8004682:	d104      	bne.n	800468e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7fe f8be 	bl	8002804 <HAL_RCC_GetPCLK2Freq>
 8004688:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800468c:	e003      	b.n	8004696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800468e:	f7fe f8a5 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8004692:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a0:	f040 810c 	bne.w	80048bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	1891      	adds	r1, r2, r2
 80046bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046be:	415b      	adcs	r3, r3
 80046c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046c6:	4621      	mov	r1, r4
 80046c8:	eb12 0801 	adds.w	r8, r2, r1
 80046cc:	4629      	mov	r1, r5
 80046ce:	eb43 0901 	adc.w	r9, r3, r1
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046e6:	4690      	mov	r8, r2
 80046e8:	4699      	mov	r9, r3
 80046ea:	4623      	mov	r3, r4
 80046ec:	eb18 0303 	adds.w	r3, r8, r3
 80046f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046f4:	462b      	mov	r3, r5
 80046f6:	eb49 0303 	adc.w	r3, r9, r3
 80046fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800470a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800470e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004712:	460b      	mov	r3, r1
 8004714:	18db      	adds	r3, r3, r3
 8004716:	653b      	str	r3, [r7, #80]	@ 0x50
 8004718:	4613      	mov	r3, r2
 800471a:	eb42 0303 	adc.w	r3, r2, r3
 800471e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004728:	f7fc fa90 	bl	8000c4c <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4b61      	ldr	r3, [pc, #388]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004732:	fba3 2302 	umull	r2, r3, r3, r2
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	011c      	lsls	r4, r3, #4
 800473a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	1891      	adds	r1, r2, r2
 8004752:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004754:	415b      	adcs	r3, r3
 8004756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800475c:	4641      	mov	r1, r8
 800475e:	eb12 0a01 	adds.w	sl, r2, r1
 8004762:	4649      	mov	r1, r9
 8004764:	eb43 0b01 	adc.w	fp, r3, r1
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800477c:	4692      	mov	sl, r2
 800477e:	469b      	mov	fp, r3
 8004780:	4643      	mov	r3, r8
 8004782:	eb1a 0303 	adds.w	r3, sl, r3
 8004786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800478a:	464b      	mov	r3, r9
 800478c:	eb4b 0303 	adc.w	r3, fp, r3
 8004790:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047a8:	460b      	mov	r3, r1
 80047aa:	18db      	adds	r3, r3, r3
 80047ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ae:	4613      	mov	r3, r2
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047be:	f7fc fa45 	bl	8000c4c <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	4b3b      	ldr	r3, [pc, #236]	@ (80048b8 <UART_SetConfig+0x2d4>)
 80047ca:	fba3 2301 	umull	r2, r3, r3, r1
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2264      	movs	r2, #100	@ 0x64
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	1acb      	subs	r3, r1, r3
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047de:	4b36      	ldr	r3, [pc, #216]	@ (80048b8 <UART_SetConfig+0x2d4>)
 80047e0:	fba3 2302 	umull	r2, r3, r3, r2
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047ec:	441c      	add	r4, r3
 80047ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	1891      	adds	r1, r2, r2
 8004806:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004808:	415b      	adcs	r3, r3
 800480a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800480c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004810:	4641      	mov	r1, r8
 8004812:	1851      	adds	r1, r2, r1
 8004814:	6339      	str	r1, [r7, #48]	@ 0x30
 8004816:	4649      	mov	r1, r9
 8004818:	414b      	adcs	r3, r1
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004828:	4659      	mov	r1, fp
 800482a:	00cb      	lsls	r3, r1, #3
 800482c:	4651      	mov	r1, sl
 800482e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004832:	4651      	mov	r1, sl
 8004834:	00ca      	lsls	r2, r1, #3
 8004836:	4610      	mov	r0, r2
 8004838:	4619      	mov	r1, r3
 800483a:	4603      	mov	r3, r0
 800483c:	4642      	mov	r2, r8
 800483e:	189b      	adds	r3, r3, r2
 8004840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004844:	464b      	mov	r3, r9
 8004846:	460a      	mov	r2, r1
 8004848:	eb42 0303 	adc.w	r3, r2, r3
 800484c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800485c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004864:	460b      	mov	r3, r1
 8004866:	18db      	adds	r3, r3, r3
 8004868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800486a:	4613      	mov	r3, r2
 800486c:	eb42 0303 	adc.w	r3, r2, r3
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800487a:	f7fc f9e7 	bl	8000c4c <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	@ 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	3332      	adds	r3, #50	@ 0x32
 8004896:	4a08      	ldr	r2, [pc, #32]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 0207 	and.w	r2, r3, #7
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4422      	add	r2, r4
 80048aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048ac:	e106      	b.n	8004abc <UART_SetConfig+0x4d8>
 80048ae:	bf00      	nop
 80048b0:	40011000 	.word	0x40011000
 80048b4:	40011400 	.word	0x40011400
 80048b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048ce:	4642      	mov	r2, r8
 80048d0:	464b      	mov	r3, r9
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	6239      	str	r1, [r7, #32]
 80048d6:	415b      	adcs	r3, r3
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048de:	4641      	mov	r1, r8
 80048e0:	1854      	adds	r4, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb43 0501 	adc.w	r5, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	00eb      	lsls	r3, r5, #3
 80048f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048f6:	00e2      	lsls	r2, r4, #3
 80048f8:	4614      	mov	r4, r2
 80048fa:	461d      	mov	r5, r3
 80048fc:	4643      	mov	r3, r8
 80048fe:	18e3      	adds	r3, r4, r3
 8004900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004904:	464b      	mov	r3, r9
 8004906:	eb45 0303 	adc.w	r3, r5, r3
 800490a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800491a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800492a:	4629      	mov	r1, r5
 800492c:	008b      	lsls	r3, r1, #2
 800492e:	4621      	mov	r1, r4
 8004930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004934:	4621      	mov	r1, r4
 8004936:	008a      	lsls	r2, r1, #2
 8004938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800493c:	f7fc f986 	bl	8000c4c <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4b60      	ldr	r3, [pc, #384]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004946:	fba3 2302 	umull	r2, r3, r3, r2
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	011c      	lsls	r4, r3, #4
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800495c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	61b9      	str	r1, [r7, #24]
 8004968:	415b      	adcs	r3, r3
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6139      	str	r1, [r7, #16]
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049a4:	464b      	mov	r3, r9
 80049a6:	460a      	mov	r2, r1
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049c8:	4649      	mov	r1, r9
 80049ca:	008b      	lsls	r3, r1, #2
 80049cc:	4641      	mov	r1, r8
 80049ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d2:	4641      	mov	r1, r8
 80049d4:	008a      	lsls	r2, r1, #2
 80049d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049da:	f7fc f937 	bl	8000c4c <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	4b38      	ldr	r3, [pc, #224]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 80049e6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2264      	movs	r2, #100	@ 0x64
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	1acb      	subs	r3, r1, r3
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	3332      	adds	r3, #50	@ 0x32
 80049f8:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a04:	441c      	add	r4, r3
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a24:	4641      	mov	r1, r8
 8004a26:	1851      	adds	r1, r2, r1
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	414b      	adcs	r3, r1
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	00cb      	lsls	r3, r1, #3
 8004a40:	4651      	mov	r1, sl
 8004a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a46:	4651      	mov	r1, sl
 8004a48:	00ca      	lsls	r2, r1, #3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4642      	mov	r2, r8
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a56:	464b      	mov	r3, r9
 8004a58:	460a      	mov	r2, r1
 8004a5a:	eb42 0303 	adc.w	r3, r2, r3
 8004a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a78:	4649      	mov	r1, r9
 8004a7a:	008b      	lsls	r3, r1, #2
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a82:	4641      	mov	r1, r8
 8004a84:	008a      	lsls	r2, r1, #2
 8004a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a8a:	f7fc f8df 	bl	8000c4c <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004a94:	fba3 1302 	umull	r1, r3, r3, r2
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	2164      	movs	r1, #100	@ 0x64
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	3332      	adds	r3, #50	@ 0x32
 8004aa6:	4a08      	ldr	r2, [pc, #32]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	f003 020f 	and.w	r2, r3, #15
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4422      	add	r2, r4
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac8:	51eb851f 	.word	0x51eb851f

08004acc <atof>:
 8004acc:	2100      	movs	r1, #0
 8004ace:	f000 bea7 	b.w	8005820 <strtod>
	...

08004ad4 <std>:
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	b510      	push	{r4, lr}
 8004ad8:	4604      	mov	r4, r0
 8004ada:	e9c0 3300 	strd	r3, r3, [r0]
 8004ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ae2:	6083      	str	r3, [r0, #8]
 8004ae4:	8181      	strh	r1, [r0, #12]
 8004ae6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ae8:	81c2      	strh	r2, [r0, #14]
 8004aea:	6183      	str	r3, [r0, #24]
 8004aec:	4619      	mov	r1, r3
 8004aee:	2208      	movs	r2, #8
 8004af0:	305c      	adds	r0, #92	@ 0x5c
 8004af2:	f000 ff2d 	bl	8005950 <memset>
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <std+0x58>)
 8004af8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <std+0x5c>)
 8004afc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <std+0x60>)
 8004b00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <std+0x64>)
 8004b04:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <std+0x68>)
 8004b08:	6224      	str	r4, [r4, #32]
 8004b0a:	429c      	cmp	r4, r3
 8004b0c:	d006      	beq.n	8004b1c <std+0x48>
 8004b0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b12:	4294      	cmp	r4, r2
 8004b14:	d002      	beq.n	8004b1c <std+0x48>
 8004b16:	33d0      	adds	r3, #208	@ 0xd0
 8004b18:	429c      	cmp	r4, r3
 8004b1a:	d105      	bne.n	8004b28 <std+0x54>
 8004b1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b24:	f000 bf46 	b.w	80059b4 <__retarget_lock_init_recursive>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	bf00      	nop
 8004b2c:	08006ce5 	.word	0x08006ce5
 8004b30:	08006d07 	.word	0x08006d07
 8004b34:	08006d3f 	.word	0x08006d3f
 8004b38:	08006d63 	.word	0x08006d63
 8004b3c:	20000330 	.word	0x20000330

08004b40 <stdio_exit_handler>:
 8004b40:	4a02      	ldr	r2, [pc, #8]	@ (8004b4c <stdio_exit_handler+0xc>)
 8004b42:	4903      	ldr	r1, [pc, #12]	@ (8004b50 <stdio_exit_handler+0x10>)
 8004b44:	4803      	ldr	r0, [pc, #12]	@ (8004b54 <stdio_exit_handler+0x14>)
 8004b46:	f000 be77 	b.w	8005838 <_fwalk_sglue>
 8004b4a:	bf00      	nop
 8004b4c:	20000010 	.word	0x20000010
 8004b50:	08006319 	.word	0x08006319
 8004b54:	2000018c 	.word	0x2000018c

08004b58 <cleanup_stdio>:
 8004b58:	6841      	ldr	r1, [r0, #4]
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <cleanup_stdio+0x34>)
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	b510      	push	{r4, lr}
 8004b60:	4604      	mov	r4, r0
 8004b62:	d001      	beq.n	8004b68 <cleanup_stdio+0x10>
 8004b64:	f001 fbd8 	bl	8006318 <_fflush_r>
 8004b68:	68a1      	ldr	r1, [r4, #8]
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <cleanup_stdio+0x38>)
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	d002      	beq.n	8004b76 <cleanup_stdio+0x1e>
 8004b70:	4620      	mov	r0, r4
 8004b72:	f001 fbd1 	bl	8006318 <_fflush_r>
 8004b76:	68e1      	ldr	r1, [r4, #12]
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <cleanup_stdio+0x3c>)
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d004      	beq.n	8004b88 <cleanup_stdio+0x30>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b84:	f001 bbc8 	b.w	8006318 <_fflush_r>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000330 	.word	0x20000330
 8004b90:	20000398 	.word	0x20000398
 8004b94:	20000400 	.word	0x20000400

08004b98 <global_stdio_init.part.0>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <global_stdio_init.part.0+0x30>)
 8004b9c:	4c0b      	ldr	r4, [pc, #44]	@ (8004bcc <global_stdio_init.part.0+0x34>)
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd0 <global_stdio_init.part.0+0x38>)
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2104      	movs	r1, #4
 8004ba8:	f7ff ff94 	bl	8004ad4 <std>
 8004bac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2109      	movs	r1, #9
 8004bb4:	f7ff ff8e 	bl	8004ad4 <std>
 8004bb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc2:	2112      	movs	r1, #18
 8004bc4:	f7ff bf86 	b.w	8004ad4 <std>
 8004bc8:	20000468 	.word	0x20000468
 8004bcc:	20000330 	.word	0x20000330
 8004bd0:	08004b41 	.word	0x08004b41

08004bd4 <__sfp_lock_acquire>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	@ (8004bdc <__sfp_lock_acquire+0x8>)
 8004bd6:	f000 beee 	b.w	80059b6 <__retarget_lock_acquire_recursive>
 8004bda:	bf00      	nop
 8004bdc:	2000046d 	.word	0x2000046d

08004be0 <__sfp_lock_release>:
 8004be0:	4801      	ldr	r0, [pc, #4]	@ (8004be8 <__sfp_lock_release+0x8>)
 8004be2:	f000 bee9 	b.w	80059b8 <__retarget_lock_release_recursive>
 8004be6:	bf00      	nop
 8004be8:	2000046d 	.word	0x2000046d

08004bec <__sinit>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4604      	mov	r4, r0
 8004bf0:	f7ff fff0 	bl	8004bd4 <__sfp_lock_acquire>
 8004bf4:	6a23      	ldr	r3, [r4, #32]
 8004bf6:	b11b      	cbz	r3, 8004c00 <__sinit+0x14>
 8004bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bfc:	f7ff bff0 	b.w	8004be0 <__sfp_lock_release>
 8004c00:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <__sinit+0x28>)
 8004c02:	6223      	str	r3, [r4, #32]
 8004c04:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <__sinit+0x2c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f5      	bne.n	8004bf8 <__sinit+0xc>
 8004c0c:	f7ff ffc4 	bl	8004b98 <global_stdio_init.part.0>
 8004c10:	e7f2      	b.n	8004bf8 <__sinit+0xc>
 8004c12:	bf00      	nop
 8004c14:	08004b59 	.word	0x08004b59
 8004c18:	20000468 	.word	0x20000468

08004c1c <sulp>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4604      	mov	r4, r0
 8004c20:	460d      	mov	r5, r1
 8004c22:	ec45 4b10 	vmov	d0, r4, r5
 8004c26:	4616      	mov	r6, r2
 8004c28:	f001 ff1e 	bl	8006a68 <__ulp>
 8004c2c:	ec51 0b10 	vmov	r0, r1, d0
 8004c30:	b17e      	cbz	r6, 8004c52 <sulp+0x36>
 8004c32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004c36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dd09      	ble.n	8004c52 <sulp+0x36>
 8004c3e:	051b      	lsls	r3, r3, #20
 8004c40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004c44:	2400      	movs	r4, #0
 8004c46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	f7fb fcf3 	bl	8000638 <__aeabi_dmul>
 8004c52:	ec41 0b10 	vmov	d0, r0, r1
 8004c56:	bd70      	pop	{r4, r5, r6, pc}

08004c58 <_strtod_l>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	b09f      	sub	sp, #124	@ 0x7c
 8004c5e:	460c      	mov	r4, r1
 8004c60:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004c62:	2200      	movs	r2, #0
 8004c64:	921a      	str	r2, [sp, #104]	@ 0x68
 8004c66:	9005      	str	r0, [sp, #20]
 8004c68:	f04f 0a00 	mov.w	sl, #0
 8004c6c:	f04f 0b00 	mov.w	fp, #0
 8004c70:	460a      	mov	r2, r1
 8004c72:	9219      	str	r2, [sp, #100]	@ 0x64
 8004c74:	7811      	ldrb	r1, [r2, #0]
 8004c76:	292b      	cmp	r1, #43	@ 0x2b
 8004c78:	d04a      	beq.n	8004d10 <_strtod_l+0xb8>
 8004c7a:	d838      	bhi.n	8004cee <_strtod_l+0x96>
 8004c7c:	290d      	cmp	r1, #13
 8004c7e:	d832      	bhi.n	8004ce6 <_strtod_l+0x8e>
 8004c80:	2908      	cmp	r1, #8
 8004c82:	d832      	bhi.n	8004cea <_strtod_l+0x92>
 8004c84:	2900      	cmp	r1, #0
 8004c86:	d03b      	beq.n	8004d00 <_strtod_l+0xa8>
 8004c88:	2200      	movs	r2, #0
 8004c8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004c8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004c8e:	782a      	ldrb	r2, [r5, #0]
 8004c90:	2a30      	cmp	r2, #48	@ 0x30
 8004c92:	f040 80b3 	bne.w	8004dfc <_strtod_l+0x1a4>
 8004c96:	786a      	ldrb	r2, [r5, #1]
 8004c98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004c9c:	2a58      	cmp	r2, #88	@ 0x58
 8004c9e:	d16e      	bne.n	8004d7e <_strtod_l+0x126>
 8004ca0:	9302      	str	r3, [sp, #8]
 8004ca2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	ab1a      	add	r3, sp, #104	@ 0x68
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	4a8e      	ldr	r2, [pc, #568]	@ (8004ee4 <_strtod_l+0x28c>)
 8004cac:	9805      	ldr	r0, [sp, #20]
 8004cae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004cb0:	a919      	add	r1, sp, #100	@ 0x64
 8004cb2:	f000 ff1f 	bl	8005af4 <__gethex>
 8004cb6:	f010 060f 	ands.w	r6, r0, #15
 8004cba:	4604      	mov	r4, r0
 8004cbc:	d005      	beq.n	8004cca <_strtod_l+0x72>
 8004cbe:	2e06      	cmp	r6, #6
 8004cc0:	d128      	bne.n	8004d14 <_strtod_l+0xbc>
 8004cc2:	3501      	adds	r5, #1
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9519      	str	r5, [sp, #100]	@ 0x64
 8004cc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 858e 	bne.w	80057ee <_strtod_l+0xb96>
 8004cd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cd4:	b1cb      	cbz	r3, 8004d0a <_strtod_l+0xb2>
 8004cd6:	4652      	mov	r2, sl
 8004cd8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004cdc:	ec43 2b10 	vmov	d0, r2, r3
 8004ce0:	b01f      	add	sp, #124	@ 0x7c
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce6:	2920      	cmp	r1, #32
 8004ce8:	d1ce      	bne.n	8004c88 <_strtod_l+0x30>
 8004cea:	3201      	adds	r2, #1
 8004cec:	e7c1      	b.n	8004c72 <_strtod_l+0x1a>
 8004cee:	292d      	cmp	r1, #45	@ 0x2d
 8004cf0:	d1ca      	bne.n	8004c88 <_strtod_l+0x30>
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004cf6:	1c51      	adds	r1, r2, #1
 8004cf8:	9119      	str	r1, [sp, #100]	@ 0x64
 8004cfa:	7852      	ldrb	r2, [r2, #1]
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	d1c5      	bne.n	8004c8c <_strtod_l+0x34>
 8004d00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004d02:	9419      	str	r4, [sp, #100]	@ 0x64
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f040 8570 	bne.w	80057ea <_strtod_l+0xb92>
 8004d0a:	4652      	mov	r2, sl
 8004d0c:	465b      	mov	r3, fp
 8004d0e:	e7e5      	b.n	8004cdc <_strtod_l+0x84>
 8004d10:	2100      	movs	r1, #0
 8004d12:	e7ef      	b.n	8004cf4 <_strtod_l+0x9c>
 8004d14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004d16:	b13a      	cbz	r2, 8004d28 <_strtod_l+0xd0>
 8004d18:	2135      	movs	r1, #53	@ 0x35
 8004d1a:	a81c      	add	r0, sp, #112	@ 0x70
 8004d1c:	f001 ff9e 	bl	8006c5c <__copybits>
 8004d20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d22:	9805      	ldr	r0, [sp, #20]
 8004d24:	f001 fb6c 	bl	8006400 <_Bfree>
 8004d28:	3e01      	subs	r6, #1
 8004d2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004d2c:	2e04      	cmp	r6, #4
 8004d2e:	d806      	bhi.n	8004d3e <_strtod_l+0xe6>
 8004d30:	e8df f006 	tbb	[pc, r6]
 8004d34:	201d0314 	.word	0x201d0314
 8004d38:	14          	.byte	0x14
 8004d39:	00          	.byte	0x00
 8004d3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004d3e:	05e1      	lsls	r1, r4, #23
 8004d40:	bf48      	it	mi
 8004d42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004d46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004d4a:	0d1b      	lsrs	r3, r3, #20
 8004d4c:	051b      	lsls	r3, r3, #20
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1bb      	bne.n	8004cca <_strtod_l+0x72>
 8004d52:	f000 fe05 	bl	8005960 <__errno>
 8004d56:	2322      	movs	r3, #34	@ 0x22
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	e7b6      	b.n	8004cca <_strtod_l+0x72>
 8004d5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004d60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004d64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d6c:	e7e7      	b.n	8004d3e <_strtod_l+0xe6>
 8004d6e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004eec <_strtod_l+0x294>
 8004d72:	e7e4      	b.n	8004d3e <_strtod_l+0xe6>
 8004d74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004d78:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004d7c:	e7df      	b.n	8004d3e <_strtod_l+0xe6>
 8004d7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	2b30      	cmp	r3, #48	@ 0x30
 8004d88:	d0f9      	beq.n	8004d7e <_strtod_l+0x126>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d09d      	beq.n	8004cca <_strtod_l+0x72>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d94:	930c      	str	r3, [sp, #48]	@ 0x30
 8004d96:	2300      	movs	r3, #0
 8004d98:	9308      	str	r3, [sp, #32]
 8004d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d9c:	461f      	mov	r7, r3
 8004d9e:	220a      	movs	r2, #10
 8004da0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004da2:	7805      	ldrb	r5, [r0, #0]
 8004da4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004da8:	b2d9      	uxtb	r1, r3
 8004daa:	2909      	cmp	r1, #9
 8004dac:	d928      	bls.n	8004e00 <_strtod_l+0x1a8>
 8004dae:	494e      	ldr	r1, [pc, #312]	@ (8004ee8 <_strtod_l+0x290>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	f000 fd5f 	bl	8005874 <strncmp>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d032      	beq.n	8004e20 <_strtod_l+0x1c8>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	462a      	mov	r2, r5
 8004dbe:	4681      	mov	r9, r0
 8004dc0:	463d      	mov	r5, r7
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2a65      	cmp	r2, #101	@ 0x65
 8004dc6:	d001      	beq.n	8004dcc <_strtod_l+0x174>
 8004dc8:	2a45      	cmp	r2, #69	@ 0x45
 8004dca:	d114      	bne.n	8004df6 <_strtod_l+0x19e>
 8004dcc:	b91d      	cbnz	r5, 8004dd6 <_strtod_l+0x17e>
 8004dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dd0:	4302      	orrs	r2, r0
 8004dd2:	d095      	beq.n	8004d00 <_strtod_l+0xa8>
 8004dd4:	2500      	movs	r5, #0
 8004dd6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004dd8:	1c62      	adds	r2, r4, #1
 8004dda:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ddc:	7862      	ldrb	r2, [r4, #1]
 8004dde:	2a2b      	cmp	r2, #43	@ 0x2b
 8004de0:	d077      	beq.n	8004ed2 <_strtod_l+0x27a>
 8004de2:	2a2d      	cmp	r2, #45	@ 0x2d
 8004de4:	d07b      	beq.n	8004ede <_strtod_l+0x286>
 8004de6:	f04f 0c00 	mov.w	ip, #0
 8004dea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004dee:	2909      	cmp	r1, #9
 8004df0:	f240 8082 	bls.w	8004ef8 <_strtod_l+0x2a0>
 8004df4:	9419      	str	r4, [sp, #100]	@ 0x64
 8004df6:	f04f 0800 	mov.w	r8, #0
 8004dfa:	e0a2      	b.n	8004f42 <_strtod_l+0x2ea>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e7c7      	b.n	8004d90 <_strtod_l+0x138>
 8004e00:	2f08      	cmp	r7, #8
 8004e02:	bfd5      	itete	le
 8004e04:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004e06:	9908      	ldrgt	r1, [sp, #32]
 8004e08:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e0c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004e10:	f100 0001 	add.w	r0, r0, #1
 8004e14:	bfd4      	ite	le
 8004e16:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004e18:	9308      	strgt	r3, [sp, #32]
 8004e1a:	3701      	adds	r7, #1
 8004e1c:	9019      	str	r0, [sp, #100]	@ 0x64
 8004e1e:	e7bf      	b.n	8004da0 <_strtod_l+0x148>
 8004e20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e26:	785a      	ldrb	r2, [r3, #1]
 8004e28:	b37f      	cbz	r7, 8004e8a <_strtod_l+0x232>
 8004e2a:	4681      	mov	r9, r0
 8004e2c:	463d      	mov	r5, r7
 8004e2e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004e32:	2b09      	cmp	r3, #9
 8004e34:	d912      	bls.n	8004e5c <_strtod_l+0x204>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e7c4      	b.n	8004dc4 <_strtod_l+0x16c>
 8004e3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e40:	785a      	ldrb	r2, [r3, #1]
 8004e42:	3001      	adds	r0, #1
 8004e44:	2a30      	cmp	r2, #48	@ 0x30
 8004e46:	d0f8      	beq.n	8004e3a <_strtod_l+0x1e2>
 8004e48:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	f200 84d3 	bhi.w	80057f8 <_strtod_l+0xba0>
 8004e52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e54:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e56:	4681      	mov	r9, r0
 8004e58:	2000      	movs	r0, #0
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	3a30      	subs	r2, #48	@ 0x30
 8004e5e:	f100 0301 	add.w	r3, r0, #1
 8004e62:	d02a      	beq.n	8004eba <_strtod_l+0x262>
 8004e64:	4499      	add	r9, r3
 8004e66:	eb00 0c05 	add.w	ip, r0, r5
 8004e6a:	462b      	mov	r3, r5
 8004e6c:	210a      	movs	r1, #10
 8004e6e:	4563      	cmp	r3, ip
 8004e70:	d10d      	bne.n	8004e8e <_strtod_l+0x236>
 8004e72:	1c69      	adds	r1, r5, #1
 8004e74:	4401      	add	r1, r0
 8004e76:	4428      	add	r0, r5
 8004e78:	2808      	cmp	r0, #8
 8004e7a:	dc16      	bgt.n	8004eaa <_strtod_l+0x252>
 8004e7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004e7e:	230a      	movs	r3, #10
 8004e80:	fb03 2300 	mla	r3, r3, r0, r2
 8004e84:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e86:	2300      	movs	r3, #0
 8004e88:	e018      	b.n	8004ebc <_strtod_l+0x264>
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	e7da      	b.n	8004e44 <_strtod_l+0x1ec>
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	f103 0301 	add.w	r3, r3, #1
 8004e94:	dc03      	bgt.n	8004e9e <_strtod_l+0x246>
 8004e96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004e98:	434e      	muls	r6, r1
 8004e9a:	960a      	str	r6, [sp, #40]	@ 0x28
 8004e9c:	e7e7      	b.n	8004e6e <_strtod_l+0x216>
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	bfde      	ittt	le
 8004ea2:	9e08      	ldrle	r6, [sp, #32]
 8004ea4:	434e      	mulle	r6, r1
 8004ea6:	9608      	strle	r6, [sp, #32]
 8004ea8:	e7e1      	b.n	8004e6e <_strtod_l+0x216>
 8004eaa:	280f      	cmp	r0, #15
 8004eac:	dceb      	bgt.n	8004e86 <_strtod_l+0x22e>
 8004eae:	9808      	ldr	r0, [sp, #32]
 8004eb0:	230a      	movs	r3, #10
 8004eb2:	fb03 2300 	mla	r3, r3, r0, r2
 8004eb6:	9308      	str	r3, [sp, #32]
 8004eb8:	e7e5      	b.n	8004e86 <_strtod_l+0x22e>
 8004eba:	4629      	mov	r1, r5
 8004ebc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004ebe:	1c50      	adds	r0, r2, #1
 8004ec0:	9019      	str	r0, [sp, #100]	@ 0x64
 8004ec2:	7852      	ldrb	r2, [r2, #1]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	460d      	mov	r5, r1
 8004ec8:	e7b1      	b.n	8004e2e <_strtod_l+0x1d6>
 8004eca:	f04f 0900 	mov.w	r9, #0
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e77d      	b.n	8004dce <_strtod_l+0x176>
 8004ed2:	f04f 0c00 	mov.w	ip, #0
 8004ed6:	1ca2      	adds	r2, r4, #2
 8004ed8:	9219      	str	r2, [sp, #100]	@ 0x64
 8004eda:	78a2      	ldrb	r2, [r4, #2]
 8004edc:	e785      	b.n	8004dea <_strtod_l+0x192>
 8004ede:	f04f 0c01 	mov.w	ip, #1
 8004ee2:	e7f8      	b.n	8004ed6 <_strtod_l+0x27e>
 8004ee4:	080078e4 	.word	0x080078e4
 8004ee8:	080078c0 	.word	0x080078c0
 8004eec:	7ff00000 	.word	0x7ff00000
 8004ef0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004ef2:	1c51      	adds	r1, r2, #1
 8004ef4:	9119      	str	r1, [sp, #100]	@ 0x64
 8004ef6:	7852      	ldrb	r2, [r2, #1]
 8004ef8:	2a30      	cmp	r2, #48	@ 0x30
 8004efa:	d0f9      	beq.n	8004ef0 <_strtod_l+0x298>
 8004efc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004f00:	2908      	cmp	r1, #8
 8004f02:	f63f af78 	bhi.w	8004df6 <_strtod_l+0x19e>
 8004f06:	3a30      	subs	r2, #48	@ 0x30
 8004f08:	920e      	str	r2, [sp, #56]	@ 0x38
 8004f0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004f0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004f0e:	f04f 080a 	mov.w	r8, #10
 8004f12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004f14:	1c56      	adds	r6, r2, #1
 8004f16:	9619      	str	r6, [sp, #100]	@ 0x64
 8004f18:	7852      	ldrb	r2, [r2, #1]
 8004f1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004f1e:	f1be 0f09 	cmp.w	lr, #9
 8004f22:	d939      	bls.n	8004f98 <_strtod_l+0x340>
 8004f24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f26:	1a76      	subs	r6, r6, r1
 8004f28:	2e08      	cmp	r6, #8
 8004f2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004f2e:	dc03      	bgt.n	8004f38 <_strtod_l+0x2e0>
 8004f30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004f32:	4588      	cmp	r8, r1
 8004f34:	bfa8      	it	ge
 8004f36:	4688      	movge	r8, r1
 8004f38:	f1bc 0f00 	cmp.w	ip, #0
 8004f3c:	d001      	beq.n	8004f42 <_strtod_l+0x2ea>
 8004f3e:	f1c8 0800 	rsb	r8, r8, #0
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	d14e      	bne.n	8004fe4 <_strtod_l+0x38c>
 8004f46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f48:	4308      	orrs	r0, r1
 8004f4a:	f47f aebe 	bne.w	8004cca <_strtod_l+0x72>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f47f aed6 	bne.w	8004d00 <_strtod_l+0xa8>
 8004f54:	2a69      	cmp	r2, #105	@ 0x69
 8004f56:	d028      	beq.n	8004faa <_strtod_l+0x352>
 8004f58:	dc25      	bgt.n	8004fa6 <_strtod_l+0x34e>
 8004f5a:	2a49      	cmp	r2, #73	@ 0x49
 8004f5c:	d025      	beq.n	8004faa <_strtod_l+0x352>
 8004f5e:	2a4e      	cmp	r2, #78	@ 0x4e
 8004f60:	f47f aece 	bne.w	8004d00 <_strtod_l+0xa8>
 8004f64:	499b      	ldr	r1, [pc, #620]	@ (80051d4 <_strtod_l+0x57c>)
 8004f66:	a819      	add	r0, sp, #100	@ 0x64
 8004f68:	f000 ffe6 	bl	8005f38 <__match>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f43f aec7 	beq.w	8004d00 <_strtod_l+0xa8>
 8004f72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b28      	cmp	r3, #40	@ 0x28
 8004f78:	d12e      	bne.n	8004fd8 <_strtod_l+0x380>
 8004f7a:	4997      	ldr	r1, [pc, #604]	@ (80051d8 <_strtod_l+0x580>)
 8004f7c:	aa1c      	add	r2, sp, #112	@ 0x70
 8004f7e:	a819      	add	r0, sp, #100	@ 0x64
 8004f80:	f000 ffee 	bl	8005f60 <__hexnan>
 8004f84:	2805      	cmp	r0, #5
 8004f86:	d127      	bne.n	8004fd8 <_strtod_l+0x380>
 8004f88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004f8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004f8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004f92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004f96:	e698      	b.n	8004cca <_strtod_l+0x72>
 8004f98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004f9a:	fb08 2101 	mla	r1, r8, r1, r2
 8004f9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004fa2:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fa4:	e7b5      	b.n	8004f12 <_strtod_l+0x2ba>
 8004fa6:	2a6e      	cmp	r2, #110	@ 0x6e
 8004fa8:	e7da      	b.n	8004f60 <_strtod_l+0x308>
 8004faa:	498c      	ldr	r1, [pc, #560]	@ (80051dc <_strtod_l+0x584>)
 8004fac:	a819      	add	r0, sp, #100	@ 0x64
 8004fae:	f000 ffc3 	bl	8005f38 <__match>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f43f aea4 	beq.w	8004d00 <_strtod_l+0xa8>
 8004fb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fba:	4989      	ldr	r1, [pc, #548]	@ (80051e0 <_strtod_l+0x588>)
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	a819      	add	r0, sp, #100	@ 0x64
 8004fc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8004fc2:	f000 ffb9 	bl	8005f38 <__match>
 8004fc6:	b910      	cbnz	r0, 8004fce <_strtod_l+0x376>
 8004fc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fca:	3301      	adds	r3, #1
 8004fcc:	9319      	str	r3, [sp, #100]	@ 0x64
 8004fce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80051f0 <_strtod_l+0x598>
 8004fd2:	f04f 0a00 	mov.w	sl, #0
 8004fd6:	e678      	b.n	8004cca <_strtod_l+0x72>
 8004fd8:	4882      	ldr	r0, [pc, #520]	@ (80051e4 <_strtod_l+0x58c>)
 8004fda:	f000 fcfd 	bl	80059d8 <nan>
 8004fde:	ec5b ab10 	vmov	sl, fp, d0
 8004fe2:	e672      	b.n	8004cca <_strtod_l+0x72>
 8004fe4:	eba8 0309 	sub.w	r3, r8, r9
 8004fe8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fec:	2f00      	cmp	r7, #0
 8004fee:	bf08      	it	eq
 8004ff0:	462f      	moveq	r7, r5
 8004ff2:	2d10      	cmp	r5, #16
 8004ff4:	462c      	mov	r4, r5
 8004ff6:	bfa8      	it	ge
 8004ff8:	2410      	movge	r4, #16
 8004ffa:	f7fb faa3 	bl	8000544 <__aeabi_ui2d>
 8004ffe:	2d09      	cmp	r5, #9
 8005000:	4682      	mov	sl, r0
 8005002:	468b      	mov	fp, r1
 8005004:	dc13      	bgt.n	800502e <_strtod_l+0x3d6>
 8005006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	f43f ae5e 	beq.w	8004cca <_strtod_l+0x72>
 800500e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005010:	dd78      	ble.n	8005104 <_strtod_l+0x4ac>
 8005012:	2b16      	cmp	r3, #22
 8005014:	dc5f      	bgt.n	80050d6 <_strtod_l+0x47e>
 8005016:	4974      	ldr	r1, [pc, #464]	@ (80051e8 <_strtod_l+0x590>)
 8005018:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800501c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005020:	4652      	mov	r2, sl
 8005022:	465b      	mov	r3, fp
 8005024:	f7fb fb08 	bl	8000638 <__aeabi_dmul>
 8005028:	4682      	mov	sl, r0
 800502a:	468b      	mov	fp, r1
 800502c:	e64d      	b.n	8004cca <_strtod_l+0x72>
 800502e:	4b6e      	ldr	r3, [pc, #440]	@ (80051e8 <_strtod_l+0x590>)
 8005030:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005034:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005038:	f7fb fafe 	bl	8000638 <__aeabi_dmul>
 800503c:	4682      	mov	sl, r0
 800503e:	9808      	ldr	r0, [sp, #32]
 8005040:	468b      	mov	fp, r1
 8005042:	f7fb fa7f 	bl	8000544 <__aeabi_ui2d>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4650      	mov	r0, sl
 800504c:	4659      	mov	r1, fp
 800504e:	f7fb f93d 	bl	80002cc <__adddf3>
 8005052:	2d0f      	cmp	r5, #15
 8005054:	4682      	mov	sl, r0
 8005056:	468b      	mov	fp, r1
 8005058:	ddd5      	ble.n	8005006 <_strtod_l+0x3ae>
 800505a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800505c:	1b2c      	subs	r4, r5, r4
 800505e:	441c      	add	r4, r3
 8005060:	2c00      	cmp	r4, #0
 8005062:	f340 8096 	ble.w	8005192 <_strtod_l+0x53a>
 8005066:	f014 030f 	ands.w	r3, r4, #15
 800506a:	d00a      	beq.n	8005082 <_strtod_l+0x42a>
 800506c:	495e      	ldr	r1, [pc, #376]	@ (80051e8 <_strtod_l+0x590>)
 800506e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005072:	4652      	mov	r2, sl
 8005074:	465b      	mov	r3, fp
 8005076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800507a:	f7fb fadd 	bl	8000638 <__aeabi_dmul>
 800507e:	4682      	mov	sl, r0
 8005080:	468b      	mov	fp, r1
 8005082:	f034 040f 	bics.w	r4, r4, #15
 8005086:	d073      	beq.n	8005170 <_strtod_l+0x518>
 8005088:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800508c:	dd48      	ble.n	8005120 <_strtod_l+0x4c8>
 800508e:	2400      	movs	r4, #0
 8005090:	46a0      	mov	r8, r4
 8005092:	940a      	str	r4, [sp, #40]	@ 0x28
 8005094:	46a1      	mov	r9, r4
 8005096:	9a05      	ldr	r2, [sp, #20]
 8005098:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80051f0 <_strtod_l+0x598>
 800509c:	2322      	movs	r3, #34	@ 0x22
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	f04f 0a00 	mov.w	sl, #0
 80050a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f43f ae0f 	beq.w	8004cca <_strtod_l+0x72>
 80050ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80050ae:	9805      	ldr	r0, [sp, #20]
 80050b0:	f001 f9a6 	bl	8006400 <_Bfree>
 80050b4:	9805      	ldr	r0, [sp, #20]
 80050b6:	4649      	mov	r1, r9
 80050b8:	f001 f9a2 	bl	8006400 <_Bfree>
 80050bc:	9805      	ldr	r0, [sp, #20]
 80050be:	4641      	mov	r1, r8
 80050c0:	f001 f99e 	bl	8006400 <_Bfree>
 80050c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050c6:	9805      	ldr	r0, [sp, #20]
 80050c8:	f001 f99a 	bl	8006400 <_Bfree>
 80050cc:	9805      	ldr	r0, [sp, #20]
 80050ce:	4621      	mov	r1, r4
 80050d0:	f001 f996 	bl	8006400 <_Bfree>
 80050d4:	e5f9      	b.n	8004cca <_strtod_l+0x72>
 80050d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80050dc:	4293      	cmp	r3, r2
 80050de:	dbbc      	blt.n	800505a <_strtod_l+0x402>
 80050e0:	4c41      	ldr	r4, [pc, #260]	@ (80051e8 <_strtod_l+0x590>)
 80050e2:	f1c5 050f 	rsb	r5, r5, #15
 80050e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80050ea:	4652      	mov	r2, sl
 80050ec:	465b      	mov	r3, fp
 80050ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f2:	f7fb faa1 	bl	8000638 <__aeabi_dmul>
 80050f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050f8:	1b5d      	subs	r5, r3, r5
 80050fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80050fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005102:	e78f      	b.n	8005024 <_strtod_l+0x3cc>
 8005104:	3316      	adds	r3, #22
 8005106:	dba8      	blt.n	800505a <_strtod_l+0x402>
 8005108:	4b37      	ldr	r3, [pc, #220]	@ (80051e8 <_strtod_l+0x590>)
 800510a:	eba9 0808 	sub.w	r8, r9, r8
 800510e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005112:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005116:	4650      	mov	r0, sl
 8005118:	4659      	mov	r1, fp
 800511a:	f7fb fbb7 	bl	800088c <__aeabi_ddiv>
 800511e:	e783      	b.n	8005028 <_strtod_l+0x3d0>
 8005120:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <_strtod_l+0x594>)
 8005122:	9308      	str	r3, [sp, #32]
 8005124:	2300      	movs	r3, #0
 8005126:	1124      	asrs	r4, r4, #4
 8005128:	4650      	mov	r0, sl
 800512a:	4659      	mov	r1, fp
 800512c:	461e      	mov	r6, r3
 800512e:	2c01      	cmp	r4, #1
 8005130:	dc21      	bgt.n	8005176 <_strtod_l+0x51e>
 8005132:	b10b      	cbz	r3, 8005138 <_strtod_l+0x4e0>
 8005134:	4682      	mov	sl, r0
 8005136:	468b      	mov	fp, r1
 8005138:	492c      	ldr	r1, [pc, #176]	@ (80051ec <_strtod_l+0x594>)
 800513a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800513e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005142:	4652      	mov	r2, sl
 8005144:	465b      	mov	r3, fp
 8005146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800514a:	f7fb fa75 	bl	8000638 <__aeabi_dmul>
 800514e:	4b28      	ldr	r3, [pc, #160]	@ (80051f0 <_strtod_l+0x598>)
 8005150:	460a      	mov	r2, r1
 8005152:	400b      	ands	r3, r1
 8005154:	4927      	ldr	r1, [pc, #156]	@ (80051f4 <_strtod_l+0x59c>)
 8005156:	428b      	cmp	r3, r1
 8005158:	4682      	mov	sl, r0
 800515a:	d898      	bhi.n	800508e <_strtod_l+0x436>
 800515c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005160:	428b      	cmp	r3, r1
 8005162:	bf86      	itte	hi
 8005164:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80051f8 <_strtod_l+0x5a0>
 8005168:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800516c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005170:	2300      	movs	r3, #0
 8005172:	9308      	str	r3, [sp, #32]
 8005174:	e07a      	b.n	800526c <_strtod_l+0x614>
 8005176:	07e2      	lsls	r2, r4, #31
 8005178:	d505      	bpl.n	8005186 <_strtod_l+0x52e>
 800517a:	9b08      	ldr	r3, [sp, #32]
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f7fb fa5a 	bl	8000638 <__aeabi_dmul>
 8005184:	2301      	movs	r3, #1
 8005186:	9a08      	ldr	r2, [sp, #32]
 8005188:	3208      	adds	r2, #8
 800518a:	3601      	adds	r6, #1
 800518c:	1064      	asrs	r4, r4, #1
 800518e:	9208      	str	r2, [sp, #32]
 8005190:	e7cd      	b.n	800512e <_strtod_l+0x4d6>
 8005192:	d0ed      	beq.n	8005170 <_strtod_l+0x518>
 8005194:	4264      	negs	r4, r4
 8005196:	f014 020f 	ands.w	r2, r4, #15
 800519a:	d00a      	beq.n	80051b2 <_strtod_l+0x55a>
 800519c:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <_strtod_l+0x590>)
 800519e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a2:	4650      	mov	r0, sl
 80051a4:	4659      	mov	r1, fp
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb fb6f 	bl	800088c <__aeabi_ddiv>
 80051ae:	4682      	mov	sl, r0
 80051b0:	468b      	mov	fp, r1
 80051b2:	1124      	asrs	r4, r4, #4
 80051b4:	d0dc      	beq.n	8005170 <_strtod_l+0x518>
 80051b6:	2c1f      	cmp	r4, #31
 80051b8:	dd20      	ble.n	80051fc <_strtod_l+0x5a4>
 80051ba:	2400      	movs	r4, #0
 80051bc:	46a0      	mov	r8, r4
 80051be:	940a      	str	r4, [sp, #40]	@ 0x28
 80051c0:	46a1      	mov	r9, r4
 80051c2:	9a05      	ldr	r2, [sp, #20]
 80051c4:	2322      	movs	r3, #34	@ 0x22
 80051c6:	f04f 0a00 	mov.w	sl, #0
 80051ca:	f04f 0b00 	mov.w	fp, #0
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e768      	b.n	80050a4 <_strtod_l+0x44c>
 80051d2:	bf00      	nop
 80051d4:	080078cb 	.word	0x080078cb
 80051d8:	080078d0 	.word	0x080078d0
 80051dc:	080078c2 	.word	0x080078c2
 80051e0:	080078c5 	.word	0x080078c5
 80051e4:	08007ad5 	.word	0x08007ad5
 80051e8:	08007bd8 	.word	0x08007bd8
 80051ec:	08007bb0 	.word	0x08007bb0
 80051f0:	7ff00000 	.word	0x7ff00000
 80051f4:	7ca00000 	.word	0x7ca00000
 80051f8:	7fefffff 	.word	0x7fefffff
 80051fc:	f014 0310 	ands.w	r3, r4, #16
 8005200:	bf18      	it	ne
 8005202:	236a      	movne	r3, #106	@ 0x6a
 8005204:	4ea9      	ldr	r6, [pc, #676]	@ (80054ac <_strtod_l+0x854>)
 8005206:	9308      	str	r3, [sp, #32]
 8005208:	4650      	mov	r0, sl
 800520a:	4659      	mov	r1, fp
 800520c:	2300      	movs	r3, #0
 800520e:	07e2      	lsls	r2, r4, #31
 8005210:	d504      	bpl.n	800521c <_strtod_l+0x5c4>
 8005212:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005216:	f7fb fa0f 	bl	8000638 <__aeabi_dmul>
 800521a:	2301      	movs	r3, #1
 800521c:	1064      	asrs	r4, r4, #1
 800521e:	f106 0608 	add.w	r6, r6, #8
 8005222:	d1f4      	bne.n	800520e <_strtod_l+0x5b6>
 8005224:	b10b      	cbz	r3, 800522a <_strtod_l+0x5d2>
 8005226:	4682      	mov	sl, r0
 8005228:	468b      	mov	fp, r1
 800522a:	9b08      	ldr	r3, [sp, #32]
 800522c:	b1b3      	cbz	r3, 800525c <_strtod_l+0x604>
 800522e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005232:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005236:	2b00      	cmp	r3, #0
 8005238:	4659      	mov	r1, fp
 800523a:	dd0f      	ble.n	800525c <_strtod_l+0x604>
 800523c:	2b1f      	cmp	r3, #31
 800523e:	dd55      	ble.n	80052ec <_strtod_l+0x694>
 8005240:	2b34      	cmp	r3, #52	@ 0x34
 8005242:	bfde      	ittt	le
 8005244:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005248:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800524c:	4093      	lslle	r3, r2
 800524e:	f04f 0a00 	mov.w	sl, #0
 8005252:	bfcc      	ite	gt
 8005254:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005258:	ea03 0b01 	andle.w	fp, r3, r1
 800525c:	2200      	movs	r2, #0
 800525e:	2300      	movs	r3, #0
 8005260:	4650      	mov	r0, sl
 8005262:	4659      	mov	r1, fp
 8005264:	f7fb fc50 	bl	8000b08 <__aeabi_dcmpeq>
 8005268:	2800      	cmp	r0, #0
 800526a:	d1a6      	bne.n	80051ba <_strtod_l+0x562>
 800526c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005272:	9805      	ldr	r0, [sp, #20]
 8005274:	462b      	mov	r3, r5
 8005276:	463a      	mov	r2, r7
 8005278:	f001 f92a 	bl	80064d0 <__s2b>
 800527c:	900a      	str	r0, [sp, #40]	@ 0x28
 800527e:	2800      	cmp	r0, #0
 8005280:	f43f af05 	beq.w	800508e <_strtod_l+0x436>
 8005284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005286:	2a00      	cmp	r2, #0
 8005288:	eba9 0308 	sub.w	r3, r9, r8
 800528c:	bfa8      	it	ge
 800528e:	2300      	movge	r3, #0
 8005290:	9312      	str	r3, [sp, #72]	@ 0x48
 8005292:	2400      	movs	r4, #0
 8005294:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005298:	9316      	str	r3, [sp, #88]	@ 0x58
 800529a:	46a0      	mov	r8, r4
 800529c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800529e:	9805      	ldr	r0, [sp, #20]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	f001 f86d 	bl	8006380 <_Balloc>
 80052a6:	4681      	mov	r9, r0
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f43f aef4 	beq.w	8005096 <_strtod_l+0x43e>
 80052ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	3202      	adds	r2, #2
 80052b4:	f103 010c 	add.w	r1, r3, #12
 80052b8:	0092      	lsls	r2, r2, #2
 80052ba:	300c      	adds	r0, #12
 80052bc:	f000 fb7d 	bl	80059ba <memcpy>
 80052c0:	ec4b ab10 	vmov	d0, sl, fp
 80052c4:	9805      	ldr	r0, [sp, #20]
 80052c6:	aa1c      	add	r2, sp, #112	@ 0x70
 80052c8:	a91b      	add	r1, sp, #108	@ 0x6c
 80052ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80052ce:	f001 fc3b 	bl	8006b48 <__d2b>
 80052d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80052d4:	2800      	cmp	r0, #0
 80052d6:	f43f aede 	beq.w	8005096 <_strtod_l+0x43e>
 80052da:	9805      	ldr	r0, [sp, #20]
 80052dc:	2101      	movs	r1, #1
 80052de:	f001 f98d 	bl	80065fc <__i2b>
 80052e2:	4680      	mov	r8, r0
 80052e4:	b948      	cbnz	r0, 80052fa <_strtod_l+0x6a2>
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	e6d4      	b.n	8005096 <_strtod_l+0x43e>
 80052ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	ea03 0a0a 	and.w	sl, r3, sl
 80052f8:	e7b0      	b.n	800525c <_strtod_l+0x604>
 80052fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80052fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80052fe:	2d00      	cmp	r5, #0
 8005300:	bfab      	itete	ge
 8005302:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005304:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005306:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005308:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800530a:	bfac      	ite	ge
 800530c:	18ef      	addge	r7, r5, r3
 800530e:	1b5e      	sublt	r6, r3, r5
 8005310:	9b08      	ldr	r3, [sp, #32]
 8005312:	1aed      	subs	r5, r5, r3
 8005314:	4415      	add	r5, r2
 8005316:	4b66      	ldr	r3, [pc, #408]	@ (80054b0 <_strtod_l+0x858>)
 8005318:	3d01      	subs	r5, #1
 800531a:	429d      	cmp	r5, r3
 800531c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005320:	da50      	bge.n	80053c4 <_strtod_l+0x76c>
 8005322:	1b5b      	subs	r3, r3, r5
 8005324:	2b1f      	cmp	r3, #31
 8005326:	eba2 0203 	sub.w	r2, r2, r3
 800532a:	f04f 0101 	mov.w	r1, #1
 800532e:	dc3d      	bgt.n	80053ac <_strtod_l+0x754>
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005336:	2300      	movs	r3, #0
 8005338:	9310      	str	r3, [sp, #64]	@ 0x40
 800533a:	18bd      	adds	r5, r7, r2
 800533c:	9b08      	ldr	r3, [sp, #32]
 800533e:	42af      	cmp	r7, r5
 8005340:	4416      	add	r6, r2
 8005342:	441e      	add	r6, r3
 8005344:	463b      	mov	r3, r7
 8005346:	bfa8      	it	ge
 8005348:	462b      	movge	r3, r5
 800534a:	42b3      	cmp	r3, r6
 800534c:	bfa8      	it	ge
 800534e:	4633      	movge	r3, r6
 8005350:	2b00      	cmp	r3, #0
 8005352:	bfc2      	ittt	gt
 8005354:	1aed      	subgt	r5, r5, r3
 8005356:	1af6      	subgt	r6, r6, r3
 8005358:	1aff      	subgt	r7, r7, r3
 800535a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800535c:	2b00      	cmp	r3, #0
 800535e:	dd16      	ble.n	800538e <_strtod_l+0x736>
 8005360:	4641      	mov	r1, r8
 8005362:	9805      	ldr	r0, [sp, #20]
 8005364:	461a      	mov	r2, r3
 8005366:	f001 fa09 	bl	800677c <__pow5mult>
 800536a:	4680      	mov	r8, r0
 800536c:	2800      	cmp	r0, #0
 800536e:	d0ba      	beq.n	80052e6 <_strtod_l+0x68e>
 8005370:	4601      	mov	r1, r0
 8005372:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005374:	9805      	ldr	r0, [sp, #20]
 8005376:	f001 f957 	bl	8006628 <__multiply>
 800537a:	900e      	str	r0, [sp, #56]	@ 0x38
 800537c:	2800      	cmp	r0, #0
 800537e:	f43f ae8a 	beq.w	8005096 <_strtod_l+0x43e>
 8005382:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005384:	9805      	ldr	r0, [sp, #20]
 8005386:	f001 f83b 	bl	8006400 <_Bfree>
 800538a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800538c:	931a      	str	r3, [sp, #104]	@ 0x68
 800538e:	2d00      	cmp	r5, #0
 8005390:	dc1d      	bgt.n	80053ce <_strtod_l+0x776>
 8005392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	dd23      	ble.n	80053e0 <_strtod_l+0x788>
 8005398:	4649      	mov	r1, r9
 800539a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800539c:	9805      	ldr	r0, [sp, #20]
 800539e:	f001 f9ed 	bl	800677c <__pow5mult>
 80053a2:	4681      	mov	r9, r0
 80053a4:	b9e0      	cbnz	r0, 80053e0 <_strtod_l+0x788>
 80053a6:	f04f 0900 	mov.w	r9, #0
 80053aa:	e674      	b.n	8005096 <_strtod_l+0x43e>
 80053ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80053b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80053b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80053b8:	35e2      	adds	r5, #226	@ 0xe2
 80053ba:	fa01 f305 	lsl.w	r3, r1, r5
 80053be:	9310      	str	r3, [sp, #64]	@ 0x40
 80053c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80053c2:	e7ba      	b.n	800533a <_strtod_l+0x6e2>
 80053c4:	2300      	movs	r3, #0
 80053c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80053c8:	2301      	movs	r3, #1
 80053ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80053cc:	e7b5      	b.n	800533a <_strtod_l+0x6e2>
 80053ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80053d0:	9805      	ldr	r0, [sp, #20]
 80053d2:	462a      	mov	r2, r5
 80053d4:	f001 fa2c 	bl	8006830 <__lshift>
 80053d8:	901a      	str	r0, [sp, #104]	@ 0x68
 80053da:	2800      	cmp	r0, #0
 80053dc:	d1d9      	bne.n	8005392 <_strtod_l+0x73a>
 80053de:	e65a      	b.n	8005096 <_strtod_l+0x43e>
 80053e0:	2e00      	cmp	r6, #0
 80053e2:	dd07      	ble.n	80053f4 <_strtod_l+0x79c>
 80053e4:	4649      	mov	r1, r9
 80053e6:	9805      	ldr	r0, [sp, #20]
 80053e8:	4632      	mov	r2, r6
 80053ea:	f001 fa21 	bl	8006830 <__lshift>
 80053ee:	4681      	mov	r9, r0
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d0d8      	beq.n	80053a6 <_strtod_l+0x74e>
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	dd08      	ble.n	800540a <_strtod_l+0x7b2>
 80053f8:	4641      	mov	r1, r8
 80053fa:	9805      	ldr	r0, [sp, #20]
 80053fc:	463a      	mov	r2, r7
 80053fe:	f001 fa17 	bl	8006830 <__lshift>
 8005402:	4680      	mov	r8, r0
 8005404:	2800      	cmp	r0, #0
 8005406:	f43f ae46 	beq.w	8005096 <_strtod_l+0x43e>
 800540a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800540c:	9805      	ldr	r0, [sp, #20]
 800540e:	464a      	mov	r2, r9
 8005410:	f001 fa96 	bl	8006940 <__mdiff>
 8005414:	4604      	mov	r4, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	f43f ae3d 	beq.w	8005096 <_strtod_l+0x43e>
 800541c:	68c3      	ldr	r3, [r0, #12]
 800541e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005420:	2300      	movs	r3, #0
 8005422:	60c3      	str	r3, [r0, #12]
 8005424:	4641      	mov	r1, r8
 8005426:	f001 fa6f 	bl	8006908 <__mcmp>
 800542a:	2800      	cmp	r0, #0
 800542c:	da46      	bge.n	80054bc <_strtod_l+0x864>
 800542e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005430:	ea53 030a 	orrs.w	r3, r3, sl
 8005434:	d16c      	bne.n	8005510 <_strtod_l+0x8b8>
 8005436:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800543a:	2b00      	cmp	r3, #0
 800543c:	d168      	bne.n	8005510 <_strtod_l+0x8b8>
 800543e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005442:	0d1b      	lsrs	r3, r3, #20
 8005444:	051b      	lsls	r3, r3, #20
 8005446:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800544a:	d961      	bls.n	8005510 <_strtod_l+0x8b8>
 800544c:	6963      	ldr	r3, [r4, #20]
 800544e:	b913      	cbnz	r3, 8005456 <_strtod_l+0x7fe>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	2b01      	cmp	r3, #1
 8005454:	dd5c      	ble.n	8005510 <_strtod_l+0x8b8>
 8005456:	4621      	mov	r1, r4
 8005458:	2201      	movs	r2, #1
 800545a:	9805      	ldr	r0, [sp, #20]
 800545c:	f001 f9e8 	bl	8006830 <__lshift>
 8005460:	4641      	mov	r1, r8
 8005462:	4604      	mov	r4, r0
 8005464:	f001 fa50 	bl	8006908 <__mcmp>
 8005468:	2800      	cmp	r0, #0
 800546a:	dd51      	ble.n	8005510 <_strtod_l+0x8b8>
 800546c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005470:	9a08      	ldr	r2, [sp, #32]
 8005472:	0d1b      	lsrs	r3, r3, #20
 8005474:	051b      	lsls	r3, r3, #20
 8005476:	2a00      	cmp	r2, #0
 8005478:	d06b      	beq.n	8005552 <_strtod_l+0x8fa>
 800547a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800547e:	d868      	bhi.n	8005552 <_strtod_l+0x8fa>
 8005480:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005484:	f67f ae9d 	bls.w	80051c2 <_strtod_l+0x56a>
 8005488:	4b0a      	ldr	r3, [pc, #40]	@ (80054b4 <_strtod_l+0x85c>)
 800548a:	4650      	mov	r0, sl
 800548c:	4659      	mov	r1, fp
 800548e:	2200      	movs	r2, #0
 8005490:	f7fb f8d2 	bl	8000638 <__aeabi_dmul>
 8005494:	4b08      	ldr	r3, [pc, #32]	@ (80054b8 <_strtod_l+0x860>)
 8005496:	400b      	ands	r3, r1
 8005498:	4682      	mov	sl, r0
 800549a:	468b      	mov	fp, r1
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f ae05 	bne.w	80050ac <_strtod_l+0x454>
 80054a2:	9a05      	ldr	r2, [sp, #20]
 80054a4:	2322      	movs	r3, #34	@ 0x22
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e600      	b.n	80050ac <_strtod_l+0x454>
 80054aa:	bf00      	nop
 80054ac:	080078f8 	.word	0x080078f8
 80054b0:	fffffc02 	.word	0xfffffc02
 80054b4:	39500000 	.word	0x39500000
 80054b8:	7ff00000 	.word	0x7ff00000
 80054bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80054c0:	d165      	bne.n	800558e <_strtod_l+0x936>
 80054c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80054c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054c8:	b35a      	cbz	r2, 8005522 <_strtod_l+0x8ca>
 80054ca:	4a9f      	ldr	r2, [pc, #636]	@ (8005748 <_strtod_l+0xaf0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d12b      	bne.n	8005528 <_strtod_l+0x8d0>
 80054d0:	9b08      	ldr	r3, [sp, #32]
 80054d2:	4651      	mov	r1, sl
 80054d4:	b303      	cbz	r3, 8005518 <_strtod_l+0x8c0>
 80054d6:	4b9d      	ldr	r3, [pc, #628]	@ (800574c <_strtod_l+0xaf4>)
 80054d8:	465a      	mov	r2, fp
 80054da:	4013      	ands	r3, r2
 80054dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054e4:	d81b      	bhi.n	800551e <_strtod_l+0x8c6>
 80054e6:	0d1b      	lsrs	r3, r3, #20
 80054e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	4299      	cmp	r1, r3
 80054f2:	d119      	bne.n	8005528 <_strtod_l+0x8d0>
 80054f4:	4b96      	ldr	r3, [pc, #600]	@ (8005750 <_strtod_l+0xaf8>)
 80054f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d102      	bne.n	8005502 <_strtod_l+0x8aa>
 80054fc:	3101      	adds	r1, #1
 80054fe:	f43f adca 	beq.w	8005096 <_strtod_l+0x43e>
 8005502:	4b92      	ldr	r3, [pc, #584]	@ (800574c <_strtod_l+0xaf4>)
 8005504:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005506:	401a      	ands	r2, r3
 8005508:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800550c:	f04f 0a00 	mov.w	sl, #0
 8005510:	9b08      	ldr	r3, [sp, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1b8      	bne.n	8005488 <_strtod_l+0x830>
 8005516:	e5c9      	b.n	80050ac <_strtod_l+0x454>
 8005518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800551c:	e7e8      	b.n	80054f0 <_strtod_l+0x898>
 800551e:	4613      	mov	r3, r2
 8005520:	e7e6      	b.n	80054f0 <_strtod_l+0x898>
 8005522:	ea53 030a 	orrs.w	r3, r3, sl
 8005526:	d0a1      	beq.n	800546c <_strtod_l+0x814>
 8005528:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800552a:	b1db      	cbz	r3, 8005564 <_strtod_l+0x90c>
 800552c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800552e:	4213      	tst	r3, r2
 8005530:	d0ee      	beq.n	8005510 <_strtod_l+0x8b8>
 8005532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005534:	9a08      	ldr	r2, [sp, #32]
 8005536:	4650      	mov	r0, sl
 8005538:	4659      	mov	r1, fp
 800553a:	b1bb      	cbz	r3, 800556c <_strtod_l+0x914>
 800553c:	f7ff fb6e 	bl	8004c1c <sulp>
 8005540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005544:	ec53 2b10 	vmov	r2, r3, d0
 8005548:	f7fa fec0 	bl	80002cc <__adddf3>
 800554c:	4682      	mov	sl, r0
 800554e:	468b      	mov	fp, r1
 8005550:	e7de      	b.n	8005510 <_strtod_l+0x8b8>
 8005552:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005556:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800555a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800555e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005562:	e7d5      	b.n	8005510 <_strtod_l+0x8b8>
 8005564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005566:	ea13 0f0a 	tst.w	r3, sl
 800556a:	e7e1      	b.n	8005530 <_strtod_l+0x8d8>
 800556c:	f7ff fb56 	bl	8004c1c <sulp>
 8005570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005574:	ec53 2b10 	vmov	r2, r3, d0
 8005578:	f7fa fea6 	bl	80002c8 <__aeabi_dsub>
 800557c:	2200      	movs	r2, #0
 800557e:	2300      	movs	r3, #0
 8005580:	4682      	mov	sl, r0
 8005582:	468b      	mov	fp, r1
 8005584:	f7fb fac0 	bl	8000b08 <__aeabi_dcmpeq>
 8005588:	2800      	cmp	r0, #0
 800558a:	d0c1      	beq.n	8005510 <_strtod_l+0x8b8>
 800558c:	e619      	b.n	80051c2 <_strtod_l+0x56a>
 800558e:	4641      	mov	r1, r8
 8005590:	4620      	mov	r0, r4
 8005592:	f001 fb31 	bl	8006bf8 <__ratio>
 8005596:	ec57 6b10 	vmov	r6, r7, d0
 800559a:	2200      	movs	r2, #0
 800559c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80055a0:	4630      	mov	r0, r6
 80055a2:	4639      	mov	r1, r7
 80055a4:	f7fb fac4 	bl	8000b30 <__aeabi_dcmple>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d06f      	beq.n	800568c <_strtod_l+0xa34>
 80055ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d17a      	bne.n	80056a8 <_strtod_l+0xa50>
 80055b2:	f1ba 0f00 	cmp.w	sl, #0
 80055b6:	d158      	bne.n	800566a <_strtod_l+0xa12>
 80055b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d15a      	bne.n	8005678 <_strtod_l+0xa20>
 80055c2:	4b64      	ldr	r3, [pc, #400]	@ (8005754 <_strtod_l+0xafc>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	4630      	mov	r0, r6
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fb faa7 	bl	8000b1c <__aeabi_dcmplt>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d159      	bne.n	8005686 <_strtod_l+0xa2e>
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	4b60      	ldr	r3, [pc, #384]	@ (8005758 <_strtod_l+0xb00>)
 80055d8:	2200      	movs	r2, #0
 80055da:	f7fb f82d 	bl	8000638 <__aeabi_dmul>
 80055de:	4606      	mov	r6, r0
 80055e0:	460f      	mov	r7, r1
 80055e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80055e6:	9606      	str	r6, [sp, #24]
 80055e8:	9307      	str	r3, [sp, #28]
 80055ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055ee:	4d57      	ldr	r5, [pc, #348]	@ (800574c <_strtod_l+0xaf4>)
 80055f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80055f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055f6:	401d      	ands	r5, r3
 80055f8:	4b58      	ldr	r3, [pc, #352]	@ (800575c <_strtod_l+0xb04>)
 80055fa:	429d      	cmp	r5, r3
 80055fc:	f040 80b2 	bne.w	8005764 <_strtod_l+0xb0c>
 8005600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005602:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005606:	ec4b ab10 	vmov	d0, sl, fp
 800560a:	f001 fa2d 	bl	8006a68 <__ulp>
 800560e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005612:	ec51 0b10 	vmov	r0, r1, d0
 8005616:	f7fb f80f 	bl	8000638 <__aeabi_dmul>
 800561a:	4652      	mov	r2, sl
 800561c:	465b      	mov	r3, fp
 800561e:	f7fa fe55 	bl	80002cc <__adddf3>
 8005622:	460b      	mov	r3, r1
 8005624:	4949      	ldr	r1, [pc, #292]	@ (800574c <_strtod_l+0xaf4>)
 8005626:	4a4e      	ldr	r2, [pc, #312]	@ (8005760 <_strtod_l+0xb08>)
 8005628:	4019      	ands	r1, r3
 800562a:	4291      	cmp	r1, r2
 800562c:	4682      	mov	sl, r0
 800562e:	d942      	bls.n	80056b6 <_strtod_l+0xa5e>
 8005630:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005632:	4b47      	ldr	r3, [pc, #284]	@ (8005750 <_strtod_l+0xaf8>)
 8005634:	429a      	cmp	r2, r3
 8005636:	d103      	bne.n	8005640 <_strtod_l+0x9e8>
 8005638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800563a:	3301      	adds	r3, #1
 800563c:	f43f ad2b 	beq.w	8005096 <_strtod_l+0x43e>
 8005640:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005750 <_strtod_l+0xaf8>
 8005644:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005648:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800564a:	9805      	ldr	r0, [sp, #20]
 800564c:	f000 fed8 	bl	8006400 <_Bfree>
 8005650:	9805      	ldr	r0, [sp, #20]
 8005652:	4649      	mov	r1, r9
 8005654:	f000 fed4 	bl	8006400 <_Bfree>
 8005658:	9805      	ldr	r0, [sp, #20]
 800565a:	4641      	mov	r1, r8
 800565c:	f000 fed0 	bl	8006400 <_Bfree>
 8005660:	9805      	ldr	r0, [sp, #20]
 8005662:	4621      	mov	r1, r4
 8005664:	f000 fecc 	bl	8006400 <_Bfree>
 8005668:	e618      	b.n	800529c <_strtod_l+0x644>
 800566a:	f1ba 0f01 	cmp.w	sl, #1
 800566e:	d103      	bne.n	8005678 <_strtod_l+0xa20>
 8005670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005672:	2b00      	cmp	r3, #0
 8005674:	f43f ada5 	beq.w	80051c2 <_strtod_l+0x56a>
 8005678:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005728 <_strtod_l+0xad0>
 800567c:	4f35      	ldr	r7, [pc, #212]	@ (8005754 <_strtod_l+0xafc>)
 800567e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005682:	2600      	movs	r6, #0
 8005684:	e7b1      	b.n	80055ea <_strtod_l+0x992>
 8005686:	4f34      	ldr	r7, [pc, #208]	@ (8005758 <_strtod_l+0xb00>)
 8005688:	2600      	movs	r6, #0
 800568a:	e7aa      	b.n	80055e2 <_strtod_l+0x98a>
 800568c:	4b32      	ldr	r3, [pc, #200]	@ (8005758 <_strtod_l+0xb00>)
 800568e:	4630      	mov	r0, r6
 8005690:	4639      	mov	r1, r7
 8005692:	2200      	movs	r2, #0
 8005694:	f7fa ffd0 	bl	8000638 <__aeabi_dmul>
 8005698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800569a:	4606      	mov	r6, r0
 800569c:	460f      	mov	r7, r1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d09f      	beq.n	80055e2 <_strtod_l+0x98a>
 80056a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80056a6:	e7a0      	b.n	80055ea <_strtod_l+0x992>
 80056a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005730 <_strtod_l+0xad8>
 80056ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80056b0:	ec57 6b17 	vmov	r6, r7, d7
 80056b4:	e799      	b.n	80055ea <_strtod_l+0x992>
 80056b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80056ba:	9b08      	ldr	r3, [sp, #32]
 80056bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1c1      	bne.n	8005648 <_strtod_l+0x9f0>
 80056c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80056c8:	0d1b      	lsrs	r3, r3, #20
 80056ca:	051b      	lsls	r3, r3, #20
 80056cc:	429d      	cmp	r5, r3
 80056ce:	d1bb      	bne.n	8005648 <_strtod_l+0x9f0>
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fb fad2 	bl	8000c7c <__aeabi_d2lz>
 80056d8:	f7fa ff80 	bl	80005dc <__aeabi_l2d>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4630      	mov	r0, r6
 80056e2:	4639      	mov	r1, r7
 80056e4:	f7fa fdf0 	bl	80002c8 <__aeabi_dsub>
 80056e8:	460b      	mov	r3, r1
 80056ea:	4602      	mov	r2, r0
 80056ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80056f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80056f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056f6:	ea46 060a 	orr.w	r6, r6, sl
 80056fa:	431e      	orrs	r6, r3
 80056fc:	d06f      	beq.n	80057de <_strtod_l+0xb86>
 80056fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8005738 <_strtod_l+0xae0>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f7fb fa0a 	bl	8000b1c <__aeabi_dcmplt>
 8005708:	2800      	cmp	r0, #0
 800570a:	f47f accf 	bne.w	80050ac <_strtod_l+0x454>
 800570e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005740 <_strtod_l+0xae8>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005718:	f7fb fa1e 	bl	8000b58 <__aeabi_dcmpgt>
 800571c:	2800      	cmp	r0, #0
 800571e:	d093      	beq.n	8005648 <_strtod_l+0x9f0>
 8005720:	e4c4      	b.n	80050ac <_strtod_l+0x454>
 8005722:	bf00      	nop
 8005724:	f3af 8000 	nop.w
 8005728:	00000000 	.word	0x00000000
 800572c:	bff00000 	.word	0xbff00000
 8005730:	00000000 	.word	0x00000000
 8005734:	3ff00000 	.word	0x3ff00000
 8005738:	94a03595 	.word	0x94a03595
 800573c:	3fdfffff 	.word	0x3fdfffff
 8005740:	35afe535 	.word	0x35afe535
 8005744:	3fe00000 	.word	0x3fe00000
 8005748:	000fffff 	.word	0x000fffff
 800574c:	7ff00000 	.word	0x7ff00000
 8005750:	7fefffff 	.word	0x7fefffff
 8005754:	3ff00000 	.word	0x3ff00000
 8005758:	3fe00000 	.word	0x3fe00000
 800575c:	7fe00000 	.word	0x7fe00000
 8005760:	7c9fffff 	.word	0x7c9fffff
 8005764:	9b08      	ldr	r3, [sp, #32]
 8005766:	b323      	cbz	r3, 80057b2 <_strtod_l+0xb5a>
 8005768:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800576c:	d821      	bhi.n	80057b2 <_strtod_l+0xb5a>
 800576e:	a328      	add	r3, pc, #160	@ (adr r3, 8005810 <_strtod_l+0xbb8>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	4630      	mov	r0, r6
 8005776:	4639      	mov	r1, r7
 8005778:	f7fb f9da 	bl	8000b30 <__aeabi_dcmple>
 800577c:	b1a0      	cbz	r0, 80057a8 <_strtod_l+0xb50>
 800577e:	4639      	mov	r1, r7
 8005780:	4630      	mov	r0, r6
 8005782:	f7fb f9f3 	bl	8000b6c <__aeabi_d2uiz>
 8005786:	2801      	cmp	r0, #1
 8005788:	bf38      	it	cc
 800578a:	2001      	movcc	r0, #1
 800578c:	f7fa feda 	bl	8000544 <__aeabi_ui2d>
 8005790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005792:	4606      	mov	r6, r0
 8005794:	460f      	mov	r7, r1
 8005796:	b9fb      	cbnz	r3, 80057d8 <_strtod_l+0xb80>
 8005798:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800579c:	9014      	str	r0, [sp, #80]	@ 0x50
 800579e:	9315      	str	r3, [sp, #84]	@ 0x54
 80057a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80057a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80057a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80057aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80057ae:	1b5b      	subs	r3, r3, r5
 80057b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80057b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80057b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80057ba:	f001 f955 	bl	8006a68 <__ulp>
 80057be:	4650      	mov	r0, sl
 80057c0:	ec53 2b10 	vmov	r2, r3, d0
 80057c4:	4659      	mov	r1, fp
 80057c6:	f7fa ff37 	bl	8000638 <__aeabi_dmul>
 80057ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80057ce:	f7fa fd7d 	bl	80002cc <__adddf3>
 80057d2:	4682      	mov	sl, r0
 80057d4:	468b      	mov	fp, r1
 80057d6:	e770      	b.n	80056ba <_strtod_l+0xa62>
 80057d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80057dc:	e7e0      	b.n	80057a0 <_strtod_l+0xb48>
 80057de:	a30e      	add	r3, pc, #56	@ (adr r3, 8005818 <_strtod_l+0xbc0>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f7fb f99a 	bl	8000b1c <__aeabi_dcmplt>
 80057e8:	e798      	b.n	800571c <_strtod_l+0xac4>
 80057ea:	2300      	movs	r3, #0
 80057ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80057f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	f7ff ba6d 	b.w	8004cd2 <_strtod_l+0x7a>
 80057f8:	2a65      	cmp	r2, #101	@ 0x65
 80057fa:	f43f ab66 	beq.w	8004eca <_strtod_l+0x272>
 80057fe:	2a45      	cmp	r2, #69	@ 0x45
 8005800:	f43f ab63 	beq.w	8004eca <_strtod_l+0x272>
 8005804:	2301      	movs	r3, #1
 8005806:	f7ff bb9e 	b.w	8004f46 <_strtod_l+0x2ee>
 800580a:	bf00      	nop
 800580c:	f3af 8000 	nop.w
 8005810:	ffc00000 	.word	0xffc00000
 8005814:	41dfffff 	.word	0x41dfffff
 8005818:	94a03595 	.word	0x94a03595
 800581c:	3fcfffff 	.word	0x3fcfffff

08005820 <strtod>:
 8005820:	460a      	mov	r2, r1
 8005822:	4601      	mov	r1, r0
 8005824:	4802      	ldr	r0, [pc, #8]	@ (8005830 <strtod+0x10>)
 8005826:	4b03      	ldr	r3, [pc, #12]	@ (8005834 <strtod+0x14>)
 8005828:	6800      	ldr	r0, [r0, #0]
 800582a:	f7ff ba15 	b.w	8004c58 <_strtod_l>
 800582e:	bf00      	nop
 8005830:	20000188 	.word	0x20000188
 8005834:	2000001c 	.word	0x2000001c

08005838 <_fwalk_sglue>:
 8005838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800583c:	4607      	mov	r7, r0
 800583e:	4688      	mov	r8, r1
 8005840:	4614      	mov	r4, r2
 8005842:	2600      	movs	r6, #0
 8005844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005848:	f1b9 0901 	subs.w	r9, r9, #1
 800584c:	d505      	bpl.n	800585a <_fwalk_sglue+0x22>
 800584e:	6824      	ldr	r4, [r4, #0]
 8005850:	2c00      	cmp	r4, #0
 8005852:	d1f7      	bne.n	8005844 <_fwalk_sglue+0xc>
 8005854:	4630      	mov	r0, r6
 8005856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800585a:	89ab      	ldrh	r3, [r5, #12]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d907      	bls.n	8005870 <_fwalk_sglue+0x38>
 8005860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005864:	3301      	adds	r3, #1
 8005866:	d003      	beq.n	8005870 <_fwalk_sglue+0x38>
 8005868:	4629      	mov	r1, r5
 800586a:	4638      	mov	r0, r7
 800586c:	47c0      	blx	r8
 800586e:	4306      	orrs	r6, r0
 8005870:	3568      	adds	r5, #104	@ 0x68
 8005872:	e7e9      	b.n	8005848 <_fwalk_sglue+0x10>

08005874 <strncmp>:
 8005874:	b510      	push	{r4, lr}
 8005876:	b16a      	cbz	r2, 8005894 <strncmp+0x20>
 8005878:	3901      	subs	r1, #1
 800587a:	1884      	adds	r4, r0, r2
 800587c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005880:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005884:	429a      	cmp	r2, r3
 8005886:	d103      	bne.n	8005890 <strncmp+0x1c>
 8005888:	42a0      	cmp	r0, r4
 800588a:	d001      	beq.n	8005890 <strncmp+0x1c>
 800588c:	2a00      	cmp	r2, #0
 800588e:	d1f5      	bne.n	800587c <strncmp+0x8>
 8005890:	1ad0      	subs	r0, r2, r3
 8005892:	bd10      	pop	{r4, pc}
 8005894:	4610      	mov	r0, r2
 8005896:	e7fc      	b.n	8005892 <strncmp+0x1e>

08005898 <strtok>:
 8005898:	4b16      	ldr	r3, [pc, #88]	@ (80058f4 <strtok+0x5c>)
 800589a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589e:	681f      	ldr	r7, [r3, #0]
 80058a0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80058a2:	4605      	mov	r5, r0
 80058a4:	460e      	mov	r6, r1
 80058a6:	b9ec      	cbnz	r4, 80058e4 <strtok+0x4c>
 80058a8:	2050      	movs	r0, #80	@ 0x50
 80058aa:	f000 fbf5 	bl	8006098 <malloc>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6478      	str	r0, [r7, #68]	@ 0x44
 80058b2:	b920      	cbnz	r0, 80058be <strtok+0x26>
 80058b4:	4b10      	ldr	r3, [pc, #64]	@ (80058f8 <strtok+0x60>)
 80058b6:	4811      	ldr	r0, [pc, #68]	@ (80058fc <strtok+0x64>)
 80058b8:	215b      	movs	r1, #91	@ 0x5b
 80058ba:	f000 f895 	bl	80059e8 <__assert_func>
 80058be:	e9c0 4400 	strd	r4, r4, [r0]
 80058c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80058c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80058ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80058ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80058d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80058d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80058da:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80058de:	6184      	str	r4, [r0, #24]
 80058e0:	7704      	strb	r4, [r0, #28]
 80058e2:	6244      	str	r4, [r0, #36]	@ 0x24
 80058e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	2301      	movs	r3, #1
 80058ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f0:	f000 b806 	b.w	8005900 <__strtok_r>
 80058f4:	20000188 	.word	0x20000188
 80058f8:	08007920 	.word	0x08007920
 80058fc:	08007937 	.word	0x08007937

08005900 <__strtok_r>:
 8005900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005902:	4604      	mov	r4, r0
 8005904:	b908      	cbnz	r0, 800590a <__strtok_r+0xa>
 8005906:	6814      	ldr	r4, [r2, #0]
 8005908:	b144      	cbz	r4, 800591c <__strtok_r+0x1c>
 800590a:	4620      	mov	r0, r4
 800590c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005910:	460f      	mov	r7, r1
 8005912:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005916:	b91e      	cbnz	r6, 8005920 <__strtok_r+0x20>
 8005918:	b965      	cbnz	r5, 8005934 <__strtok_r+0x34>
 800591a:	6015      	str	r5, [r2, #0]
 800591c:	2000      	movs	r0, #0
 800591e:	e005      	b.n	800592c <__strtok_r+0x2c>
 8005920:	42b5      	cmp	r5, r6
 8005922:	d1f6      	bne.n	8005912 <__strtok_r+0x12>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f0      	bne.n	800590a <__strtok_r+0xa>
 8005928:	6014      	str	r4, [r2, #0]
 800592a:	7003      	strb	r3, [r0, #0]
 800592c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800592e:	461c      	mov	r4, r3
 8005930:	e00c      	b.n	800594c <__strtok_r+0x4c>
 8005932:	b915      	cbnz	r5, 800593a <__strtok_r+0x3a>
 8005934:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005938:	460e      	mov	r6, r1
 800593a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800593e:	42ab      	cmp	r3, r5
 8005940:	d1f7      	bne.n	8005932 <__strtok_r+0x32>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f3      	beq.n	800592e <__strtok_r+0x2e>
 8005946:	2300      	movs	r3, #0
 8005948:	f804 3c01 	strb.w	r3, [r4, #-1]
 800594c:	6014      	str	r4, [r2, #0]
 800594e:	e7ed      	b.n	800592c <__strtok_r+0x2c>

08005950 <memset>:
 8005950:	4402      	add	r2, r0
 8005952:	4603      	mov	r3, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	d100      	bne.n	800595a <memset+0xa>
 8005958:	4770      	bx	lr
 800595a:	f803 1b01 	strb.w	r1, [r3], #1
 800595e:	e7f9      	b.n	8005954 <memset+0x4>

08005960 <__errno>:
 8005960:	4b01      	ldr	r3, [pc, #4]	@ (8005968 <__errno+0x8>)
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000188 	.word	0x20000188

0800596c <__libc_init_array>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	4d0d      	ldr	r5, [pc, #52]	@ (80059a4 <__libc_init_array+0x38>)
 8005970:	4c0d      	ldr	r4, [pc, #52]	@ (80059a8 <__libc_init_array+0x3c>)
 8005972:	1b64      	subs	r4, r4, r5
 8005974:	10a4      	asrs	r4, r4, #2
 8005976:	2600      	movs	r6, #0
 8005978:	42a6      	cmp	r6, r4
 800597a:	d109      	bne.n	8005990 <__libc_init_array+0x24>
 800597c:	4d0b      	ldr	r5, [pc, #44]	@ (80059ac <__libc_init_array+0x40>)
 800597e:	4c0c      	ldr	r4, [pc, #48]	@ (80059b0 <__libc_init_array+0x44>)
 8005980:	f001 ff7a 	bl	8007878 <_init>
 8005984:	1b64      	subs	r4, r4, r5
 8005986:	10a4      	asrs	r4, r4, #2
 8005988:	2600      	movs	r6, #0
 800598a:	42a6      	cmp	r6, r4
 800598c:	d105      	bne.n	800599a <__libc_init_array+0x2e>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	f855 3b04 	ldr.w	r3, [r5], #4
 8005994:	4798      	blx	r3
 8005996:	3601      	adds	r6, #1
 8005998:	e7ee      	b.n	8005978 <__libc_init_array+0xc>
 800599a:	f855 3b04 	ldr.w	r3, [r5], #4
 800599e:	4798      	blx	r3
 80059a0:	3601      	adds	r6, #1
 80059a2:	e7f2      	b.n	800598a <__libc_init_array+0x1e>
 80059a4:	08007cdc 	.word	0x08007cdc
 80059a8:	08007cdc 	.word	0x08007cdc
 80059ac:	08007cdc 	.word	0x08007cdc
 80059b0:	08007ce0 	.word	0x08007ce0

080059b4 <__retarget_lock_init_recursive>:
 80059b4:	4770      	bx	lr

080059b6 <__retarget_lock_acquire_recursive>:
 80059b6:	4770      	bx	lr

080059b8 <__retarget_lock_release_recursive>:
 80059b8:	4770      	bx	lr

080059ba <memcpy>:
 80059ba:	440a      	add	r2, r1
 80059bc:	4291      	cmp	r1, r2
 80059be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80059c2:	d100      	bne.n	80059c6 <memcpy+0xc>
 80059c4:	4770      	bx	lr
 80059c6:	b510      	push	{r4, lr}
 80059c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d0:	4291      	cmp	r1, r2
 80059d2:	d1f9      	bne.n	80059c8 <memcpy+0xe>
 80059d4:	bd10      	pop	{r4, pc}
	...

080059d8 <nan>:
 80059d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80059e0 <nan+0x8>
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	00000000 	.word	0x00000000
 80059e4:	7ff80000 	.word	0x7ff80000

080059e8 <__assert_func>:
 80059e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059ea:	4614      	mov	r4, r2
 80059ec:	461a      	mov	r2, r3
 80059ee:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <__assert_func+0x2c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4605      	mov	r5, r0
 80059f4:	68d8      	ldr	r0, [r3, #12]
 80059f6:	b954      	cbnz	r4, 8005a0e <__assert_func+0x26>
 80059f8:	4b07      	ldr	r3, [pc, #28]	@ (8005a18 <__assert_func+0x30>)
 80059fa:	461c      	mov	r4, r3
 80059fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a00:	9100      	str	r1, [sp, #0]
 8005a02:	462b      	mov	r3, r5
 8005a04:	4905      	ldr	r1, [pc, #20]	@ (8005a1c <__assert_func+0x34>)
 8005a06:	f001 f9b1 	bl	8006d6c <fiprintf>
 8005a0a:	f001 fa25 	bl	8006e58 <abort>
 8005a0e:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <__assert_func+0x38>)
 8005a10:	e7f4      	b.n	80059fc <__assert_func+0x14>
 8005a12:	bf00      	nop
 8005a14:	20000188 	.word	0x20000188
 8005a18:	08007ad5 	.word	0x08007ad5
 8005a1c:	08007aa7 	.word	0x08007aa7
 8005a20:	08007a9a 	.word	0x08007a9a

08005a24 <rshift>:
 8005a24:	6903      	ldr	r3, [r0, #16]
 8005a26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005a32:	f100 0414 	add.w	r4, r0, #20
 8005a36:	dd45      	ble.n	8005ac4 <rshift+0xa0>
 8005a38:	f011 011f 	ands.w	r1, r1, #31
 8005a3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005a40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005a44:	d10c      	bne.n	8005a60 <rshift+0x3c>
 8005a46:	f100 0710 	add.w	r7, r0, #16
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	42b1      	cmp	r1, r6
 8005a4e:	d334      	bcc.n	8005aba <rshift+0x96>
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	1eea      	subs	r2, r5, #3
 8005a56:	4296      	cmp	r6, r2
 8005a58:	bf38      	it	cc
 8005a5a:	2300      	movcc	r3, #0
 8005a5c:	4423      	add	r3, r4
 8005a5e:	e015      	b.n	8005a8c <rshift+0x68>
 8005a60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005a64:	f1c1 0820 	rsb	r8, r1, #32
 8005a68:	40cf      	lsrs	r7, r1
 8005a6a:	f105 0e04 	add.w	lr, r5, #4
 8005a6e:	46a1      	mov	r9, r4
 8005a70:	4576      	cmp	r6, lr
 8005a72:	46f4      	mov	ip, lr
 8005a74:	d815      	bhi.n	8005aa2 <rshift+0x7e>
 8005a76:	1a9a      	subs	r2, r3, r2
 8005a78:	0092      	lsls	r2, r2, #2
 8005a7a:	3a04      	subs	r2, #4
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	42ae      	cmp	r6, r5
 8005a80:	bf38      	it	cc
 8005a82:	2200      	movcc	r2, #0
 8005a84:	18a3      	adds	r3, r4, r2
 8005a86:	50a7      	str	r7, [r4, r2]
 8005a88:	b107      	cbz	r7, 8005a8c <rshift+0x68>
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	1b1a      	subs	r2, r3, r4
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005a94:	bf08      	it	eq
 8005a96:	2300      	moveq	r3, #0
 8005a98:	6102      	str	r2, [r0, #16]
 8005a9a:	bf08      	it	eq
 8005a9c:	6143      	streq	r3, [r0, #20]
 8005a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aa2:	f8dc c000 	ldr.w	ip, [ip]
 8005aa6:	fa0c fc08 	lsl.w	ip, ip, r8
 8005aaa:	ea4c 0707 	orr.w	r7, ip, r7
 8005aae:	f849 7b04 	str.w	r7, [r9], #4
 8005ab2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ab6:	40cf      	lsrs	r7, r1
 8005ab8:	e7da      	b.n	8005a70 <rshift+0x4c>
 8005aba:	f851 cb04 	ldr.w	ip, [r1], #4
 8005abe:	f847 cf04 	str.w	ip, [r7, #4]!
 8005ac2:	e7c3      	b.n	8005a4c <rshift+0x28>
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	e7e1      	b.n	8005a8c <rshift+0x68>

08005ac8 <__hexdig_fun>:
 8005ac8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d802      	bhi.n	8005ad6 <__hexdig_fun+0xe>
 8005ad0:	3820      	subs	r0, #32
 8005ad2:	b2c0      	uxtb	r0, r0
 8005ad4:	4770      	bx	lr
 8005ad6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d801      	bhi.n	8005ae2 <__hexdig_fun+0x1a>
 8005ade:	3847      	subs	r0, #71	@ 0x47
 8005ae0:	e7f7      	b.n	8005ad2 <__hexdig_fun+0xa>
 8005ae2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d801      	bhi.n	8005aee <__hexdig_fun+0x26>
 8005aea:	3827      	subs	r0, #39	@ 0x27
 8005aec:	e7f1      	b.n	8005ad2 <__hexdig_fun+0xa>
 8005aee:	2000      	movs	r0, #0
 8005af0:	4770      	bx	lr
	...

08005af4 <__gethex>:
 8005af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af8:	b085      	sub	sp, #20
 8005afa:	468a      	mov	sl, r1
 8005afc:	9302      	str	r3, [sp, #8]
 8005afe:	680b      	ldr	r3, [r1, #0]
 8005b00:	9001      	str	r0, [sp, #4]
 8005b02:	4690      	mov	r8, r2
 8005b04:	1c9c      	adds	r4, r3, #2
 8005b06:	46a1      	mov	r9, r4
 8005b08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005b0c:	2830      	cmp	r0, #48	@ 0x30
 8005b0e:	d0fa      	beq.n	8005b06 <__gethex+0x12>
 8005b10:	eba9 0303 	sub.w	r3, r9, r3
 8005b14:	f1a3 0b02 	sub.w	fp, r3, #2
 8005b18:	f7ff ffd6 	bl	8005ac8 <__hexdig_fun>
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d168      	bne.n	8005bf4 <__gethex+0x100>
 8005b22:	49a0      	ldr	r1, [pc, #640]	@ (8005da4 <__gethex+0x2b0>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	4648      	mov	r0, r9
 8005b28:	f7ff fea4 	bl	8005874 <strncmp>
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d167      	bne.n	8005c02 <__gethex+0x10e>
 8005b32:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005b36:	4626      	mov	r6, r4
 8005b38:	f7ff ffc6 	bl	8005ac8 <__hexdig_fun>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d062      	beq.n	8005c06 <__gethex+0x112>
 8005b40:	4623      	mov	r3, r4
 8005b42:	7818      	ldrb	r0, [r3, #0]
 8005b44:	2830      	cmp	r0, #48	@ 0x30
 8005b46:	4699      	mov	r9, r3
 8005b48:	f103 0301 	add.w	r3, r3, #1
 8005b4c:	d0f9      	beq.n	8005b42 <__gethex+0x4e>
 8005b4e:	f7ff ffbb 	bl	8005ac8 <__hexdig_fun>
 8005b52:	fab0 f580 	clz	r5, r0
 8005b56:	096d      	lsrs	r5, r5, #5
 8005b58:	f04f 0b01 	mov.w	fp, #1
 8005b5c:	464a      	mov	r2, r9
 8005b5e:	4616      	mov	r6, r2
 8005b60:	3201      	adds	r2, #1
 8005b62:	7830      	ldrb	r0, [r6, #0]
 8005b64:	f7ff ffb0 	bl	8005ac8 <__hexdig_fun>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d1f8      	bne.n	8005b5e <__gethex+0x6a>
 8005b6c:	498d      	ldr	r1, [pc, #564]	@ (8005da4 <__gethex+0x2b0>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4630      	mov	r0, r6
 8005b72:	f7ff fe7f 	bl	8005874 <strncmp>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d13f      	bne.n	8005bfa <__gethex+0x106>
 8005b7a:	b944      	cbnz	r4, 8005b8e <__gethex+0x9a>
 8005b7c:	1c74      	adds	r4, r6, #1
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4616      	mov	r6, r2
 8005b82:	3201      	adds	r2, #1
 8005b84:	7830      	ldrb	r0, [r6, #0]
 8005b86:	f7ff ff9f 	bl	8005ac8 <__hexdig_fun>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d1f8      	bne.n	8005b80 <__gethex+0x8c>
 8005b8e:	1ba4      	subs	r4, r4, r6
 8005b90:	00a7      	lsls	r7, r4, #2
 8005b92:	7833      	ldrb	r3, [r6, #0]
 8005b94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005b98:	2b50      	cmp	r3, #80	@ 0x50
 8005b9a:	d13e      	bne.n	8005c1a <__gethex+0x126>
 8005b9c:	7873      	ldrb	r3, [r6, #1]
 8005b9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8005ba0:	d033      	beq.n	8005c0a <__gethex+0x116>
 8005ba2:	2b2d      	cmp	r3, #45	@ 0x2d
 8005ba4:	d034      	beq.n	8005c10 <__gethex+0x11c>
 8005ba6:	1c71      	adds	r1, r6, #1
 8005ba8:	2400      	movs	r4, #0
 8005baa:	7808      	ldrb	r0, [r1, #0]
 8005bac:	f7ff ff8c 	bl	8005ac8 <__hexdig_fun>
 8005bb0:	1e43      	subs	r3, r0, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b18      	cmp	r3, #24
 8005bb6:	d830      	bhi.n	8005c1a <__gethex+0x126>
 8005bb8:	f1a0 0210 	sub.w	r2, r0, #16
 8005bbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005bc0:	f7ff ff82 	bl	8005ac8 <__hexdig_fun>
 8005bc4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8005bc8:	fa5f fc8c 	uxtb.w	ip, ip
 8005bcc:	f1bc 0f18 	cmp.w	ip, #24
 8005bd0:	f04f 030a 	mov.w	r3, #10
 8005bd4:	d91e      	bls.n	8005c14 <__gethex+0x120>
 8005bd6:	b104      	cbz	r4, 8005bda <__gethex+0xe6>
 8005bd8:	4252      	negs	r2, r2
 8005bda:	4417      	add	r7, r2
 8005bdc:	f8ca 1000 	str.w	r1, [sl]
 8005be0:	b1ed      	cbz	r5, 8005c1e <__gethex+0x12a>
 8005be2:	f1bb 0f00 	cmp.w	fp, #0
 8005be6:	bf0c      	ite	eq
 8005be8:	2506      	moveq	r5, #6
 8005bea:	2500      	movne	r5, #0
 8005bec:	4628      	mov	r0, r5
 8005bee:	b005      	add	sp, #20
 8005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	2500      	movs	r5, #0
 8005bf6:	462c      	mov	r4, r5
 8005bf8:	e7b0      	b.n	8005b5c <__gethex+0x68>
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	d1c7      	bne.n	8005b8e <__gethex+0x9a>
 8005bfe:	4627      	mov	r7, r4
 8005c00:	e7c7      	b.n	8005b92 <__gethex+0x9e>
 8005c02:	464e      	mov	r6, r9
 8005c04:	462f      	mov	r7, r5
 8005c06:	2501      	movs	r5, #1
 8005c08:	e7c3      	b.n	8005b92 <__gethex+0x9e>
 8005c0a:	2400      	movs	r4, #0
 8005c0c:	1cb1      	adds	r1, r6, #2
 8005c0e:	e7cc      	b.n	8005baa <__gethex+0xb6>
 8005c10:	2401      	movs	r4, #1
 8005c12:	e7fb      	b.n	8005c0c <__gethex+0x118>
 8005c14:	fb03 0002 	mla	r0, r3, r2, r0
 8005c18:	e7ce      	b.n	8005bb8 <__gethex+0xc4>
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	e7de      	b.n	8005bdc <__gethex+0xe8>
 8005c1e:	eba6 0309 	sub.w	r3, r6, r9
 8005c22:	3b01      	subs	r3, #1
 8005c24:	4629      	mov	r1, r5
 8005c26:	2b07      	cmp	r3, #7
 8005c28:	dc0a      	bgt.n	8005c40 <__gethex+0x14c>
 8005c2a:	9801      	ldr	r0, [sp, #4]
 8005c2c:	f000 fba8 	bl	8006380 <_Balloc>
 8005c30:	4604      	mov	r4, r0
 8005c32:	b940      	cbnz	r0, 8005c46 <__gethex+0x152>
 8005c34:	4b5c      	ldr	r3, [pc, #368]	@ (8005da8 <__gethex+0x2b4>)
 8005c36:	4602      	mov	r2, r0
 8005c38:	21e4      	movs	r1, #228	@ 0xe4
 8005c3a:	485c      	ldr	r0, [pc, #368]	@ (8005dac <__gethex+0x2b8>)
 8005c3c:	f7ff fed4 	bl	80059e8 <__assert_func>
 8005c40:	3101      	adds	r1, #1
 8005c42:	105b      	asrs	r3, r3, #1
 8005c44:	e7ef      	b.n	8005c26 <__gethex+0x132>
 8005c46:	f100 0a14 	add.w	sl, r0, #20
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	4655      	mov	r5, sl
 8005c4e:	469b      	mov	fp, r3
 8005c50:	45b1      	cmp	r9, r6
 8005c52:	d337      	bcc.n	8005cc4 <__gethex+0x1d0>
 8005c54:	f845 bb04 	str.w	fp, [r5], #4
 8005c58:	eba5 050a 	sub.w	r5, r5, sl
 8005c5c:	10ad      	asrs	r5, r5, #2
 8005c5e:	6125      	str	r5, [r4, #16]
 8005c60:	4658      	mov	r0, fp
 8005c62:	f000 fc7f 	bl	8006564 <__hi0bits>
 8005c66:	016d      	lsls	r5, r5, #5
 8005c68:	f8d8 6000 	ldr.w	r6, [r8]
 8005c6c:	1a2d      	subs	r5, r5, r0
 8005c6e:	42b5      	cmp	r5, r6
 8005c70:	dd54      	ble.n	8005d1c <__gethex+0x228>
 8005c72:	1bad      	subs	r5, r5, r6
 8005c74:	4629      	mov	r1, r5
 8005c76:	4620      	mov	r0, r4
 8005c78:	f001 f813 	bl	8006ca2 <__any_on>
 8005c7c:	4681      	mov	r9, r0
 8005c7e:	b178      	cbz	r0, 8005ca0 <__gethex+0x1ac>
 8005c80:	1e6b      	subs	r3, r5, #1
 8005c82:	1159      	asrs	r1, r3, #5
 8005c84:	f003 021f 	and.w	r2, r3, #31
 8005c88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005c8c:	f04f 0901 	mov.w	r9, #1
 8005c90:	fa09 f202 	lsl.w	r2, r9, r2
 8005c94:	420a      	tst	r2, r1
 8005c96:	d003      	beq.n	8005ca0 <__gethex+0x1ac>
 8005c98:	454b      	cmp	r3, r9
 8005c9a:	dc36      	bgt.n	8005d0a <__gethex+0x216>
 8005c9c:	f04f 0902 	mov.w	r9, #2
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f7ff febe 	bl	8005a24 <rshift>
 8005ca8:	442f      	add	r7, r5
 8005caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cae:	42bb      	cmp	r3, r7
 8005cb0:	da42      	bge.n	8005d38 <__gethex+0x244>
 8005cb2:	9801      	ldr	r0, [sp, #4]
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	f000 fba3 	bl	8006400 <_Bfree>
 8005cba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	25a3      	movs	r5, #163	@ 0xa3
 8005cc2:	e793      	b.n	8005bec <__gethex+0xf8>
 8005cc4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005cc8:	2a2e      	cmp	r2, #46	@ 0x2e
 8005cca:	d012      	beq.n	8005cf2 <__gethex+0x1fe>
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d104      	bne.n	8005cda <__gethex+0x1e6>
 8005cd0:	f845 bb04 	str.w	fp, [r5], #4
 8005cd4:	f04f 0b00 	mov.w	fp, #0
 8005cd8:	465b      	mov	r3, fp
 8005cda:	7830      	ldrb	r0, [r6, #0]
 8005cdc:	9303      	str	r3, [sp, #12]
 8005cde:	f7ff fef3 	bl	8005ac8 <__hexdig_fun>
 8005ce2:	9b03      	ldr	r3, [sp, #12]
 8005ce4:	f000 000f 	and.w	r0, r0, #15
 8005ce8:	4098      	lsls	r0, r3
 8005cea:	ea4b 0b00 	orr.w	fp, fp, r0
 8005cee:	3304      	adds	r3, #4
 8005cf0:	e7ae      	b.n	8005c50 <__gethex+0x15c>
 8005cf2:	45b1      	cmp	r9, r6
 8005cf4:	d8ea      	bhi.n	8005ccc <__gethex+0x1d8>
 8005cf6:	492b      	ldr	r1, [pc, #172]	@ (8005da4 <__gethex+0x2b0>)
 8005cf8:	9303      	str	r3, [sp, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f7ff fdb9 	bl	8005874 <strncmp>
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d1e1      	bne.n	8005ccc <__gethex+0x1d8>
 8005d08:	e7a2      	b.n	8005c50 <__gethex+0x15c>
 8005d0a:	1ea9      	subs	r1, r5, #2
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 ffc8 	bl	8006ca2 <__any_on>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0c2      	beq.n	8005c9c <__gethex+0x1a8>
 8005d16:	f04f 0903 	mov.w	r9, #3
 8005d1a:	e7c1      	b.n	8005ca0 <__gethex+0x1ac>
 8005d1c:	da09      	bge.n	8005d32 <__gethex+0x23e>
 8005d1e:	1b75      	subs	r5, r6, r5
 8005d20:	4621      	mov	r1, r4
 8005d22:	9801      	ldr	r0, [sp, #4]
 8005d24:	462a      	mov	r2, r5
 8005d26:	f000 fd83 	bl	8006830 <__lshift>
 8005d2a:	1b7f      	subs	r7, r7, r5
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	f100 0a14 	add.w	sl, r0, #20
 8005d32:	f04f 0900 	mov.w	r9, #0
 8005d36:	e7b8      	b.n	8005caa <__gethex+0x1b6>
 8005d38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005d3c:	42bd      	cmp	r5, r7
 8005d3e:	dd6f      	ble.n	8005e20 <__gethex+0x32c>
 8005d40:	1bed      	subs	r5, r5, r7
 8005d42:	42ae      	cmp	r6, r5
 8005d44:	dc34      	bgt.n	8005db0 <__gethex+0x2bc>
 8005d46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d022      	beq.n	8005d94 <__gethex+0x2a0>
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d024      	beq.n	8005d9c <__gethex+0x2a8>
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d115      	bne.n	8005d82 <__gethex+0x28e>
 8005d56:	42ae      	cmp	r6, r5
 8005d58:	d113      	bne.n	8005d82 <__gethex+0x28e>
 8005d5a:	2e01      	cmp	r6, #1
 8005d5c:	d10b      	bne.n	8005d76 <__gethex+0x282>
 8005d5e:	9a02      	ldr	r2, [sp, #8]
 8005d60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	2301      	movs	r3, #1
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	f8ca 3000 	str.w	r3, [sl]
 8005d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d70:	2562      	movs	r5, #98	@ 0x62
 8005d72:	601c      	str	r4, [r3, #0]
 8005d74:	e73a      	b.n	8005bec <__gethex+0xf8>
 8005d76:	1e71      	subs	r1, r6, #1
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 ff92 	bl	8006ca2 <__any_on>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1ed      	bne.n	8005d5e <__gethex+0x26a>
 8005d82:	9801      	ldr	r0, [sp, #4]
 8005d84:	4621      	mov	r1, r4
 8005d86:	f000 fb3b 	bl	8006400 <_Bfree>
 8005d8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	2550      	movs	r5, #80	@ 0x50
 8005d92:	e72b      	b.n	8005bec <__gethex+0xf8>
 8005d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f3      	bne.n	8005d82 <__gethex+0x28e>
 8005d9a:	e7e0      	b.n	8005d5e <__gethex+0x26a>
 8005d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1dd      	bne.n	8005d5e <__gethex+0x26a>
 8005da2:	e7ee      	b.n	8005d82 <__gethex+0x28e>
 8005da4:	080078c0 	.word	0x080078c0
 8005da8:	08007ad6 	.word	0x08007ad6
 8005dac:	08007ae7 	.word	0x08007ae7
 8005db0:	1e6f      	subs	r7, r5, #1
 8005db2:	f1b9 0f00 	cmp.w	r9, #0
 8005db6:	d130      	bne.n	8005e1a <__gethex+0x326>
 8005db8:	b127      	cbz	r7, 8005dc4 <__gethex+0x2d0>
 8005dba:	4639      	mov	r1, r7
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 ff70 	bl	8006ca2 <__any_on>
 8005dc2:	4681      	mov	r9, r0
 8005dc4:	117a      	asrs	r2, r7, #5
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005dcc:	f007 071f 	and.w	r7, r7, #31
 8005dd0:	40bb      	lsls	r3, r7
 8005dd2:	4213      	tst	r3, r2
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	bf18      	it	ne
 8005dda:	f049 0902 	orrne.w	r9, r9, #2
 8005dde:	f7ff fe21 	bl	8005a24 <rshift>
 8005de2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005de6:	1b76      	subs	r6, r6, r5
 8005de8:	2502      	movs	r5, #2
 8005dea:	f1b9 0f00 	cmp.w	r9, #0
 8005dee:	d047      	beq.n	8005e80 <__gethex+0x38c>
 8005df0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d015      	beq.n	8005e24 <__gethex+0x330>
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d017      	beq.n	8005e2c <__gethex+0x338>
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d109      	bne.n	8005e14 <__gethex+0x320>
 8005e00:	f019 0f02 	tst.w	r9, #2
 8005e04:	d006      	beq.n	8005e14 <__gethex+0x320>
 8005e06:	f8da 3000 	ldr.w	r3, [sl]
 8005e0a:	ea49 0903 	orr.w	r9, r9, r3
 8005e0e:	f019 0f01 	tst.w	r9, #1
 8005e12:	d10e      	bne.n	8005e32 <__gethex+0x33e>
 8005e14:	f045 0510 	orr.w	r5, r5, #16
 8005e18:	e032      	b.n	8005e80 <__gethex+0x38c>
 8005e1a:	f04f 0901 	mov.w	r9, #1
 8005e1e:	e7d1      	b.n	8005dc4 <__gethex+0x2d0>
 8005e20:	2501      	movs	r5, #1
 8005e22:	e7e2      	b.n	8005dea <__gethex+0x2f6>
 8005e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e26:	f1c3 0301 	rsb	r3, r3, #1
 8005e2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <__gethex+0x320>
 8005e32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005e36:	f104 0314 	add.w	r3, r4, #20
 8005e3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005e3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005e42:	f04f 0c00 	mov.w	ip, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e4c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8005e50:	d01b      	beq.n	8005e8a <__gethex+0x396>
 8005e52:	3201      	adds	r2, #1
 8005e54:	6002      	str	r2, [r0, #0]
 8005e56:	2d02      	cmp	r5, #2
 8005e58:	f104 0314 	add.w	r3, r4, #20
 8005e5c:	d13c      	bne.n	8005ed8 <__gethex+0x3e4>
 8005e5e:	f8d8 2000 	ldr.w	r2, [r8]
 8005e62:	3a01      	subs	r2, #1
 8005e64:	42b2      	cmp	r2, r6
 8005e66:	d109      	bne.n	8005e7c <__gethex+0x388>
 8005e68:	1171      	asrs	r1, r6, #5
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e70:	f006 061f 	and.w	r6, r6, #31
 8005e74:	fa02 f606 	lsl.w	r6, r2, r6
 8005e78:	421e      	tst	r6, r3
 8005e7a:	d13a      	bne.n	8005ef2 <__gethex+0x3fe>
 8005e7c:	f045 0520 	orr.w	r5, r5, #32
 8005e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e82:	601c      	str	r4, [r3, #0]
 8005e84:	9b02      	ldr	r3, [sp, #8]
 8005e86:	601f      	str	r7, [r3, #0]
 8005e88:	e6b0      	b.n	8005bec <__gethex+0xf8>
 8005e8a:	4299      	cmp	r1, r3
 8005e8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005e90:	d8d9      	bhi.n	8005e46 <__gethex+0x352>
 8005e92:	68a3      	ldr	r3, [r4, #8]
 8005e94:	459b      	cmp	fp, r3
 8005e96:	db17      	blt.n	8005ec8 <__gethex+0x3d4>
 8005e98:	6861      	ldr	r1, [r4, #4]
 8005e9a:	9801      	ldr	r0, [sp, #4]
 8005e9c:	3101      	adds	r1, #1
 8005e9e:	f000 fa6f 	bl	8006380 <_Balloc>
 8005ea2:	4681      	mov	r9, r0
 8005ea4:	b918      	cbnz	r0, 8005eae <__gethex+0x3ba>
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <__gethex+0x41c>)
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	2184      	movs	r1, #132	@ 0x84
 8005eac:	e6c5      	b.n	8005c3a <__gethex+0x146>
 8005eae:	6922      	ldr	r2, [r4, #16]
 8005eb0:	3202      	adds	r2, #2
 8005eb2:	f104 010c 	add.w	r1, r4, #12
 8005eb6:	0092      	lsls	r2, r2, #2
 8005eb8:	300c      	adds	r0, #12
 8005eba:	f7ff fd7e 	bl	80059ba <memcpy>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	9801      	ldr	r0, [sp, #4]
 8005ec2:	f000 fa9d 	bl	8006400 <_Bfree>
 8005ec6:	464c      	mov	r4, r9
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ed0:	6122      	str	r2, [r4, #16]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	615a      	str	r2, [r3, #20]
 8005ed6:	e7be      	b.n	8005e56 <__gethex+0x362>
 8005ed8:	6922      	ldr	r2, [r4, #16]
 8005eda:	455a      	cmp	r2, fp
 8005edc:	dd0b      	ble.n	8005ef6 <__gethex+0x402>
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7ff fd9f 	bl	8005a24 <rshift>
 8005ee6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005eea:	3701      	adds	r7, #1
 8005eec:	42bb      	cmp	r3, r7
 8005eee:	f6ff aee0 	blt.w	8005cb2 <__gethex+0x1be>
 8005ef2:	2501      	movs	r5, #1
 8005ef4:	e7c2      	b.n	8005e7c <__gethex+0x388>
 8005ef6:	f016 061f 	ands.w	r6, r6, #31
 8005efa:	d0fa      	beq.n	8005ef2 <__gethex+0x3fe>
 8005efc:	4453      	add	r3, sl
 8005efe:	f1c6 0620 	rsb	r6, r6, #32
 8005f02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005f06:	f000 fb2d 	bl	8006564 <__hi0bits>
 8005f0a:	42b0      	cmp	r0, r6
 8005f0c:	dbe7      	blt.n	8005ede <__gethex+0x3ea>
 8005f0e:	e7f0      	b.n	8005ef2 <__gethex+0x3fe>
 8005f10:	08007ad6 	.word	0x08007ad6

08005f14 <L_shift>:
 8005f14:	f1c2 0208 	rsb	r2, r2, #8
 8005f18:	0092      	lsls	r2, r2, #2
 8005f1a:	b570      	push	{r4, r5, r6, lr}
 8005f1c:	f1c2 0620 	rsb	r6, r2, #32
 8005f20:	6843      	ldr	r3, [r0, #4]
 8005f22:	6804      	ldr	r4, [r0, #0]
 8005f24:	fa03 f506 	lsl.w	r5, r3, r6
 8005f28:	432c      	orrs	r4, r5
 8005f2a:	40d3      	lsrs	r3, r2
 8005f2c:	6004      	str	r4, [r0, #0]
 8005f2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005f32:	4288      	cmp	r0, r1
 8005f34:	d3f4      	bcc.n	8005f20 <L_shift+0xc>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}

08005f38 <__match>:
 8005f38:	b530      	push	{r4, r5, lr}
 8005f3a:	6803      	ldr	r3, [r0, #0]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f42:	b914      	cbnz	r4, 8005f4a <__match+0x12>
 8005f44:	6003      	str	r3, [r0, #0]
 8005f46:	2001      	movs	r0, #1
 8005f48:	bd30      	pop	{r4, r5, pc}
 8005f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005f52:	2d19      	cmp	r5, #25
 8005f54:	bf98      	it	ls
 8005f56:	3220      	addls	r2, #32
 8005f58:	42a2      	cmp	r2, r4
 8005f5a:	d0f0      	beq.n	8005f3e <__match+0x6>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e7f3      	b.n	8005f48 <__match+0x10>

08005f60 <__hexnan>:
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	680b      	ldr	r3, [r1, #0]
 8005f66:	6801      	ldr	r1, [r0, #0]
 8005f68:	115e      	asrs	r6, r3, #5
 8005f6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005f6e:	f013 031f 	ands.w	r3, r3, #31
 8005f72:	b087      	sub	sp, #28
 8005f74:	bf18      	it	ne
 8005f76:	3604      	addne	r6, #4
 8005f78:	2500      	movs	r5, #0
 8005f7a:	1f37      	subs	r7, r6, #4
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	4690      	mov	r8, r2
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	f846 5c04 	str.w	r5, [r6, #-4]
 8005f86:	46b9      	mov	r9, r7
 8005f88:	463c      	mov	r4, r7
 8005f8a:	9502      	str	r5, [sp, #8]
 8005f8c:	46ab      	mov	fp, r5
 8005f8e:	784a      	ldrb	r2, [r1, #1]
 8005f90:	1c4b      	adds	r3, r1, #1
 8005f92:	9303      	str	r3, [sp, #12]
 8005f94:	b342      	cbz	r2, 8005fe8 <__hexnan+0x88>
 8005f96:	4610      	mov	r0, r2
 8005f98:	9105      	str	r1, [sp, #20]
 8005f9a:	9204      	str	r2, [sp, #16]
 8005f9c:	f7ff fd94 	bl	8005ac8 <__hexdig_fun>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d151      	bne.n	8006048 <__hexnan+0xe8>
 8005fa4:	9a04      	ldr	r2, [sp, #16]
 8005fa6:	9905      	ldr	r1, [sp, #20]
 8005fa8:	2a20      	cmp	r2, #32
 8005faa:	d818      	bhi.n	8005fde <__hexnan+0x7e>
 8005fac:	9b02      	ldr	r3, [sp, #8]
 8005fae:	459b      	cmp	fp, r3
 8005fb0:	dd13      	ble.n	8005fda <__hexnan+0x7a>
 8005fb2:	454c      	cmp	r4, r9
 8005fb4:	d206      	bcs.n	8005fc4 <__hexnan+0x64>
 8005fb6:	2d07      	cmp	r5, #7
 8005fb8:	dc04      	bgt.n	8005fc4 <__hexnan+0x64>
 8005fba:	462a      	mov	r2, r5
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f7ff ffa8 	bl	8005f14 <L_shift>
 8005fc4:	4544      	cmp	r4, r8
 8005fc6:	d952      	bls.n	800606e <__hexnan+0x10e>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f1a4 0904 	sub.w	r9, r4, #4
 8005fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8005fd2:	f8cd b008 	str.w	fp, [sp, #8]
 8005fd6:	464c      	mov	r4, r9
 8005fd8:	461d      	mov	r5, r3
 8005fda:	9903      	ldr	r1, [sp, #12]
 8005fdc:	e7d7      	b.n	8005f8e <__hexnan+0x2e>
 8005fde:	2a29      	cmp	r2, #41	@ 0x29
 8005fe0:	d157      	bne.n	8006092 <__hexnan+0x132>
 8005fe2:	3102      	adds	r1, #2
 8005fe4:	f8ca 1000 	str.w	r1, [sl]
 8005fe8:	f1bb 0f00 	cmp.w	fp, #0
 8005fec:	d051      	beq.n	8006092 <__hexnan+0x132>
 8005fee:	454c      	cmp	r4, r9
 8005ff0:	d206      	bcs.n	8006000 <__hexnan+0xa0>
 8005ff2:	2d07      	cmp	r5, #7
 8005ff4:	dc04      	bgt.n	8006000 <__hexnan+0xa0>
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f7ff ff8a 	bl	8005f14 <L_shift>
 8006000:	4544      	cmp	r4, r8
 8006002:	d936      	bls.n	8006072 <__hexnan+0x112>
 8006004:	f1a8 0204 	sub.w	r2, r8, #4
 8006008:	4623      	mov	r3, r4
 800600a:	f853 1b04 	ldr.w	r1, [r3], #4
 800600e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006012:	429f      	cmp	r7, r3
 8006014:	d2f9      	bcs.n	800600a <__hexnan+0xaa>
 8006016:	1b3b      	subs	r3, r7, r4
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	3304      	adds	r3, #4
 800601e:	3401      	adds	r4, #1
 8006020:	3e03      	subs	r6, #3
 8006022:	42b4      	cmp	r4, r6
 8006024:	bf88      	it	hi
 8006026:	2304      	movhi	r3, #4
 8006028:	4443      	add	r3, r8
 800602a:	2200      	movs	r2, #0
 800602c:	f843 2b04 	str.w	r2, [r3], #4
 8006030:	429f      	cmp	r7, r3
 8006032:	d2fb      	bcs.n	800602c <__hexnan+0xcc>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	b91b      	cbnz	r3, 8006040 <__hexnan+0xe0>
 8006038:	4547      	cmp	r7, r8
 800603a:	d128      	bne.n	800608e <__hexnan+0x12e>
 800603c:	2301      	movs	r3, #1
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	2005      	movs	r0, #5
 8006042:	b007      	add	sp, #28
 8006044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006048:	3501      	adds	r5, #1
 800604a:	2d08      	cmp	r5, #8
 800604c:	f10b 0b01 	add.w	fp, fp, #1
 8006050:	dd06      	ble.n	8006060 <__hexnan+0x100>
 8006052:	4544      	cmp	r4, r8
 8006054:	d9c1      	bls.n	8005fda <__hexnan+0x7a>
 8006056:	2300      	movs	r3, #0
 8006058:	f844 3c04 	str.w	r3, [r4, #-4]
 800605c:	2501      	movs	r5, #1
 800605e:	3c04      	subs	r4, #4
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	f000 000f 	and.w	r0, r0, #15
 8006066:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800606a:	6020      	str	r0, [r4, #0]
 800606c:	e7b5      	b.n	8005fda <__hexnan+0x7a>
 800606e:	2508      	movs	r5, #8
 8006070:	e7b3      	b.n	8005fda <__hexnan+0x7a>
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0dd      	beq.n	8006034 <__hexnan+0xd4>
 8006078:	f1c3 0320 	rsb	r3, r3, #32
 800607c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006080:	40da      	lsrs	r2, r3
 8006082:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006086:	4013      	ands	r3, r2
 8006088:	f846 3c04 	str.w	r3, [r6, #-4]
 800608c:	e7d2      	b.n	8006034 <__hexnan+0xd4>
 800608e:	3f04      	subs	r7, #4
 8006090:	e7d0      	b.n	8006034 <__hexnan+0xd4>
 8006092:	2004      	movs	r0, #4
 8006094:	e7d5      	b.n	8006042 <__hexnan+0xe2>
	...

08006098 <malloc>:
 8006098:	4b02      	ldr	r3, [pc, #8]	@ (80060a4 <malloc+0xc>)
 800609a:	4601      	mov	r1, r0
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	f000 b825 	b.w	80060ec <_malloc_r>
 80060a2:	bf00      	nop
 80060a4:	20000188 	.word	0x20000188

080060a8 <sbrk_aligned>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4e0f      	ldr	r6, [pc, #60]	@ (80060e8 <sbrk_aligned+0x40>)
 80060ac:	460c      	mov	r4, r1
 80060ae:	6831      	ldr	r1, [r6, #0]
 80060b0:	4605      	mov	r5, r0
 80060b2:	b911      	cbnz	r1, 80060ba <sbrk_aligned+0x12>
 80060b4:	f000 feae 	bl	8006e14 <_sbrk_r>
 80060b8:	6030      	str	r0, [r6, #0]
 80060ba:	4621      	mov	r1, r4
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 fea9 	bl	8006e14 <_sbrk_r>
 80060c2:	1c43      	adds	r3, r0, #1
 80060c4:	d103      	bne.n	80060ce <sbrk_aligned+0x26>
 80060c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80060ca:	4620      	mov	r0, r4
 80060cc:	bd70      	pop	{r4, r5, r6, pc}
 80060ce:	1cc4      	adds	r4, r0, #3
 80060d0:	f024 0403 	bic.w	r4, r4, #3
 80060d4:	42a0      	cmp	r0, r4
 80060d6:	d0f8      	beq.n	80060ca <sbrk_aligned+0x22>
 80060d8:	1a21      	subs	r1, r4, r0
 80060da:	4628      	mov	r0, r5
 80060dc:	f000 fe9a 	bl	8006e14 <_sbrk_r>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d1f2      	bne.n	80060ca <sbrk_aligned+0x22>
 80060e4:	e7ef      	b.n	80060c6 <sbrk_aligned+0x1e>
 80060e6:	bf00      	nop
 80060e8:	20000470 	.word	0x20000470

080060ec <_malloc_r>:
 80060ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f0:	1ccd      	adds	r5, r1, #3
 80060f2:	f025 0503 	bic.w	r5, r5, #3
 80060f6:	3508      	adds	r5, #8
 80060f8:	2d0c      	cmp	r5, #12
 80060fa:	bf38      	it	cc
 80060fc:	250c      	movcc	r5, #12
 80060fe:	2d00      	cmp	r5, #0
 8006100:	4606      	mov	r6, r0
 8006102:	db01      	blt.n	8006108 <_malloc_r+0x1c>
 8006104:	42a9      	cmp	r1, r5
 8006106:	d904      	bls.n	8006112 <_malloc_r+0x26>
 8006108:	230c      	movs	r3, #12
 800610a:	6033      	str	r3, [r6, #0]
 800610c:	2000      	movs	r0, #0
 800610e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061e8 <_malloc_r+0xfc>
 8006116:	f000 f927 	bl	8006368 <__malloc_lock>
 800611a:	f8d8 3000 	ldr.w	r3, [r8]
 800611e:	461c      	mov	r4, r3
 8006120:	bb44      	cbnz	r4, 8006174 <_malloc_r+0x88>
 8006122:	4629      	mov	r1, r5
 8006124:	4630      	mov	r0, r6
 8006126:	f7ff ffbf 	bl	80060a8 <sbrk_aligned>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	4604      	mov	r4, r0
 800612e:	d158      	bne.n	80061e2 <_malloc_r+0xf6>
 8006130:	f8d8 4000 	ldr.w	r4, [r8]
 8006134:	4627      	mov	r7, r4
 8006136:	2f00      	cmp	r7, #0
 8006138:	d143      	bne.n	80061c2 <_malloc_r+0xd6>
 800613a:	2c00      	cmp	r4, #0
 800613c:	d04b      	beq.n	80061d6 <_malloc_r+0xea>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	4639      	mov	r1, r7
 8006142:	4630      	mov	r0, r6
 8006144:	eb04 0903 	add.w	r9, r4, r3
 8006148:	f000 fe64 	bl	8006e14 <_sbrk_r>
 800614c:	4581      	cmp	r9, r0
 800614e:	d142      	bne.n	80061d6 <_malloc_r+0xea>
 8006150:	6821      	ldr	r1, [r4, #0]
 8006152:	1a6d      	subs	r5, r5, r1
 8006154:	4629      	mov	r1, r5
 8006156:	4630      	mov	r0, r6
 8006158:	f7ff ffa6 	bl	80060a8 <sbrk_aligned>
 800615c:	3001      	adds	r0, #1
 800615e:	d03a      	beq.n	80061d6 <_malloc_r+0xea>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	442b      	add	r3, r5
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	f8d8 3000 	ldr.w	r3, [r8]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	bb62      	cbnz	r2, 80061c8 <_malloc_r+0xdc>
 800616e:	f8c8 7000 	str.w	r7, [r8]
 8006172:	e00f      	b.n	8006194 <_malloc_r+0xa8>
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	1b52      	subs	r2, r2, r5
 8006178:	d420      	bmi.n	80061bc <_malloc_r+0xd0>
 800617a:	2a0b      	cmp	r2, #11
 800617c:	d917      	bls.n	80061ae <_malloc_r+0xc2>
 800617e:	1961      	adds	r1, r4, r5
 8006180:	42a3      	cmp	r3, r4
 8006182:	6025      	str	r5, [r4, #0]
 8006184:	bf18      	it	ne
 8006186:	6059      	strne	r1, [r3, #4]
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	bf08      	it	eq
 800618c:	f8c8 1000 	streq.w	r1, [r8]
 8006190:	5162      	str	r2, [r4, r5]
 8006192:	604b      	str	r3, [r1, #4]
 8006194:	4630      	mov	r0, r6
 8006196:	f000 f8ed 	bl	8006374 <__malloc_unlock>
 800619a:	f104 000b 	add.w	r0, r4, #11
 800619e:	1d23      	adds	r3, r4, #4
 80061a0:	f020 0007 	bic.w	r0, r0, #7
 80061a4:	1ac2      	subs	r2, r0, r3
 80061a6:	bf1c      	itt	ne
 80061a8:	1a1b      	subne	r3, r3, r0
 80061aa:	50a3      	strne	r3, [r4, r2]
 80061ac:	e7af      	b.n	800610e <_malloc_r+0x22>
 80061ae:	6862      	ldr	r2, [r4, #4]
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	bf0c      	ite	eq
 80061b4:	f8c8 2000 	streq.w	r2, [r8]
 80061b8:	605a      	strne	r2, [r3, #4]
 80061ba:	e7eb      	b.n	8006194 <_malloc_r+0xa8>
 80061bc:	4623      	mov	r3, r4
 80061be:	6864      	ldr	r4, [r4, #4]
 80061c0:	e7ae      	b.n	8006120 <_malloc_r+0x34>
 80061c2:	463c      	mov	r4, r7
 80061c4:	687f      	ldr	r7, [r7, #4]
 80061c6:	e7b6      	b.n	8006136 <_malloc_r+0x4a>
 80061c8:	461a      	mov	r2, r3
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d1fb      	bne.n	80061c8 <_malloc_r+0xdc>
 80061d0:	2300      	movs	r3, #0
 80061d2:	6053      	str	r3, [r2, #4]
 80061d4:	e7de      	b.n	8006194 <_malloc_r+0xa8>
 80061d6:	230c      	movs	r3, #12
 80061d8:	6033      	str	r3, [r6, #0]
 80061da:	4630      	mov	r0, r6
 80061dc:	f000 f8ca 	bl	8006374 <__malloc_unlock>
 80061e0:	e794      	b.n	800610c <_malloc_r+0x20>
 80061e2:	6005      	str	r5, [r0, #0]
 80061e4:	e7d6      	b.n	8006194 <_malloc_r+0xa8>
 80061e6:	bf00      	nop
 80061e8:	20000474 	.word	0x20000474

080061ec <__ascii_mbtowc>:
 80061ec:	b082      	sub	sp, #8
 80061ee:	b901      	cbnz	r1, 80061f2 <__ascii_mbtowc+0x6>
 80061f0:	a901      	add	r1, sp, #4
 80061f2:	b142      	cbz	r2, 8006206 <__ascii_mbtowc+0x1a>
 80061f4:	b14b      	cbz	r3, 800620a <__ascii_mbtowc+0x1e>
 80061f6:	7813      	ldrb	r3, [r2, #0]
 80061f8:	600b      	str	r3, [r1, #0]
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	1e10      	subs	r0, r2, #0
 80061fe:	bf18      	it	ne
 8006200:	2001      	movne	r0, #1
 8006202:	b002      	add	sp, #8
 8006204:	4770      	bx	lr
 8006206:	4610      	mov	r0, r2
 8006208:	e7fb      	b.n	8006202 <__ascii_mbtowc+0x16>
 800620a:	f06f 0001 	mvn.w	r0, #1
 800620e:	e7f8      	b.n	8006202 <__ascii_mbtowc+0x16>

08006210 <__sflush_r>:
 8006210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006218:	0716      	lsls	r6, r2, #28
 800621a:	4605      	mov	r5, r0
 800621c:	460c      	mov	r4, r1
 800621e:	d454      	bmi.n	80062ca <__sflush_r+0xba>
 8006220:	684b      	ldr	r3, [r1, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	dc02      	bgt.n	800622c <__sflush_r+0x1c>
 8006226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	dd48      	ble.n	80062be <__sflush_r+0xae>
 800622c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800622e:	2e00      	cmp	r6, #0
 8006230:	d045      	beq.n	80062be <__sflush_r+0xae>
 8006232:	2300      	movs	r3, #0
 8006234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006238:	682f      	ldr	r7, [r5, #0]
 800623a:	6a21      	ldr	r1, [r4, #32]
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	d030      	beq.n	80062a2 <__sflush_r+0x92>
 8006240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006242:	89a3      	ldrh	r3, [r4, #12]
 8006244:	0759      	lsls	r1, r3, #29
 8006246:	d505      	bpl.n	8006254 <__sflush_r+0x44>
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	1ad2      	subs	r2, r2, r3
 800624c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800624e:	b10b      	cbz	r3, 8006254 <__sflush_r+0x44>
 8006250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	2300      	movs	r3, #0
 8006256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006258:	6a21      	ldr	r1, [r4, #32]
 800625a:	4628      	mov	r0, r5
 800625c:	47b0      	blx	r6
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	d106      	bne.n	8006272 <__sflush_r+0x62>
 8006264:	6829      	ldr	r1, [r5, #0]
 8006266:	291d      	cmp	r1, #29
 8006268:	d82b      	bhi.n	80062c2 <__sflush_r+0xb2>
 800626a:	4a2a      	ldr	r2, [pc, #168]	@ (8006314 <__sflush_r+0x104>)
 800626c:	410a      	asrs	r2, r1
 800626e:	07d6      	lsls	r6, r2, #31
 8006270:	d427      	bmi.n	80062c2 <__sflush_r+0xb2>
 8006272:	2200      	movs	r2, #0
 8006274:	6062      	str	r2, [r4, #4]
 8006276:	04d9      	lsls	r1, r3, #19
 8006278:	6922      	ldr	r2, [r4, #16]
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	d504      	bpl.n	8006288 <__sflush_r+0x78>
 800627e:	1c42      	adds	r2, r0, #1
 8006280:	d101      	bne.n	8006286 <__sflush_r+0x76>
 8006282:	682b      	ldr	r3, [r5, #0]
 8006284:	b903      	cbnz	r3, 8006288 <__sflush_r+0x78>
 8006286:	6560      	str	r0, [r4, #84]	@ 0x54
 8006288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800628a:	602f      	str	r7, [r5, #0]
 800628c:	b1b9      	cbz	r1, 80062be <__sflush_r+0xae>
 800628e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006292:	4299      	cmp	r1, r3
 8006294:	d002      	beq.n	800629c <__sflush_r+0x8c>
 8006296:	4628      	mov	r0, r5
 8006298:	f000 fdfa 	bl	8006e90 <_free_r>
 800629c:	2300      	movs	r3, #0
 800629e:	6363      	str	r3, [r4, #52]	@ 0x34
 80062a0:	e00d      	b.n	80062be <__sflush_r+0xae>
 80062a2:	2301      	movs	r3, #1
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b0      	blx	r6
 80062a8:	4602      	mov	r2, r0
 80062aa:	1c50      	adds	r0, r2, #1
 80062ac:	d1c9      	bne.n	8006242 <__sflush_r+0x32>
 80062ae:	682b      	ldr	r3, [r5, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0c6      	beq.n	8006242 <__sflush_r+0x32>
 80062b4:	2b1d      	cmp	r3, #29
 80062b6:	d001      	beq.n	80062bc <__sflush_r+0xac>
 80062b8:	2b16      	cmp	r3, #22
 80062ba:	d11e      	bne.n	80062fa <__sflush_r+0xea>
 80062bc:	602f      	str	r7, [r5, #0]
 80062be:	2000      	movs	r0, #0
 80062c0:	e022      	b.n	8006308 <__sflush_r+0xf8>
 80062c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062c6:	b21b      	sxth	r3, r3
 80062c8:	e01b      	b.n	8006302 <__sflush_r+0xf2>
 80062ca:	690f      	ldr	r7, [r1, #16]
 80062cc:	2f00      	cmp	r7, #0
 80062ce:	d0f6      	beq.n	80062be <__sflush_r+0xae>
 80062d0:	0793      	lsls	r3, r2, #30
 80062d2:	680e      	ldr	r6, [r1, #0]
 80062d4:	bf08      	it	eq
 80062d6:	694b      	ldreq	r3, [r1, #20]
 80062d8:	600f      	str	r7, [r1, #0]
 80062da:	bf18      	it	ne
 80062dc:	2300      	movne	r3, #0
 80062de:	eba6 0807 	sub.w	r8, r6, r7
 80062e2:	608b      	str	r3, [r1, #8]
 80062e4:	f1b8 0f00 	cmp.w	r8, #0
 80062e8:	dde9      	ble.n	80062be <__sflush_r+0xae>
 80062ea:	6a21      	ldr	r1, [r4, #32]
 80062ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062ee:	4643      	mov	r3, r8
 80062f0:	463a      	mov	r2, r7
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b0      	blx	r6
 80062f6:	2800      	cmp	r0, #0
 80062f8:	dc08      	bgt.n	800630c <__sflush_r+0xfc>
 80062fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006302:	81a3      	strh	r3, [r4, #12]
 8006304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800630c:	4407      	add	r7, r0
 800630e:	eba8 0800 	sub.w	r8, r8, r0
 8006312:	e7e7      	b.n	80062e4 <__sflush_r+0xd4>
 8006314:	dfbffffe 	.word	0xdfbffffe

08006318 <_fflush_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	690b      	ldr	r3, [r1, #16]
 800631c:	4605      	mov	r5, r0
 800631e:	460c      	mov	r4, r1
 8006320:	b913      	cbnz	r3, 8006328 <_fflush_r+0x10>
 8006322:	2500      	movs	r5, #0
 8006324:	4628      	mov	r0, r5
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	b118      	cbz	r0, 8006332 <_fflush_r+0x1a>
 800632a:	6a03      	ldr	r3, [r0, #32]
 800632c:	b90b      	cbnz	r3, 8006332 <_fflush_r+0x1a>
 800632e:	f7fe fc5d 	bl	8004bec <__sinit>
 8006332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f3      	beq.n	8006322 <_fflush_r+0xa>
 800633a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800633c:	07d0      	lsls	r0, r2, #31
 800633e:	d404      	bmi.n	800634a <_fflush_r+0x32>
 8006340:	0599      	lsls	r1, r3, #22
 8006342:	d402      	bmi.n	800634a <_fflush_r+0x32>
 8006344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006346:	f7ff fb36 	bl	80059b6 <__retarget_lock_acquire_recursive>
 800634a:	4628      	mov	r0, r5
 800634c:	4621      	mov	r1, r4
 800634e:	f7ff ff5f 	bl	8006210 <__sflush_r>
 8006352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006354:	07da      	lsls	r2, r3, #31
 8006356:	4605      	mov	r5, r0
 8006358:	d4e4      	bmi.n	8006324 <_fflush_r+0xc>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	059b      	lsls	r3, r3, #22
 800635e:	d4e1      	bmi.n	8006324 <_fflush_r+0xc>
 8006360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006362:	f7ff fb29 	bl	80059b8 <__retarget_lock_release_recursive>
 8006366:	e7dd      	b.n	8006324 <_fflush_r+0xc>

08006368 <__malloc_lock>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__malloc_lock+0x8>)
 800636a:	f7ff bb24 	b.w	80059b6 <__retarget_lock_acquire_recursive>
 800636e:	bf00      	nop
 8006370:	2000046c 	.word	0x2000046c

08006374 <__malloc_unlock>:
 8006374:	4801      	ldr	r0, [pc, #4]	@ (800637c <__malloc_unlock+0x8>)
 8006376:	f7ff bb1f 	b.w	80059b8 <__retarget_lock_release_recursive>
 800637a:	bf00      	nop
 800637c:	2000046c 	.word	0x2000046c

08006380 <_Balloc>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	69c6      	ldr	r6, [r0, #28]
 8006384:	4604      	mov	r4, r0
 8006386:	460d      	mov	r5, r1
 8006388:	b976      	cbnz	r6, 80063a8 <_Balloc+0x28>
 800638a:	2010      	movs	r0, #16
 800638c:	f7ff fe84 	bl	8006098 <malloc>
 8006390:	4602      	mov	r2, r0
 8006392:	61e0      	str	r0, [r4, #28]
 8006394:	b920      	cbnz	r0, 80063a0 <_Balloc+0x20>
 8006396:	4b18      	ldr	r3, [pc, #96]	@ (80063f8 <_Balloc+0x78>)
 8006398:	4818      	ldr	r0, [pc, #96]	@ (80063fc <_Balloc+0x7c>)
 800639a:	216b      	movs	r1, #107	@ 0x6b
 800639c:	f7ff fb24 	bl	80059e8 <__assert_func>
 80063a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a4:	6006      	str	r6, [r0, #0]
 80063a6:	60c6      	str	r6, [r0, #12]
 80063a8:	69e6      	ldr	r6, [r4, #28]
 80063aa:	68f3      	ldr	r3, [r6, #12]
 80063ac:	b183      	cbz	r3, 80063d0 <_Balloc+0x50>
 80063ae:	69e3      	ldr	r3, [r4, #28]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063b6:	b9b8      	cbnz	r0, 80063e8 <_Balloc+0x68>
 80063b8:	2101      	movs	r1, #1
 80063ba:	fa01 f605 	lsl.w	r6, r1, r5
 80063be:	1d72      	adds	r2, r6, #5
 80063c0:	0092      	lsls	r2, r2, #2
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fd4f 	bl	8006e66 <_calloc_r>
 80063c8:	b160      	cbz	r0, 80063e4 <_Balloc+0x64>
 80063ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063ce:	e00e      	b.n	80063ee <_Balloc+0x6e>
 80063d0:	2221      	movs	r2, #33	@ 0x21
 80063d2:	2104      	movs	r1, #4
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fd46 	bl	8006e66 <_calloc_r>
 80063da:	69e3      	ldr	r3, [r4, #28]
 80063dc:	60f0      	str	r0, [r6, #12]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e4      	bne.n	80063ae <_Balloc+0x2e>
 80063e4:	2000      	movs	r0, #0
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	6802      	ldr	r2, [r0, #0]
 80063ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ee:	2300      	movs	r3, #0
 80063f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063f4:	e7f7      	b.n	80063e6 <_Balloc+0x66>
 80063f6:	bf00      	nop
 80063f8:	08007920 	.word	0x08007920
 80063fc:	08007b47 	.word	0x08007b47

08006400 <_Bfree>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	69c6      	ldr	r6, [r0, #28]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b976      	cbnz	r6, 8006428 <_Bfree+0x28>
 800640a:	2010      	movs	r0, #16
 800640c:	f7ff fe44 	bl	8006098 <malloc>
 8006410:	4602      	mov	r2, r0
 8006412:	61e8      	str	r0, [r5, #28]
 8006414:	b920      	cbnz	r0, 8006420 <_Bfree+0x20>
 8006416:	4b09      	ldr	r3, [pc, #36]	@ (800643c <_Bfree+0x3c>)
 8006418:	4809      	ldr	r0, [pc, #36]	@ (8006440 <_Bfree+0x40>)
 800641a:	218f      	movs	r1, #143	@ 0x8f
 800641c:	f7ff fae4 	bl	80059e8 <__assert_func>
 8006420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006424:	6006      	str	r6, [r0, #0]
 8006426:	60c6      	str	r6, [r0, #12]
 8006428:	b13c      	cbz	r4, 800643a <_Bfree+0x3a>
 800642a:	69eb      	ldr	r3, [r5, #28]
 800642c:	6862      	ldr	r2, [r4, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006434:	6021      	str	r1, [r4, #0]
 8006436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	08007920 	.word	0x08007920
 8006440:	08007b47 	.word	0x08007b47

08006444 <__multadd>:
 8006444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006448:	690d      	ldr	r5, [r1, #16]
 800644a:	4607      	mov	r7, r0
 800644c:	460c      	mov	r4, r1
 800644e:	461e      	mov	r6, r3
 8006450:	f101 0c14 	add.w	ip, r1, #20
 8006454:	2000      	movs	r0, #0
 8006456:	f8dc 3000 	ldr.w	r3, [ip]
 800645a:	b299      	uxth	r1, r3
 800645c:	fb02 6101 	mla	r1, r2, r1, r6
 8006460:	0c1e      	lsrs	r6, r3, #16
 8006462:	0c0b      	lsrs	r3, r1, #16
 8006464:	fb02 3306 	mla	r3, r2, r6, r3
 8006468:	b289      	uxth	r1, r1
 800646a:	3001      	adds	r0, #1
 800646c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006470:	4285      	cmp	r5, r0
 8006472:	f84c 1b04 	str.w	r1, [ip], #4
 8006476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800647a:	dcec      	bgt.n	8006456 <__multadd+0x12>
 800647c:	b30e      	cbz	r6, 80064c2 <__multadd+0x7e>
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	42ab      	cmp	r3, r5
 8006482:	dc19      	bgt.n	80064b8 <__multadd+0x74>
 8006484:	6861      	ldr	r1, [r4, #4]
 8006486:	4638      	mov	r0, r7
 8006488:	3101      	adds	r1, #1
 800648a:	f7ff ff79 	bl	8006380 <_Balloc>
 800648e:	4680      	mov	r8, r0
 8006490:	b928      	cbnz	r0, 800649e <__multadd+0x5a>
 8006492:	4602      	mov	r2, r0
 8006494:	4b0c      	ldr	r3, [pc, #48]	@ (80064c8 <__multadd+0x84>)
 8006496:	480d      	ldr	r0, [pc, #52]	@ (80064cc <__multadd+0x88>)
 8006498:	21ba      	movs	r1, #186	@ 0xba
 800649a:	f7ff faa5 	bl	80059e8 <__assert_func>
 800649e:	6922      	ldr	r2, [r4, #16]
 80064a0:	3202      	adds	r2, #2
 80064a2:	f104 010c 	add.w	r1, r4, #12
 80064a6:	0092      	lsls	r2, r2, #2
 80064a8:	300c      	adds	r0, #12
 80064aa:	f7ff fa86 	bl	80059ba <memcpy>
 80064ae:	4621      	mov	r1, r4
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff ffa5 	bl	8006400 <_Bfree>
 80064b6:	4644      	mov	r4, r8
 80064b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064bc:	3501      	adds	r5, #1
 80064be:	615e      	str	r6, [r3, #20]
 80064c0:	6125      	str	r5, [r4, #16]
 80064c2:	4620      	mov	r0, r4
 80064c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c8:	08007ad6 	.word	0x08007ad6
 80064cc:	08007b47 	.word	0x08007b47

080064d0 <__s2b>:
 80064d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	460c      	mov	r4, r1
 80064d6:	4615      	mov	r5, r2
 80064d8:	461f      	mov	r7, r3
 80064da:	2209      	movs	r2, #9
 80064dc:	3308      	adds	r3, #8
 80064de:	4606      	mov	r6, r0
 80064e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e4:	2100      	movs	r1, #0
 80064e6:	2201      	movs	r2, #1
 80064e8:	429a      	cmp	r2, r3
 80064ea:	db09      	blt.n	8006500 <__s2b+0x30>
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7ff ff47 	bl	8006380 <_Balloc>
 80064f2:	b940      	cbnz	r0, 8006506 <__s2b+0x36>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b19      	ldr	r3, [pc, #100]	@ (800655c <__s2b+0x8c>)
 80064f8:	4819      	ldr	r0, [pc, #100]	@ (8006560 <__s2b+0x90>)
 80064fa:	21d3      	movs	r1, #211	@ 0xd3
 80064fc:	f7ff fa74 	bl	80059e8 <__assert_func>
 8006500:	0052      	lsls	r2, r2, #1
 8006502:	3101      	adds	r1, #1
 8006504:	e7f0      	b.n	80064e8 <__s2b+0x18>
 8006506:	9b08      	ldr	r3, [sp, #32]
 8006508:	6143      	str	r3, [r0, #20]
 800650a:	2d09      	cmp	r5, #9
 800650c:	f04f 0301 	mov.w	r3, #1
 8006510:	6103      	str	r3, [r0, #16]
 8006512:	dd16      	ble.n	8006542 <__s2b+0x72>
 8006514:	f104 0909 	add.w	r9, r4, #9
 8006518:	46c8      	mov	r8, r9
 800651a:	442c      	add	r4, r5
 800651c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006520:	4601      	mov	r1, r0
 8006522:	3b30      	subs	r3, #48	@ 0x30
 8006524:	220a      	movs	r2, #10
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff ff8c 	bl	8006444 <__multadd>
 800652c:	45a0      	cmp	r8, r4
 800652e:	d1f5      	bne.n	800651c <__s2b+0x4c>
 8006530:	f1a5 0408 	sub.w	r4, r5, #8
 8006534:	444c      	add	r4, r9
 8006536:	1b2d      	subs	r5, r5, r4
 8006538:	1963      	adds	r3, r4, r5
 800653a:	42bb      	cmp	r3, r7
 800653c:	db04      	blt.n	8006548 <__s2b+0x78>
 800653e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006542:	340a      	adds	r4, #10
 8006544:	2509      	movs	r5, #9
 8006546:	e7f6      	b.n	8006536 <__s2b+0x66>
 8006548:	f814 3b01 	ldrb.w	r3, [r4], #1
 800654c:	4601      	mov	r1, r0
 800654e:	3b30      	subs	r3, #48	@ 0x30
 8006550:	220a      	movs	r2, #10
 8006552:	4630      	mov	r0, r6
 8006554:	f7ff ff76 	bl	8006444 <__multadd>
 8006558:	e7ee      	b.n	8006538 <__s2b+0x68>
 800655a:	bf00      	nop
 800655c:	08007ad6 	.word	0x08007ad6
 8006560:	08007b47 	.word	0x08007b47

08006564 <__hi0bits>:
 8006564:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006568:	4603      	mov	r3, r0
 800656a:	bf36      	itet	cc
 800656c:	0403      	lslcc	r3, r0, #16
 800656e:	2000      	movcs	r0, #0
 8006570:	2010      	movcc	r0, #16
 8006572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006576:	bf3c      	itt	cc
 8006578:	021b      	lslcc	r3, r3, #8
 800657a:	3008      	addcc	r0, #8
 800657c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006580:	bf3c      	itt	cc
 8006582:	011b      	lslcc	r3, r3, #4
 8006584:	3004      	addcc	r0, #4
 8006586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658a:	bf3c      	itt	cc
 800658c:	009b      	lslcc	r3, r3, #2
 800658e:	3002      	addcc	r0, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	db05      	blt.n	80065a0 <__hi0bits+0x3c>
 8006594:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006598:	f100 0001 	add.w	r0, r0, #1
 800659c:	bf08      	it	eq
 800659e:	2020      	moveq	r0, #32
 80065a0:	4770      	bx	lr

080065a2 <__lo0bits>:
 80065a2:	6803      	ldr	r3, [r0, #0]
 80065a4:	4602      	mov	r2, r0
 80065a6:	f013 0007 	ands.w	r0, r3, #7
 80065aa:	d00b      	beq.n	80065c4 <__lo0bits+0x22>
 80065ac:	07d9      	lsls	r1, r3, #31
 80065ae:	d421      	bmi.n	80065f4 <__lo0bits+0x52>
 80065b0:	0798      	lsls	r0, r3, #30
 80065b2:	bf49      	itett	mi
 80065b4:	085b      	lsrmi	r3, r3, #1
 80065b6:	089b      	lsrpl	r3, r3, #2
 80065b8:	2001      	movmi	r0, #1
 80065ba:	6013      	strmi	r3, [r2, #0]
 80065bc:	bf5c      	itt	pl
 80065be:	6013      	strpl	r3, [r2, #0]
 80065c0:	2002      	movpl	r0, #2
 80065c2:	4770      	bx	lr
 80065c4:	b299      	uxth	r1, r3
 80065c6:	b909      	cbnz	r1, 80065cc <__lo0bits+0x2a>
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	2010      	movs	r0, #16
 80065cc:	b2d9      	uxtb	r1, r3
 80065ce:	b909      	cbnz	r1, 80065d4 <__lo0bits+0x32>
 80065d0:	3008      	adds	r0, #8
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	0719      	lsls	r1, r3, #28
 80065d6:	bf04      	itt	eq
 80065d8:	091b      	lsreq	r3, r3, #4
 80065da:	3004      	addeq	r0, #4
 80065dc:	0799      	lsls	r1, r3, #30
 80065de:	bf04      	itt	eq
 80065e0:	089b      	lsreq	r3, r3, #2
 80065e2:	3002      	addeq	r0, #2
 80065e4:	07d9      	lsls	r1, r3, #31
 80065e6:	d403      	bmi.n	80065f0 <__lo0bits+0x4e>
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	f100 0001 	add.w	r0, r0, #1
 80065ee:	d003      	beq.n	80065f8 <__lo0bits+0x56>
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	4770      	bx	lr
 80065f4:	2000      	movs	r0, #0
 80065f6:	4770      	bx	lr
 80065f8:	2020      	movs	r0, #32
 80065fa:	4770      	bx	lr

080065fc <__i2b>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	460c      	mov	r4, r1
 8006600:	2101      	movs	r1, #1
 8006602:	f7ff febd 	bl	8006380 <_Balloc>
 8006606:	4602      	mov	r2, r0
 8006608:	b928      	cbnz	r0, 8006616 <__i2b+0x1a>
 800660a:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <__i2b+0x24>)
 800660c:	4805      	ldr	r0, [pc, #20]	@ (8006624 <__i2b+0x28>)
 800660e:	f240 1145 	movw	r1, #325	@ 0x145
 8006612:	f7ff f9e9 	bl	80059e8 <__assert_func>
 8006616:	2301      	movs	r3, #1
 8006618:	6144      	str	r4, [r0, #20]
 800661a:	6103      	str	r3, [r0, #16]
 800661c:	bd10      	pop	{r4, pc}
 800661e:	bf00      	nop
 8006620:	08007ad6 	.word	0x08007ad6
 8006624:	08007b47 	.word	0x08007b47

08006628 <__multiply>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	4614      	mov	r4, r2
 800662e:	690a      	ldr	r2, [r1, #16]
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	429a      	cmp	r2, r3
 8006634:	bfa8      	it	ge
 8006636:	4623      	movge	r3, r4
 8006638:	460f      	mov	r7, r1
 800663a:	bfa4      	itt	ge
 800663c:	460c      	movge	r4, r1
 800663e:	461f      	movge	r7, r3
 8006640:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006644:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006648:	68a3      	ldr	r3, [r4, #8]
 800664a:	6861      	ldr	r1, [r4, #4]
 800664c:	eb0a 0609 	add.w	r6, sl, r9
 8006650:	42b3      	cmp	r3, r6
 8006652:	b085      	sub	sp, #20
 8006654:	bfb8      	it	lt
 8006656:	3101      	addlt	r1, #1
 8006658:	f7ff fe92 	bl	8006380 <_Balloc>
 800665c:	b930      	cbnz	r0, 800666c <__multiply+0x44>
 800665e:	4602      	mov	r2, r0
 8006660:	4b44      	ldr	r3, [pc, #272]	@ (8006774 <__multiply+0x14c>)
 8006662:	4845      	ldr	r0, [pc, #276]	@ (8006778 <__multiply+0x150>)
 8006664:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006668:	f7ff f9be 	bl	80059e8 <__assert_func>
 800666c:	f100 0514 	add.w	r5, r0, #20
 8006670:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006674:	462b      	mov	r3, r5
 8006676:	2200      	movs	r2, #0
 8006678:	4543      	cmp	r3, r8
 800667a:	d321      	bcc.n	80066c0 <__multiply+0x98>
 800667c:	f107 0114 	add.w	r1, r7, #20
 8006680:	f104 0214 	add.w	r2, r4, #20
 8006684:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006688:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800668c:	9302      	str	r3, [sp, #8]
 800668e:	1b13      	subs	r3, r2, r4
 8006690:	3b15      	subs	r3, #21
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	3304      	adds	r3, #4
 8006698:	f104 0715 	add.w	r7, r4, #21
 800669c:	42ba      	cmp	r2, r7
 800669e:	bf38      	it	cc
 80066a0:	2304      	movcc	r3, #4
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	9b02      	ldr	r3, [sp, #8]
 80066a6:	9103      	str	r1, [sp, #12]
 80066a8:	428b      	cmp	r3, r1
 80066aa:	d80c      	bhi.n	80066c6 <__multiply+0x9e>
 80066ac:	2e00      	cmp	r6, #0
 80066ae:	dd03      	ble.n	80066b8 <__multiply+0x90>
 80066b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05b      	beq.n	8006770 <__multiply+0x148>
 80066b8:	6106      	str	r6, [r0, #16]
 80066ba:	b005      	add	sp, #20
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	f843 2b04 	str.w	r2, [r3], #4
 80066c4:	e7d8      	b.n	8006678 <__multiply+0x50>
 80066c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80066ca:	f1ba 0f00 	cmp.w	sl, #0
 80066ce:	d024      	beq.n	800671a <__multiply+0xf2>
 80066d0:	f104 0e14 	add.w	lr, r4, #20
 80066d4:	46a9      	mov	r9, r5
 80066d6:	f04f 0c00 	mov.w	ip, #0
 80066da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066de:	f8d9 3000 	ldr.w	r3, [r9]
 80066e2:	fa1f fb87 	uxth.w	fp, r7
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80066ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80066f0:	f8d9 7000 	ldr.w	r7, [r9]
 80066f4:	4463      	add	r3, ip
 80066f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80066fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006708:	4572      	cmp	r2, lr
 800670a:	f849 3b04 	str.w	r3, [r9], #4
 800670e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006712:	d8e2      	bhi.n	80066da <__multiply+0xb2>
 8006714:	9b01      	ldr	r3, [sp, #4]
 8006716:	f845 c003 	str.w	ip, [r5, r3]
 800671a:	9b03      	ldr	r3, [sp, #12]
 800671c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006720:	3104      	adds	r1, #4
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	d021      	beq.n	800676c <__multiply+0x144>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	f104 0c14 	add.w	ip, r4, #20
 800672e:	46ae      	mov	lr, r5
 8006730:	f04f 0a00 	mov.w	sl, #0
 8006734:	f8bc b000 	ldrh.w	fp, [ip]
 8006738:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800673c:	fb09 770b 	mla	r7, r9, fp, r7
 8006740:	4457      	add	r7, sl
 8006742:	b29b      	uxth	r3, r3
 8006744:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006748:	f84e 3b04 	str.w	r3, [lr], #4
 800674c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006750:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006754:	f8be 3000 	ldrh.w	r3, [lr]
 8006758:	fb09 330a 	mla	r3, r9, sl, r3
 800675c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006760:	4562      	cmp	r2, ip
 8006762:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006766:	d8e5      	bhi.n	8006734 <__multiply+0x10c>
 8006768:	9f01      	ldr	r7, [sp, #4]
 800676a:	51eb      	str	r3, [r5, r7]
 800676c:	3504      	adds	r5, #4
 800676e:	e799      	b.n	80066a4 <__multiply+0x7c>
 8006770:	3e01      	subs	r6, #1
 8006772:	e79b      	b.n	80066ac <__multiply+0x84>
 8006774:	08007ad6 	.word	0x08007ad6
 8006778:	08007b47 	.word	0x08007b47

0800677c <__pow5mult>:
 800677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006780:	4615      	mov	r5, r2
 8006782:	f012 0203 	ands.w	r2, r2, #3
 8006786:	4607      	mov	r7, r0
 8006788:	460e      	mov	r6, r1
 800678a:	d007      	beq.n	800679c <__pow5mult+0x20>
 800678c:	4c25      	ldr	r4, [pc, #148]	@ (8006824 <__pow5mult+0xa8>)
 800678e:	3a01      	subs	r2, #1
 8006790:	2300      	movs	r3, #0
 8006792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006796:	f7ff fe55 	bl	8006444 <__multadd>
 800679a:	4606      	mov	r6, r0
 800679c:	10ad      	asrs	r5, r5, #2
 800679e:	d03d      	beq.n	800681c <__pow5mult+0xa0>
 80067a0:	69fc      	ldr	r4, [r7, #28]
 80067a2:	b97c      	cbnz	r4, 80067c4 <__pow5mult+0x48>
 80067a4:	2010      	movs	r0, #16
 80067a6:	f7ff fc77 	bl	8006098 <malloc>
 80067aa:	4602      	mov	r2, r0
 80067ac:	61f8      	str	r0, [r7, #28]
 80067ae:	b928      	cbnz	r0, 80067bc <__pow5mult+0x40>
 80067b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <__pow5mult+0xac>)
 80067b2:	481e      	ldr	r0, [pc, #120]	@ (800682c <__pow5mult+0xb0>)
 80067b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067b8:	f7ff f916 	bl	80059e8 <__assert_func>
 80067bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067c0:	6004      	str	r4, [r0, #0]
 80067c2:	60c4      	str	r4, [r0, #12]
 80067c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067cc:	b94c      	cbnz	r4, 80067e2 <__pow5mult+0x66>
 80067ce:	f240 2171 	movw	r1, #625	@ 0x271
 80067d2:	4638      	mov	r0, r7
 80067d4:	f7ff ff12 	bl	80065fc <__i2b>
 80067d8:	2300      	movs	r3, #0
 80067da:	f8c8 0008 	str.w	r0, [r8, #8]
 80067de:	4604      	mov	r4, r0
 80067e0:	6003      	str	r3, [r0, #0]
 80067e2:	f04f 0900 	mov.w	r9, #0
 80067e6:	07eb      	lsls	r3, r5, #31
 80067e8:	d50a      	bpl.n	8006800 <__pow5mult+0x84>
 80067ea:	4631      	mov	r1, r6
 80067ec:	4622      	mov	r2, r4
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7ff ff1a 	bl	8006628 <__multiply>
 80067f4:	4631      	mov	r1, r6
 80067f6:	4680      	mov	r8, r0
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff fe01 	bl	8006400 <_Bfree>
 80067fe:	4646      	mov	r6, r8
 8006800:	106d      	asrs	r5, r5, #1
 8006802:	d00b      	beq.n	800681c <__pow5mult+0xa0>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	b938      	cbnz	r0, 8006818 <__pow5mult+0x9c>
 8006808:	4622      	mov	r2, r4
 800680a:	4621      	mov	r1, r4
 800680c:	4638      	mov	r0, r7
 800680e:	f7ff ff0b 	bl	8006628 <__multiply>
 8006812:	6020      	str	r0, [r4, #0]
 8006814:	f8c0 9000 	str.w	r9, [r0]
 8006818:	4604      	mov	r4, r0
 800681a:	e7e4      	b.n	80067e6 <__pow5mult+0x6a>
 800681c:	4630      	mov	r0, r6
 800681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006822:	bf00      	nop
 8006824:	08007ba0 	.word	0x08007ba0
 8006828:	08007920 	.word	0x08007920
 800682c:	08007b47 	.word	0x08007b47

08006830 <__lshift>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	6849      	ldr	r1, [r1, #4]
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800683e:	68a3      	ldr	r3, [r4, #8]
 8006840:	4607      	mov	r7, r0
 8006842:	4691      	mov	r9, r2
 8006844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006848:	f108 0601 	add.w	r6, r8, #1
 800684c:	42b3      	cmp	r3, r6
 800684e:	db0b      	blt.n	8006868 <__lshift+0x38>
 8006850:	4638      	mov	r0, r7
 8006852:	f7ff fd95 	bl	8006380 <_Balloc>
 8006856:	4605      	mov	r5, r0
 8006858:	b948      	cbnz	r0, 800686e <__lshift+0x3e>
 800685a:	4602      	mov	r2, r0
 800685c:	4b28      	ldr	r3, [pc, #160]	@ (8006900 <__lshift+0xd0>)
 800685e:	4829      	ldr	r0, [pc, #164]	@ (8006904 <__lshift+0xd4>)
 8006860:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006864:	f7ff f8c0 	bl	80059e8 <__assert_func>
 8006868:	3101      	adds	r1, #1
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	e7ee      	b.n	800684c <__lshift+0x1c>
 800686e:	2300      	movs	r3, #0
 8006870:	f100 0114 	add.w	r1, r0, #20
 8006874:	f100 0210 	add.w	r2, r0, #16
 8006878:	4618      	mov	r0, r3
 800687a:	4553      	cmp	r3, sl
 800687c:	db33      	blt.n	80068e6 <__lshift+0xb6>
 800687e:	6920      	ldr	r0, [r4, #16]
 8006880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006884:	f104 0314 	add.w	r3, r4, #20
 8006888:	f019 091f 	ands.w	r9, r9, #31
 800688c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006894:	d02b      	beq.n	80068ee <__lshift+0xbe>
 8006896:	f1c9 0e20 	rsb	lr, r9, #32
 800689a:	468a      	mov	sl, r1
 800689c:	2200      	movs	r2, #0
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	fa00 f009 	lsl.w	r0, r0, r9
 80068a4:	4310      	orrs	r0, r2
 80068a6:	f84a 0b04 	str.w	r0, [sl], #4
 80068aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ae:	459c      	cmp	ip, r3
 80068b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80068b4:	d8f3      	bhi.n	800689e <__lshift+0x6e>
 80068b6:	ebac 0304 	sub.w	r3, ip, r4
 80068ba:	3b15      	subs	r3, #21
 80068bc:	f023 0303 	bic.w	r3, r3, #3
 80068c0:	3304      	adds	r3, #4
 80068c2:	f104 0015 	add.w	r0, r4, #21
 80068c6:	4584      	cmp	ip, r0
 80068c8:	bf38      	it	cc
 80068ca:	2304      	movcc	r3, #4
 80068cc:	50ca      	str	r2, [r1, r3]
 80068ce:	b10a      	cbz	r2, 80068d4 <__lshift+0xa4>
 80068d0:	f108 0602 	add.w	r6, r8, #2
 80068d4:	3e01      	subs	r6, #1
 80068d6:	4638      	mov	r0, r7
 80068d8:	612e      	str	r6, [r5, #16]
 80068da:	4621      	mov	r1, r4
 80068dc:	f7ff fd90 	bl	8006400 <_Bfree>
 80068e0:	4628      	mov	r0, r5
 80068e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80068ea:	3301      	adds	r3, #1
 80068ec:	e7c5      	b.n	800687a <__lshift+0x4a>
 80068ee:	3904      	subs	r1, #4
 80068f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80068f8:	459c      	cmp	ip, r3
 80068fa:	d8f9      	bhi.n	80068f0 <__lshift+0xc0>
 80068fc:	e7ea      	b.n	80068d4 <__lshift+0xa4>
 80068fe:	bf00      	nop
 8006900:	08007ad6 	.word	0x08007ad6
 8006904:	08007b47 	.word	0x08007b47

08006908 <__mcmp>:
 8006908:	690a      	ldr	r2, [r1, #16]
 800690a:	4603      	mov	r3, r0
 800690c:	6900      	ldr	r0, [r0, #16]
 800690e:	1a80      	subs	r0, r0, r2
 8006910:	b530      	push	{r4, r5, lr}
 8006912:	d10e      	bne.n	8006932 <__mcmp+0x2a>
 8006914:	3314      	adds	r3, #20
 8006916:	3114      	adds	r1, #20
 8006918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800691c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006928:	4295      	cmp	r5, r2
 800692a:	d003      	beq.n	8006934 <__mcmp+0x2c>
 800692c:	d205      	bcs.n	800693a <__mcmp+0x32>
 800692e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006932:	bd30      	pop	{r4, r5, pc}
 8006934:	42a3      	cmp	r3, r4
 8006936:	d3f3      	bcc.n	8006920 <__mcmp+0x18>
 8006938:	e7fb      	b.n	8006932 <__mcmp+0x2a>
 800693a:	2001      	movs	r0, #1
 800693c:	e7f9      	b.n	8006932 <__mcmp+0x2a>
	...

08006940 <__mdiff>:
 8006940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	4689      	mov	r9, r1
 8006946:	4606      	mov	r6, r0
 8006948:	4611      	mov	r1, r2
 800694a:	4648      	mov	r0, r9
 800694c:	4614      	mov	r4, r2
 800694e:	f7ff ffdb 	bl	8006908 <__mcmp>
 8006952:	1e05      	subs	r5, r0, #0
 8006954:	d112      	bne.n	800697c <__mdiff+0x3c>
 8006956:	4629      	mov	r1, r5
 8006958:	4630      	mov	r0, r6
 800695a:	f7ff fd11 	bl	8006380 <_Balloc>
 800695e:	4602      	mov	r2, r0
 8006960:	b928      	cbnz	r0, 800696e <__mdiff+0x2e>
 8006962:	4b3f      	ldr	r3, [pc, #252]	@ (8006a60 <__mdiff+0x120>)
 8006964:	f240 2137 	movw	r1, #567	@ 0x237
 8006968:	483e      	ldr	r0, [pc, #248]	@ (8006a64 <__mdiff+0x124>)
 800696a:	f7ff f83d 	bl	80059e8 <__assert_func>
 800696e:	2301      	movs	r3, #1
 8006970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006974:	4610      	mov	r0, r2
 8006976:	b003      	add	sp, #12
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	bfbc      	itt	lt
 800697e:	464b      	movlt	r3, r9
 8006980:	46a1      	movlt	r9, r4
 8006982:	4630      	mov	r0, r6
 8006984:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006988:	bfba      	itte	lt
 800698a:	461c      	movlt	r4, r3
 800698c:	2501      	movlt	r5, #1
 800698e:	2500      	movge	r5, #0
 8006990:	f7ff fcf6 	bl	8006380 <_Balloc>
 8006994:	4602      	mov	r2, r0
 8006996:	b918      	cbnz	r0, 80069a0 <__mdiff+0x60>
 8006998:	4b31      	ldr	r3, [pc, #196]	@ (8006a60 <__mdiff+0x120>)
 800699a:	f240 2145 	movw	r1, #581	@ 0x245
 800699e:	e7e3      	b.n	8006968 <__mdiff+0x28>
 80069a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069a4:	6926      	ldr	r6, [r4, #16]
 80069a6:	60c5      	str	r5, [r0, #12]
 80069a8:	f109 0310 	add.w	r3, r9, #16
 80069ac:	f109 0514 	add.w	r5, r9, #20
 80069b0:	f104 0e14 	add.w	lr, r4, #20
 80069b4:	f100 0b14 	add.w	fp, r0, #20
 80069b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	46d9      	mov	r9, fp
 80069c4:	f04f 0c00 	mov.w	ip, #0
 80069c8:	9b01      	ldr	r3, [sp, #4]
 80069ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	fa1f f38a 	uxth.w	r3, sl
 80069d8:	4619      	mov	r1, r3
 80069da:	b283      	uxth	r3, r0
 80069dc:	1acb      	subs	r3, r1, r3
 80069de:	0c00      	lsrs	r0, r0, #16
 80069e0:	4463      	add	r3, ip
 80069e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069f0:	4576      	cmp	r6, lr
 80069f2:	f849 3b04 	str.w	r3, [r9], #4
 80069f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069fa:	d8e5      	bhi.n	80069c8 <__mdiff+0x88>
 80069fc:	1b33      	subs	r3, r6, r4
 80069fe:	3b15      	subs	r3, #21
 8006a00:	f023 0303 	bic.w	r3, r3, #3
 8006a04:	3415      	adds	r4, #21
 8006a06:	3304      	adds	r3, #4
 8006a08:	42a6      	cmp	r6, r4
 8006a0a:	bf38      	it	cc
 8006a0c:	2304      	movcc	r3, #4
 8006a0e:	441d      	add	r5, r3
 8006a10:	445b      	add	r3, fp
 8006a12:	461e      	mov	r6, r3
 8006a14:	462c      	mov	r4, r5
 8006a16:	4544      	cmp	r4, r8
 8006a18:	d30e      	bcc.n	8006a38 <__mdiff+0xf8>
 8006a1a:	f108 0103 	add.w	r1, r8, #3
 8006a1e:	1b49      	subs	r1, r1, r5
 8006a20:	f021 0103 	bic.w	r1, r1, #3
 8006a24:	3d03      	subs	r5, #3
 8006a26:	45a8      	cmp	r8, r5
 8006a28:	bf38      	it	cc
 8006a2a:	2100      	movcc	r1, #0
 8006a2c:	440b      	add	r3, r1
 8006a2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a32:	b191      	cbz	r1, 8006a5a <__mdiff+0x11a>
 8006a34:	6117      	str	r7, [r2, #16]
 8006a36:	e79d      	b.n	8006974 <__mdiff+0x34>
 8006a38:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a3c:	46e6      	mov	lr, ip
 8006a3e:	0c08      	lsrs	r0, r1, #16
 8006a40:	fa1c fc81 	uxtah	ip, ip, r1
 8006a44:	4471      	add	r1, lr
 8006a46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a4a:	b289      	uxth	r1, r1
 8006a4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a50:	f846 1b04 	str.w	r1, [r6], #4
 8006a54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a58:	e7dd      	b.n	8006a16 <__mdiff+0xd6>
 8006a5a:	3f01      	subs	r7, #1
 8006a5c:	e7e7      	b.n	8006a2e <__mdiff+0xee>
 8006a5e:	bf00      	nop
 8006a60:	08007ad6 	.word	0x08007ad6
 8006a64:	08007b47 	.word	0x08007b47

08006a68 <__ulp>:
 8006a68:	b082      	sub	sp, #8
 8006a6a:	ed8d 0b00 	vstr	d0, [sp]
 8006a6e:	9a01      	ldr	r2, [sp, #4]
 8006a70:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab0 <__ulp+0x48>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dc08      	bgt.n	8006a8e <__ulp+0x26>
 8006a7c:	425b      	negs	r3, r3
 8006a7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006a82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006a86:	da04      	bge.n	8006a92 <__ulp+0x2a>
 8006a88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006a8c:	4113      	asrs	r3, r2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	e008      	b.n	8006aa4 <__ulp+0x3c>
 8006a92:	f1a2 0314 	sub.w	r3, r2, #20
 8006a96:	2b1e      	cmp	r3, #30
 8006a98:	bfda      	itte	le
 8006a9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006a9e:	40da      	lsrle	r2, r3
 8006aa0:	2201      	movgt	r2, #1
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	ec41 0b10 	vmov	d0, r0, r1
 8006aac:	b002      	add	sp, #8
 8006aae:	4770      	bx	lr
 8006ab0:	7ff00000 	.word	0x7ff00000

08006ab4 <__b2d>:
 8006ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab8:	6906      	ldr	r6, [r0, #16]
 8006aba:	f100 0814 	add.w	r8, r0, #20
 8006abe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006ac2:	1f37      	subs	r7, r6, #4
 8006ac4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7ff fd4b 	bl	8006564 <__hi0bits>
 8006ace:	f1c0 0320 	rsb	r3, r0, #32
 8006ad2:	280a      	cmp	r0, #10
 8006ad4:	600b      	str	r3, [r1, #0]
 8006ad6:	491b      	ldr	r1, [pc, #108]	@ (8006b44 <__b2d+0x90>)
 8006ad8:	dc15      	bgt.n	8006b06 <__b2d+0x52>
 8006ada:	f1c0 0c0b 	rsb	ip, r0, #11
 8006ade:	fa22 f30c 	lsr.w	r3, r2, ip
 8006ae2:	45b8      	cmp	r8, r7
 8006ae4:	ea43 0501 	orr.w	r5, r3, r1
 8006ae8:	bf34      	ite	cc
 8006aea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006aee:	2300      	movcs	r3, #0
 8006af0:	3015      	adds	r0, #21
 8006af2:	fa02 f000 	lsl.w	r0, r2, r0
 8006af6:	fa23 f30c 	lsr.w	r3, r3, ip
 8006afa:	4303      	orrs	r3, r0
 8006afc:	461c      	mov	r4, r3
 8006afe:	ec45 4b10 	vmov	d0, r4, r5
 8006b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b06:	45b8      	cmp	r8, r7
 8006b08:	bf3a      	itte	cc
 8006b0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006b0e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006b12:	2300      	movcs	r3, #0
 8006b14:	380b      	subs	r0, #11
 8006b16:	d012      	beq.n	8006b3e <__b2d+0x8a>
 8006b18:	f1c0 0120 	rsb	r1, r0, #32
 8006b1c:	fa23 f401 	lsr.w	r4, r3, r1
 8006b20:	4082      	lsls	r2, r0
 8006b22:	4322      	orrs	r2, r4
 8006b24:	4547      	cmp	r7, r8
 8006b26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006b2a:	bf8c      	ite	hi
 8006b2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006b30:	2200      	movls	r2, #0
 8006b32:	4083      	lsls	r3, r0
 8006b34:	40ca      	lsrs	r2, r1
 8006b36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	e7de      	b.n	8006afc <__b2d+0x48>
 8006b3e:	ea42 0501 	orr.w	r5, r2, r1
 8006b42:	e7db      	b.n	8006afc <__b2d+0x48>
 8006b44:	3ff00000 	.word	0x3ff00000

08006b48 <__d2b>:
 8006b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	2101      	movs	r1, #1
 8006b50:	ec59 8b10 	vmov	r8, r9, d0
 8006b54:	4616      	mov	r6, r2
 8006b56:	f7ff fc13 	bl	8006380 <_Balloc>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	b930      	cbnz	r0, 8006b6c <__d2b+0x24>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	4b23      	ldr	r3, [pc, #140]	@ (8006bf0 <__d2b+0xa8>)
 8006b62:	4824      	ldr	r0, [pc, #144]	@ (8006bf4 <__d2b+0xac>)
 8006b64:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b68:	f7fe ff3e 	bl	80059e8 <__assert_func>
 8006b6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b74:	b10d      	cbz	r5, 8006b7a <__d2b+0x32>
 8006b76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	f1b8 0300 	subs.w	r3, r8, #0
 8006b80:	d023      	beq.n	8006bca <__d2b+0x82>
 8006b82:	4668      	mov	r0, sp
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	f7ff fd0c 	bl	80065a2 <__lo0bits>
 8006b8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b8e:	b1d0      	cbz	r0, 8006bc6 <__d2b+0x7e>
 8006b90:	f1c0 0320 	rsb	r3, r0, #32
 8006b94:	fa02 f303 	lsl.w	r3, r2, r3
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	40c2      	lsrs	r2, r0
 8006b9c:	6163      	str	r3, [r4, #20]
 8006b9e:	9201      	str	r2, [sp, #4]
 8006ba0:	9b01      	ldr	r3, [sp, #4]
 8006ba2:	61a3      	str	r3, [r4, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2201      	moveq	r2, #1
 8006baa:	2202      	movne	r2, #2
 8006bac:	6122      	str	r2, [r4, #16]
 8006bae:	b1a5      	cbz	r5, 8006bda <__d2b+0x92>
 8006bb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006bb4:	4405      	add	r5, r0
 8006bb6:	603d      	str	r5, [r7, #0]
 8006bb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006bbc:	6030      	str	r0, [r6, #0]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	b003      	add	sp, #12
 8006bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bc6:	6161      	str	r1, [r4, #20]
 8006bc8:	e7ea      	b.n	8006ba0 <__d2b+0x58>
 8006bca:	a801      	add	r0, sp, #4
 8006bcc:	f7ff fce9 	bl	80065a2 <__lo0bits>
 8006bd0:	9b01      	ldr	r3, [sp, #4]
 8006bd2:	6163      	str	r3, [r4, #20]
 8006bd4:	3020      	adds	r0, #32
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	e7e8      	b.n	8006bac <__d2b+0x64>
 8006bda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006be2:	6038      	str	r0, [r7, #0]
 8006be4:	6918      	ldr	r0, [r3, #16]
 8006be6:	f7ff fcbd 	bl	8006564 <__hi0bits>
 8006bea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bee:	e7e5      	b.n	8006bbc <__d2b+0x74>
 8006bf0:	08007ad6 	.word	0x08007ad6
 8006bf4:	08007b47 	.word	0x08007b47

08006bf8 <__ratio>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	e9cd 1000 	strd	r1, r0, [sp]
 8006c02:	a902      	add	r1, sp, #8
 8006c04:	f7ff ff56 	bl	8006ab4 <__b2d>
 8006c08:	9800      	ldr	r0, [sp, #0]
 8006c0a:	a903      	add	r1, sp, #12
 8006c0c:	ec55 4b10 	vmov	r4, r5, d0
 8006c10:	f7ff ff50 	bl	8006ab4 <__b2d>
 8006c14:	9b01      	ldr	r3, [sp, #4]
 8006c16:	6919      	ldr	r1, [r3, #16]
 8006c18:	9b00      	ldr	r3, [sp, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	1ac9      	subs	r1, r1, r3
 8006c1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	ec5b ab10 	vmov	sl, fp, d0
 8006c28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bfce      	itee	gt
 8006c30:	462a      	movgt	r2, r5
 8006c32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c36:	465a      	movle	r2, fp
 8006c38:	462f      	mov	r7, r5
 8006c3a:	46d9      	mov	r9, fp
 8006c3c:	bfcc      	ite	gt
 8006c3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006c42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006c46:	464b      	mov	r3, r9
 8006c48:	4652      	mov	r2, sl
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	f7f9 fe1d 	bl	800088c <__aeabi_ddiv>
 8006c52:	ec41 0b10 	vmov	d0, r0, r1
 8006c56:	b005      	add	sp, #20
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c5c <__copybits>:
 8006c5c:	3901      	subs	r1, #1
 8006c5e:	b570      	push	{r4, r5, r6, lr}
 8006c60:	1149      	asrs	r1, r1, #5
 8006c62:	6914      	ldr	r4, [r2, #16]
 8006c64:	3101      	adds	r1, #1
 8006c66:	f102 0314 	add.w	r3, r2, #20
 8006c6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c72:	1f05      	subs	r5, r0, #4
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	d30c      	bcc.n	8006c92 <__copybits+0x36>
 8006c78:	1aa3      	subs	r3, r4, r2
 8006c7a:	3b11      	subs	r3, #17
 8006c7c:	f023 0303 	bic.w	r3, r3, #3
 8006c80:	3211      	adds	r2, #17
 8006c82:	42a2      	cmp	r2, r4
 8006c84:	bf88      	it	hi
 8006c86:	2300      	movhi	r3, #0
 8006c88:	4418      	add	r0, r3
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4288      	cmp	r0, r1
 8006c8e:	d305      	bcc.n	8006c9c <__copybits+0x40>
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	f853 6b04 	ldr.w	r6, [r3], #4
 8006c96:	f845 6f04 	str.w	r6, [r5, #4]!
 8006c9a:	e7eb      	b.n	8006c74 <__copybits+0x18>
 8006c9c:	f840 3b04 	str.w	r3, [r0], #4
 8006ca0:	e7f4      	b.n	8006c8c <__copybits+0x30>

08006ca2 <__any_on>:
 8006ca2:	f100 0214 	add.w	r2, r0, #20
 8006ca6:	6900      	ldr	r0, [r0, #16]
 8006ca8:	114b      	asrs	r3, r1, #5
 8006caa:	4298      	cmp	r0, r3
 8006cac:	b510      	push	{r4, lr}
 8006cae:	db11      	blt.n	8006cd4 <__any_on+0x32>
 8006cb0:	dd0a      	ble.n	8006cc8 <__any_on+0x26>
 8006cb2:	f011 011f 	ands.w	r1, r1, #31
 8006cb6:	d007      	beq.n	8006cc8 <__any_on+0x26>
 8006cb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006cbc:	fa24 f001 	lsr.w	r0, r4, r1
 8006cc0:	fa00 f101 	lsl.w	r1, r0, r1
 8006cc4:	428c      	cmp	r4, r1
 8006cc6:	d10b      	bne.n	8006ce0 <__any_on+0x3e>
 8006cc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d803      	bhi.n	8006cd8 <__any_on+0x36>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	bd10      	pop	{r4, pc}
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	e7f7      	b.n	8006cc8 <__any_on+0x26>
 8006cd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	d0f5      	beq.n	8006ccc <__any_on+0x2a>
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	e7f6      	b.n	8006cd2 <__any_on+0x30>

08006ce4 <__sread>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	f000 f880 	bl	8006df0 <_read_r>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	bfab      	itete	ge
 8006cf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf8:	181b      	addge	r3, r3, r0
 8006cfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cfe:	bfac      	ite	ge
 8006d00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d02:	81a3      	strhlt	r3, [r4, #12]
 8006d04:	bd10      	pop	{r4, pc}

08006d06 <__swrite>:
 8006d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	898b      	ldrh	r3, [r1, #12]
 8006d0e:	05db      	lsls	r3, r3, #23
 8006d10:	4605      	mov	r5, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	4616      	mov	r6, r2
 8006d16:	d505      	bpl.n	8006d24 <__swrite+0x1e>
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f000 f854 	bl	8006dcc <_lseek_r>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	4632      	mov	r2, r6
 8006d32:	463b      	mov	r3, r7
 8006d34:	4628      	mov	r0, r5
 8006d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3a:	f000 b87b 	b.w	8006e34 <_write_r>

08006d3e <__sseek>:
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	460c      	mov	r4, r1
 8006d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d46:	f000 f841 	bl	8006dcc <_lseek_r>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	bf15      	itete	ne
 8006d50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d5a:	81a3      	strheq	r3, [r4, #12]
 8006d5c:	bf18      	it	ne
 8006d5e:	81a3      	strhne	r3, [r4, #12]
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <__sclose>:
 8006d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d66:	f000 b821 	b.w	8006dac <_close_r>
	...

08006d6c <fiprintf>:
 8006d6c:	b40e      	push	{r1, r2, r3}
 8006d6e:	b503      	push	{r0, r1, lr}
 8006d70:	4601      	mov	r1, r0
 8006d72:	ab03      	add	r3, sp, #12
 8006d74:	4805      	ldr	r0, [pc, #20]	@ (8006d8c <fiprintf+0x20>)
 8006d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	f000 f8fb 	bl	8006f78 <_vfiprintf_r>
 8006d82:	b002      	add	sp, #8
 8006d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d88:	b003      	add	sp, #12
 8006d8a:	4770      	bx	lr
 8006d8c:	20000188 	.word	0x20000188

08006d90 <__ascii_wctomb>:
 8006d90:	4603      	mov	r3, r0
 8006d92:	4608      	mov	r0, r1
 8006d94:	b141      	cbz	r1, 8006da8 <__ascii_wctomb+0x18>
 8006d96:	2aff      	cmp	r2, #255	@ 0xff
 8006d98:	d904      	bls.n	8006da4 <__ascii_wctomb+0x14>
 8006d9a:	228a      	movs	r2, #138	@ 0x8a
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006da2:	4770      	bx	lr
 8006da4:	700a      	strb	r2, [r1, #0]
 8006da6:	2001      	movs	r0, #1
 8006da8:	4770      	bx	lr
	...

08006dac <_close_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	@ (8006dc8 <_close_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7fa ff90 	bl	8001cdc <_close>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_close_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_close_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	20000478 	.word	0x20000478

08006dcc <_lseek_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4d07      	ldr	r5, [pc, #28]	@ (8006dec <_lseek_r+0x20>)
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	4608      	mov	r0, r1
 8006dd4:	4611      	mov	r1, r2
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	602a      	str	r2, [r5, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f7fa ffa5 	bl	8001d2a <_lseek>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_lseek_r+0x1e>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_lseek_r+0x1e>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20000478 	.word	0x20000478

08006df0 <_read_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4d07      	ldr	r5, [pc, #28]	@ (8006e10 <_read_r+0x20>)
 8006df4:	4604      	mov	r4, r0
 8006df6:	4608      	mov	r0, r1
 8006df8:	4611      	mov	r1, r2
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f7fa ff33 	bl	8001c6a <_read>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_read_r+0x1e>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_read_r+0x1e>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000478 	.word	0x20000478

08006e14 <_sbrk_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4d06      	ldr	r5, [pc, #24]	@ (8006e30 <_sbrk_r+0x1c>)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	f7fa ff90 	bl	8001d44 <_sbrk>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d102      	bne.n	8006e2e <_sbrk_r+0x1a>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	b103      	cbz	r3, 8006e2e <_sbrk_r+0x1a>
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	20000478 	.word	0x20000478

08006e34 <_write_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4d07      	ldr	r5, [pc, #28]	@ (8006e54 <_write_r+0x20>)
 8006e38:	4604      	mov	r4, r0
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	602a      	str	r2, [r5, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	f7fa ff2e 	bl	8001ca4 <_write>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d102      	bne.n	8006e52 <_write_r+0x1e>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	b103      	cbz	r3, 8006e52 <_write_r+0x1e>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	20000478 	.word	0x20000478

08006e58 <abort>:
 8006e58:	b508      	push	{r3, lr}
 8006e5a:	2006      	movs	r0, #6
 8006e5c:	f000 fc72 	bl	8007744 <raise>
 8006e60:	2001      	movs	r0, #1
 8006e62:	f7fa fef7 	bl	8001c54 <_exit>

08006e66 <_calloc_r>:
 8006e66:	b570      	push	{r4, r5, r6, lr}
 8006e68:	fba1 5402 	umull	r5, r4, r1, r2
 8006e6c:	b93c      	cbnz	r4, 8006e7e <_calloc_r+0x18>
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7ff f93c 	bl	80060ec <_malloc_r>
 8006e74:	4606      	mov	r6, r0
 8006e76:	b928      	cbnz	r0, 8006e84 <_calloc_r+0x1e>
 8006e78:	2600      	movs	r6, #0
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
 8006e7e:	220c      	movs	r2, #12
 8006e80:	6002      	str	r2, [r0, #0]
 8006e82:	e7f9      	b.n	8006e78 <_calloc_r+0x12>
 8006e84:	462a      	mov	r2, r5
 8006e86:	4621      	mov	r1, r4
 8006e88:	f7fe fd62 	bl	8005950 <memset>
 8006e8c:	e7f5      	b.n	8006e7a <_calloc_r+0x14>
	...

08006e90 <_free_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4605      	mov	r5, r0
 8006e94:	2900      	cmp	r1, #0
 8006e96:	d041      	beq.n	8006f1c <_free_r+0x8c>
 8006e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e9c:	1f0c      	subs	r4, r1, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfb8      	it	lt
 8006ea2:	18e4      	addlt	r4, r4, r3
 8006ea4:	f7ff fa60 	bl	8006368 <__malloc_lock>
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f20 <_free_r+0x90>)
 8006eaa:	6813      	ldr	r3, [r2, #0]
 8006eac:	b933      	cbnz	r3, 8006ebc <_free_r+0x2c>
 8006eae:	6063      	str	r3, [r4, #4]
 8006eb0:	6014      	str	r4, [r2, #0]
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb8:	f7ff ba5c 	b.w	8006374 <__malloc_unlock>
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	d908      	bls.n	8006ed2 <_free_r+0x42>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	1821      	adds	r1, r4, r0
 8006ec4:	428b      	cmp	r3, r1
 8006ec6:	bf01      	itttt	eq
 8006ec8:	6819      	ldreq	r1, [r3, #0]
 8006eca:	685b      	ldreq	r3, [r3, #4]
 8006ecc:	1809      	addeq	r1, r1, r0
 8006ece:	6021      	streq	r1, [r4, #0]
 8006ed0:	e7ed      	b.n	8006eae <_free_r+0x1e>
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b10b      	cbz	r3, 8006edc <_free_r+0x4c>
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d9fa      	bls.n	8006ed2 <_free_r+0x42>
 8006edc:	6811      	ldr	r1, [r2, #0]
 8006ede:	1850      	adds	r0, r2, r1
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d10b      	bne.n	8006efc <_free_r+0x6c>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	4401      	add	r1, r0
 8006ee8:	1850      	adds	r0, r2, r1
 8006eea:	4283      	cmp	r3, r0
 8006eec:	6011      	str	r1, [r2, #0]
 8006eee:	d1e0      	bne.n	8006eb2 <_free_r+0x22>
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	6053      	str	r3, [r2, #4]
 8006ef6:	4408      	add	r0, r1
 8006ef8:	6010      	str	r0, [r2, #0]
 8006efa:	e7da      	b.n	8006eb2 <_free_r+0x22>
 8006efc:	d902      	bls.n	8006f04 <_free_r+0x74>
 8006efe:	230c      	movs	r3, #12
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	e7d6      	b.n	8006eb2 <_free_r+0x22>
 8006f04:	6820      	ldr	r0, [r4, #0]
 8006f06:	1821      	adds	r1, r4, r0
 8006f08:	428b      	cmp	r3, r1
 8006f0a:	bf04      	itt	eq
 8006f0c:	6819      	ldreq	r1, [r3, #0]
 8006f0e:	685b      	ldreq	r3, [r3, #4]
 8006f10:	6063      	str	r3, [r4, #4]
 8006f12:	bf04      	itt	eq
 8006f14:	1809      	addeq	r1, r1, r0
 8006f16:	6021      	streq	r1, [r4, #0]
 8006f18:	6054      	str	r4, [r2, #4]
 8006f1a:	e7ca      	b.n	8006eb2 <_free_r+0x22>
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000474 	.word	0x20000474

08006f24 <__sfputc_r>:
 8006f24:	6893      	ldr	r3, [r2, #8]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	b410      	push	{r4}
 8006f2c:	6093      	str	r3, [r2, #8]
 8006f2e:	da08      	bge.n	8006f42 <__sfputc_r+0x1e>
 8006f30:	6994      	ldr	r4, [r2, #24]
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	db01      	blt.n	8006f3a <__sfputc_r+0x16>
 8006f36:	290a      	cmp	r1, #10
 8006f38:	d103      	bne.n	8006f42 <__sfputc_r+0x1e>
 8006f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f3e:	f000 bac1 	b.w	80074c4 <__swbuf_r>
 8006f42:	6813      	ldr	r3, [r2, #0]
 8006f44:	1c58      	adds	r0, r3, #1
 8006f46:	6010      	str	r0, [r2, #0]
 8006f48:	7019      	strb	r1, [r3, #0]
 8006f4a:	4608      	mov	r0, r1
 8006f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <__sfputs_r>:
 8006f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f54:	4606      	mov	r6, r0
 8006f56:	460f      	mov	r7, r1
 8006f58:	4614      	mov	r4, r2
 8006f5a:	18d5      	adds	r5, r2, r3
 8006f5c:	42ac      	cmp	r4, r5
 8006f5e:	d101      	bne.n	8006f64 <__sfputs_r+0x12>
 8006f60:	2000      	movs	r0, #0
 8006f62:	e007      	b.n	8006f74 <__sfputs_r+0x22>
 8006f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f68:	463a      	mov	r2, r7
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f7ff ffda 	bl	8006f24 <__sfputc_r>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d1f3      	bne.n	8006f5c <__sfputs_r+0xa>
 8006f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f78 <_vfiprintf_r>:
 8006f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7c:	460d      	mov	r5, r1
 8006f7e:	b09d      	sub	sp, #116	@ 0x74
 8006f80:	4614      	mov	r4, r2
 8006f82:	4698      	mov	r8, r3
 8006f84:	4606      	mov	r6, r0
 8006f86:	b118      	cbz	r0, 8006f90 <_vfiprintf_r+0x18>
 8006f88:	6a03      	ldr	r3, [r0, #32]
 8006f8a:	b90b      	cbnz	r3, 8006f90 <_vfiprintf_r+0x18>
 8006f8c:	f7fd fe2e 	bl	8004bec <__sinit>
 8006f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f92:	07d9      	lsls	r1, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_vfiprintf_r+0x2a>
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	059a      	lsls	r2, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_vfiprintf_r+0x2a>
 8006f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f9e:	f7fe fd0a 	bl	80059b6 <__retarget_lock_acquire_recursive>
 8006fa2:	89ab      	ldrh	r3, [r5, #12]
 8006fa4:	071b      	lsls	r3, r3, #28
 8006fa6:	d501      	bpl.n	8006fac <_vfiprintf_r+0x34>
 8006fa8:	692b      	ldr	r3, [r5, #16]
 8006faa:	b99b      	cbnz	r3, 8006fd4 <_vfiprintf_r+0x5c>
 8006fac:	4629      	mov	r1, r5
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f000 fac6 	bl	8007540 <__swsetup_r>
 8006fb4:	b170      	cbz	r0, 8006fd4 <_vfiprintf_r+0x5c>
 8006fb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fb8:	07dc      	lsls	r4, r3, #31
 8006fba:	d504      	bpl.n	8006fc6 <_vfiprintf_r+0x4e>
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fc0:	b01d      	add	sp, #116	@ 0x74
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	0598      	lsls	r0, r3, #22
 8006fca:	d4f7      	bmi.n	8006fbc <_vfiprintf_r+0x44>
 8006fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fce:	f7fe fcf3 	bl	80059b8 <__retarget_lock_release_recursive>
 8006fd2:	e7f3      	b.n	8006fbc <_vfiprintf_r+0x44>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fd8:	2320      	movs	r3, #32
 8006fda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fe2:	2330      	movs	r3, #48	@ 0x30
 8006fe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007194 <_vfiprintf_r+0x21c>
 8006fe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fec:	f04f 0901 	mov.w	r9, #1
 8006ff0:	4623      	mov	r3, r4
 8006ff2:	469a      	mov	sl, r3
 8006ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff8:	b10a      	cbz	r2, 8006ffe <_vfiprintf_r+0x86>
 8006ffa:	2a25      	cmp	r2, #37	@ 0x25
 8006ffc:	d1f9      	bne.n	8006ff2 <_vfiprintf_r+0x7a>
 8006ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8007002:	d00b      	beq.n	800701c <_vfiprintf_r+0xa4>
 8007004:	465b      	mov	r3, fp
 8007006:	4622      	mov	r2, r4
 8007008:	4629      	mov	r1, r5
 800700a:	4630      	mov	r0, r6
 800700c:	f7ff ffa1 	bl	8006f52 <__sfputs_r>
 8007010:	3001      	adds	r0, #1
 8007012:	f000 80a7 	beq.w	8007164 <_vfiprintf_r+0x1ec>
 8007016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007018:	445a      	add	r2, fp
 800701a:	9209      	str	r2, [sp, #36]	@ 0x24
 800701c:	f89a 3000 	ldrb.w	r3, [sl]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 809f 	beq.w	8007164 <_vfiprintf_r+0x1ec>
 8007026:	2300      	movs	r3, #0
 8007028:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800702c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007030:	f10a 0a01 	add.w	sl, sl, #1
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800703c:	931a      	str	r3, [sp, #104]	@ 0x68
 800703e:	4654      	mov	r4, sl
 8007040:	2205      	movs	r2, #5
 8007042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007046:	4853      	ldr	r0, [pc, #332]	@ (8007194 <_vfiprintf_r+0x21c>)
 8007048:	f7f9 f8ea 	bl	8000220 <memchr>
 800704c:	9a04      	ldr	r2, [sp, #16]
 800704e:	b9d8      	cbnz	r0, 8007088 <_vfiprintf_r+0x110>
 8007050:	06d1      	lsls	r1, r2, #27
 8007052:	bf44      	itt	mi
 8007054:	2320      	movmi	r3, #32
 8007056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800705a:	0713      	lsls	r3, r2, #28
 800705c:	bf44      	itt	mi
 800705e:	232b      	movmi	r3, #43	@ 0x2b
 8007060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007064:	f89a 3000 	ldrb.w	r3, [sl]
 8007068:	2b2a      	cmp	r3, #42	@ 0x2a
 800706a:	d015      	beq.n	8007098 <_vfiprintf_r+0x120>
 800706c:	9a07      	ldr	r2, [sp, #28]
 800706e:	4654      	mov	r4, sl
 8007070:	2000      	movs	r0, #0
 8007072:	f04f 0c0a 	mov.w	ip, #10
 8007076:	4621      	mov	r1, r4
 8007078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800707c:	3b30      	subs	r3, #48	@ 0x30
 800707e:	2b09      	cmp	r3, #9
 8007080:	d94b      	bls.n	800711a <_vfiprintf_r+0x1a2>
 8007082:	b1b0      	cbz	r0, 80070b2 <_vfiprintf_r+0x13a>
 8007084:	9207      	str	r2, [sp, #28]
 8007086:	e014      	b.n	80070b2 <_vfiprintf_r+0x13a>
 8007088:	eba0 0308 	sub.w	r3, r0, r8
 800708c:	fa09 f303 	lsl.w	r3, r9, r3
 8007090:	4313      	orrs	r3, r2
 8007092:	9304      	str	r3, [sp, #16]
 8007094:	46a2      	mov	sl, r4
 8007096:	e7d2      	b.n	800703e <_vfiprintf_r+0xc6>
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	1d19      	adds	r1, r3, #4
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	9103      	str	r1, [sp, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	bfbb      	ittet	lt
 80070a4:	425b      	neglt	r3, r3
 80070a6:	f042 0202 	orrlt.w	r2, r2, #2
 80070aa:	9307      	strge	r3, [sp, #28]
 80070ac:	9307      	strlt	r3, [sp, #28]
 80070ae:	bfb8      	it	lt
 80070b0:	9204      	strlt	r2, [sp, #16]
 80070b2:	7823      	ldrb	r3, [r4, #0]
 80070b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80070b6:	d10a      	bne.n	80070ce <_vfiprintf_r+0x156>
 80070b8:	7863      	ldrb	r3, [r4, #1]
 80070ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80070bc:	d132      	bne.n	8007124 <_vfiprintf_r+0x1ac>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	1d1a      	adds	r2, r3, #4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	9203      	str	r2, [sp, #12]
 80070c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070ca:	3402      	adds	r4, #2
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80071a4 <_vfiprintf_r+0x22c>
 80070d2:	7821      	ldrb	r1, [r4, #0]
 80070d4:	2203      	movs	r2, #3
 80070d6:	4650      	mov	r0, sl
 80070d8:	f7f9 f8a2 	bl	8000220 <memchr>
 80070dc:	b138      	cbz	r0, 80070ee <_vfiprintf_r+0x176>
 80070de:	9b04      	ldr	r3, [sp, #16]
 80070e0:	eba0 000a 	sub.w	r0, r0, sl
 80070e4:	2240      	movs	r2, #64	@ 0x40
 80070e6:	4082      	lsls	r2, r0
 80070e8:	4313      	orrs	r3, r2
 80070ea:	3401      	adds	r4, #1
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f2:	4829      	ldr	r0, [pc, #164]	@ (8007198 <_vfiprintf_r+0x220>)
 80070f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070f8:	2206      	movs	r2, #6
 80070fa:	f7f9 f891 	bl	8000220 <memchr>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d03f      	beq.n	8007182 <_vfiprintf_r+0x20a>
 8007102:	4b26      	ldr	r3, [pc, #152]	@ (800719c <_vfiprintf_r+0x224>)
 8007104:	bb1b      	cbnz	r3, 800714e <_vfiprintf_r+0x1d6>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	3307      	adds	r3, #7
 800710a:	f023 0307 	bic.w	r3, r3, #7
 800710e:	3308      	adds	r3, #8
 8007110:	9303      	str	r3, [sp, #12]
 8007112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007114:	443b      	add	r3, r7
 8007116:	9309      	str	r3, [sp, #36]	@ 0x24
 8007118:	e76a      	b.n	8006ff0 <_vfiprintf_r+0x78>
 800711a:	fb0c 3202 	mla	r2, ip, r2, r3
 800711e:	460c      	mov	r4, r1
 8007120:	2001      	movs	r0, #1
 8007122:	e7a8      	b.n	8007076 <_vfiprintf_r+0xfe>
 8007124:	2300      	movs	r3, #0
 8007126:	3401      	adds	r4, #1
 8007128:	9305      	str	r3, [sp, #20]
 800712a:	4619      	mov	r1, r3
 800712c:	f04f 0c0a 	mov.w	ip, #10
 8007130:	4620      	mov	r0, r4
 8007132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007136:	3a30      	subs	r2, #48	@ 0x30
 8007138:	2a09      	cmp	r2, #9
 800713a:	d903      	bls.n	8007144 <_vfiprintf_r+0x1cc>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0c6      	beq.n	80070ce <_vfiprintf_r+0x156>
 8007140:	9105      	str	r1, [sp, #20]
 8007142:	e7c4      	b.n	80070ce <_vfiprintf_r+0x156>
 8007144:	fb0c 2101 	mla	r1, ip, r1, r2
 8007148:	4604      	mov	r4, r0
 800714a:	2301      	movs	r3, #1
 800714c:	e7f0      	b.n	8007130 <_vfiprintf_r+0x1b8>
 800714e:	ab03      	add	r3, sp, #12
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	462a      	mov	r2, r5
 8007154:	4b12      	ldr	r3, [pc, #72]	@ (80071a0 <_vfiprintf_r+0x228>)
 8007156:	a904      	add	r1, sp, #16
 8007158:	4630      	mov	r0, r6
 800715a:	f3af 8000 	nop.w
 800715e:	4607      	mov	r7, r0
 8007160:	1c78      	adds	r0, r7, #1
 8007162:	d1d6      	bne.n	8007112 <_vfiprintf_r+0x19a>
 8007164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007166:	07d9      	lsls	r1, r3, #31
 8007168:	d405      	bmi.n	8007176 <_vfiprintf_r+0x1fe>
 800716a:	89ab      	ldrh	r3, [r5, #12]
 800716c:	059a      	lsls	r2, r3, #22
 800716e:	d402      	bmi.n	8007176 <_vfiprintf_r+0x1fe>
 8007170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007172:	f7fe fc21 	bl	80059b8 <__retarget_lock_release_recursive>
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	065b      	lsls	r3, r3, #25
 800717a:	f53f af1f 	bmi.w	8006fbc <_vfiprintf_r+0x44>
 800717e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007180:	e71e      	b.n	8006fc0 <_vfiprintf_r+0x48>
 8007182:	ab03      	add	r3, sp, #12
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	462a      	mov	r2, r5
 8007188:	4b05      	ldr	r3, [pc, #20]	@ (80071a0 <_vfiprintf_r+0x228>)
 800718a:	a904      	add	r1, sp, #16
 800718c:	4630      	mov	r0, r6
 800718e:	f000 f879 	bl	8007284 <_printf_i>
 8007192:	e7e4      	b.n	800715e <_vfiprintf_r+0x1e6>
 8007194:	08007ca0 	.word	0x08007ca0
 8007198:	08007caa 	.word	0x08007caa
 800719c:	00000000 	.word	0x00000000
 80071a0:	08006f53 	.word	0x08006f53
 80071a4:	08007ca6 	.word	0x08007ca6

080071a8 <_printf_common>:
 80071a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ac:	4616      	mov	r6, r2
 80071ae:	4698      	mov	r8, r3
 80071b0:	688a      	ldr	r2, [r1, #8]
 80071b2:	690b      	ldr	r3, [r1, #16]
 80071b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bfb8      	it	lt
 80071bc:	4613      	movlt	r3, r2
 80071be:	6033      	str	r3, [r6, #0]
 80071c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071c4:	4607      	mov	r7, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	b10a      	cbz	r2, 80071ce <_printf_common+0x26>
 80071ca:	3301      	adds	r3, #1
 80071cc:	6033      	str	r3, [r6, #0]
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	0699      	lsls	r1, r3, #26
 80071d2:	bf42      	ittt	mi
 80071d4:	6833      	ldrmi	r3, [r6, #0]
 80071d6:	3302      	addmi	r3, #2
 80071d8:	6033      	strmi	r3, [r6, #0]
 80071da:	6825      	ldr	r5, [r4, #0]
 80071dc:	f015 0506 	ands.w	r5, r5, #6
 80071e0:	d106      	bne.n	80071f0 <_printf_common+0x48>
 80071e2:	f104 0a19 	add.w	sl, r4, #25
 80071e6:	68e3      	ldr	r3, [r4, #12]
 80071e8:	6832      	ldr	r2, [r6, #0]
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	42ab      	cmp	r3, r5
 80071ee:	dc26      	bgt.n	800723e <_printf_common+0x96>
 80071f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071f4:	6822      	ldr	r2, [r4, #0]
 80071f6:	3b00      	subs	r3, #0
 80071f8:	bf18      	it	ne
 80071fa:	2301      	movne	r3, #1
 80071fc:	0692      	lsls	r2, r2, #26
 80071fe:	d42b      	bmi.n	8007258 <_printf_common+0xb0>
 8007200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007204:	4641      	mov	r1, r8
 8007206:	4638      	mov	r0, r7
 8007208:	47c8      	blx	r9
 800720a:	3001      	adds	r0, #1
 800720c:	d01e      	beq.n	800724c <_printf_common+0xa4>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	6922      	ldr	r2, [r4, #16]
 8007212:	f003 0306 	and.w	r3, r3, #6
 8007216:	2b04      	cmp	r3, #4
 8007218:	bf02      	ittt	eq
 800721a:	68e5      	ldreq	r5, [r4, #12]
 800721c:	6833      	ldreq	r3, [r6, #0]
 800721e:	1aed      	subeq	r5, r5, r3
 8007220:	68a3      	ldr	r3, [r4, #8]
 8007222:	bf0c      	ite	eq
 8007224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007228:	2500      	movne	r5, #0
 800722a:	4293      	cmp	r3, r2
 800722c:	bfc4      	itt	gt
 800722e:	1a9b      	subgt	r3, r3, r2
 8007230:	18ed      	addgt	r5, r5, r3
 8007232:	2600      	movs	r6, #0
 8007234:	341a      	adds	r4, #26
 8007236:	42b5      	cmp	r5, r6
 8007238:	d11a      	bne.n	8007270 <_printf_common+0xc8>
 800723a:	2000      	movs	r0, #0
 800723c:	e008      	b.n	8007250 <_printf_common+0xa8>
 800723e:	2301      	movs	r3, #1
 8007240:	4652      	mov	r2, sl
 8007242:	4641      	mov	r1, r8
 8007244:	4638      	mov	r0, r7
 8007246:	47c8      	blx	r9
 8007248:	3001      	adds	r0, #1
 800724a:	d103      	bne.n	8007254 <_printf_common+0xac>
 800724c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007254:	3501      	adds	r5, #1
 8007256:	e7c6      	b.n	80071e6 <_printf_common+0x3e>
 8007258:	18e1      	adds	r1, r4, r3
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	2030      	movs	r0, #48	@ 0x30
 800725e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007262:	4422      	add	r2, r4
 8007264:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800726c:	3302      	adds	r3, #2
 800726e:	e7c7      	b.n	8007200 <_printf_common+0x58>
 8007270:	2301      	movs	r3, #1
 8007272:	4622      	mov	r2, r4
 8007274:	4641      	mov	r1, r8
 8007276:	4638      	mov	r0, r7
 8007278:	47c8      	blx	r9
 800727a:	3001      	adds	r0, #1
 800727c:	d0e6      	beq.n	800724c <_printf_common+0xa4>
 800727e:	3601      	adds	r6, #1
 8007280:	e7d9      	b.n	8007236 <_printf_common+0x8e>
	...

08007284 <_printf_i>:
 8007284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007288:	7e0f      	ldrb	r7, [r1, #24]
 800728a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800728c:	2f78      	cmp	r7, #120	@ 0x78
 800728e:	4691      	mov	r9, r2
 8007290:	4680      	mov	r8, r0
 8007292:	460c      	mov	r4, r1
 8007294:	469a      	mov	sl, r3
 8007296:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800729a:	d807      	bhi.n	80072ac <_printf_i+0x28>
 800729c:	2f62      	cmp	r7, #98	@ 0x62
 800729e:	d80a      	bhi.n	80072b6 <_printf_i+0x32>
 80072a0:	2f00      	cmp	r7, #0
 80072a2:	f000 80d2 	beq.w	800744a <_printf_i+0x1c6>
 80072a6:	2f58      	cmp	r7, #88	@ 0x58
 80072a8:	f000 80b9 	beq.w	800741e <_printf_i+0x19a>
 80072ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072b4:	e03a      	b.n	800732c <_printf_i+0xa8>
 80072b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072ba:	2b15      	cmp	r3, #21
 80072bc:	d8f6      	bhi.n	80072ac <_printf_i+0x28>
 80072be:	a101      	add	r1, pc, #4	@ (adr r1, 80072c4 <_printf_i+0x40>)
 80072c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072c4:	0800731d 	.word	0x0800731d
 80072c8:	08007331 	.word	0x08007331
 80072cc:	080072ad 	.word	0x080072ad
 80072d0:	080072ad 	.word	0x080072ad
 80072d4:	080072ad 	.word	0x080072ad
 80072d8:	080072ad 	.word	0x080072ad
 80072dc:	08007331 	.word	0x08007331
 80072e0:	080072ad 	.word	0x080072ad
 80072e4:	080072ad 	.word	0x080072ad
 80072e8:	080072ad 	.word	0x080072ad
 80072ec:	080072ad 	.word	0x080072ad
 80072f0:	08007431 	.word	0x08007431
 80072f4:	0800735b 	.word	0x0800735b
 80072f8:	080073eb 	.word	0x080073eb
 80072fc:	080072ad 	.word	0x080072ad
 8007300:	080072ad 	.word	0x080072ad
 8007304:	08007453 	.word	0x08007453
 8007308:	080072ad 	.word	0x080072ad
 800730c:	0800735b 	.word	0x0800735b
 8007310:	080072ad 	.word	0x080072ad
 8007314:	080072ad 	.word	0x080072ad
 8007318:	080073f3 	.word	0x080073f3
 800731c:	6833      	ldr	r3, [r6, #0]
 800731e:	1d1a      	adds	r2, r3, #4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6032      	str	r2, [r6, #0]
 8007324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800732c:	2301      	movs	r3, #1
 800732e:	e09d      	b.n	800746c <_printf_i+0x1e8>
 8007330:	6833      	ldr	r3, [r6, #0]
 8007332:	6820      	ldr	r0, [r4, #0]
 8007334:	1d19      	adds	r1, r3, #4
 8007336:	6031      	str	r1, [r6, #0]
 8007338:	0606      	lsls	r6, r0, #24
 800733a:	d501      	bpl.n	8007340 <_printf_i+0xbc>
 800733c:	681d      	ldr	r5, [r3, #0]
 800733e:	e003      	b.n	8007348 <_printf_i+0xc4>
 8007340:	0645      	lsls	r5, r0, #25
 8007342:	d5fb      	bpl.n	800733c <_printf_i+0xb8>
 8007344:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007348:	2d00      	cmp	r5, #0
 800734a:	da03      	bge.n	8007354 <_printf_i+0xd0>
 800734c:	232d      	movs	r3, #45	@ 0x2d
 800734e:	426d      	negs	r5, r5
 8007350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007354:	4859      	ldr	r0, [pc, #356]	@ (80074bc <_printf_i+0x238>)
 8007356:	230a      	movs	r3, #10
 8007358:	e011      	b.n	800737e <_printf_i+0xfa>
 800735a:	6821      	ldr	r1, [r4, #0]
 800735c:	6833      	ldr	r3, [r6, #0]
 800735e:	0608      	lsls	r0, r1, #24
 8007360:	f853 5b04 	ldr.w	r5, [r3], #4
 8007364:	d402      	bmi.n	800736c <_printf_i+0xe8>
 8007366:	0649      	lsls	r1, r1, #25
 8007368:	bf48      	it	mi
 800736a:	b2ad      	uxthmi	r5, r5
 800736c:	2f6f      	cmp	r7, #111	@ 0x6f
 800736e:	4853      	ldr	r0, [pc, #332]	@ (80074bc <_printf_i+0x238>)
 8007370:	6033      	str	r3, [r6, #0]
 8007372:	bf14      	ite	ne
 8007374:	230a      	movne	r3, #10
 8007376:	2308      	moveq	r3, #8
 8007378:	2100      	movs	r1, #0
 800737a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800737e:	6866      	ldr	r6, [r4, #4]
 8007380:	60a6      	str	r6, [r4, #8]
 8007382:	2e00      	cmp	r6, #0
 8007384:	bfa2      	ittt	ge
 8007386:	6821      	ldrge	r1, [r4, #0]
 8007388:	f021 0104 	bicge.w	r1, r1, #4
 800738c:	6021      	strge	r1, [r4, #0]
 800738e:	b90d      	cbnz	r5, 8007394 <_printf_i+0x110>
 8007390:	2e00      	cmp	r6, #0
 8007392:	d04b      	beq.n	800742c <_printf_i+0x1a8>
 8007394:	4616      	mov	r6, r2
 8007396:	fbb5 f1f3 	udiv	r1, r5, r3
 800739a:	fb03 5711 	mls	r7, r3, r1, r5
 800739e:	5dc7      	ldrb	r7, [r0, r7]
 80073a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073a4:	462f      	mov	r7, r5
 80073a6:	42bb      	cmp	r3, r7
 80073a8:	460d      	mov	r5, r1
 80073aa:	d9f4      	bls.n	8007396 <_printf_i+0x112>
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d10b      	bne.n	80073c8 <_printf_i+0x144>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	07df      	lsls	r7, r3, #31
 80073b4:	d508      	bpl.n	80073c8 <_printf_i+0x144>
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	6861      	ldr	r1, [r4, #4]
 80073ba:	4299      	cmp	r1, r3
 80073bc:	bfde      	ittt	le
 80073be:	2330      	movle	r3, #48	@ 0x30
 80073c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80073c8:	1b92      	subs	r2, r2, r6
 80073ca:	6122      	str	r2, [r4, #16]
 80073cc:	f8cd a000 	str.w	sl, [sp]
 80073d0:	464b      	mov	r3, r9
 80073d2:	aa03      	add	r2, sp, #12
 80073d4:	4621      	mov	r1, r4
 80073d6:	4640      	mov	r0, r8
 80073d8:	f7ff fee6 	bl	80071a8 <_printf_common>
 80073dc:	3001      	adds	r0, #1
 80073de:	d14a      	bne.n	8007476 <_printf_i+0x1f2>
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073e4:	b004      	add	sp, #16
 80073e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	f043 0320 	orr.w	r3, r3, #32
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	4833      	ldr	r0, [pc, #204]	@ (80074c0 <_printf_i+0x23c>)
 80073f4:	2778      	movs	r7, #120	@ 0x78
 80073f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	6831      	ldr	r1, [r6, #0]
 80073fe:	061f      	lsls	r7, r3, #24
 8007400:	f851 5b04 	ldr.w	r5, [r1], #4
 8007404:	d402      	bmi.n	800740c <_printf_i+0x188>
 8007406:	065f      	lsls	r7, r3, #25
 8007408:	bf48      	it	mi
 800740a:	b2ad      	uxthmi	r5, r5
 800740c:	6031      	str	r1, [r6, #0]
 800740e:	07d9      	lsls	r1, r3, #31
 8007410:	bf44      	itt	mi
 8007412:	f043 0320 	orrmi.w	r3, r3, #32
 8007416:	6023      	strmi	r3, [r4, #0]
 8007418:	b11d      	cbz	r5, 8007422 <_printf_i+0x19e>
 800741a:	2310      	movs	r3, #16
 800741c:	e7ac      	b.n	8007378 <_printf_i+0xf4>
 800741e:	4827      	ldr	r0, [pc, #156]	@ (80074bc <_printf_i+0x238>)
 8007420:	e7e9      	b.n	80073f6 <_printf_i+0x172>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	f023 0320 	bic.w	r3, r3, #32
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	e7f6      	b.n	800741a <_printf_i+0x196>
 800742c:	4616      	mov	r6, r2
 800742e:	e7bd      	b.n	80073ac <_printf_i+0x128>
 8007430:	6833      	ldr	r3, [r6, #0]
 8007432:	6825      	ldr	r5, [r4, #0]
 8007434:	6961      	ldr	r1, [r4, #20]
 8007436:	1d18      	adds	r0, r3, #4
 8007438:	6030      	str	r0, [r6, #0]
 800743a:	062e      	lsls	r6, r5, #24
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	d501      	bpl.n	8007444 <_printf_i+0x1c0>
 8007440:	6019      	str	r1, [r3, #0]
 8007442:	e002      	b.n	800744a <_printf_i+0x1c6>
 8007444:	0668      	lsls	r0, r5, #25
 8007446:	d5fb      	bpl.n	8007440 <_printf_i+0x1bc>
 8007448:	8019      	strh	r1, [r3, #0]
 800744a:	2300      	movs	r3, #0
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	4616      	mov	r6, r2
 8007450:	e7bc      	b.n	80073cc <_printf_i+0x148>
 8007452:	6833      	ldr	r3, [r6, #0]
 8007454:	1d1a      	adds	r2, r3, #4
 8007456:	6032      	str	r2, [r6, #0]
 8007458:	681e      	ldr	r6, [r3, #0]
 800745a:	6862      	ldr	r2, [r4, #4]
 800745c:	2100      	movs	r1, #0
 800745e:	4630      	mov	r0, r6
 8007460:	f7f8 fede 	bl	8000220 <memchr>
 8007464:	b108      	cbz	r0, 800746a <_printf_i+0x1e6>
 8007466:	1b80      	subs	r0, r0, r6
 8007468:	6060      	str	r0, [r4, #4]
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	6123      	str	r3, [r4, #16]
 800746e:	2300      	movs	r3, #0
 8007470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007474:	e7aa      	b.n	80073cc <_printf_i+0x148>
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	4632      	mov	r2, r6
 800747a:	4649      	mov	r1, r9
 800747c:	4640      	mov	r0, r8
 800747e:	47d0      	blx	sl
 8007480:	3001      	adds	r0, #1
 8007482:	d0ad      	beq.n	80073e0 <_printf_i+0x15c>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	079b      	lsls	r3, r3, #30
 8007488:	d413      	bmi.n	80074b2 <_printf_i+0x22e>
 800748a:	68e0      	ldr	r0, [r4, #12]
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	4298      	cmp	r0, r3
 8007490:	bfb8      	it	lt
 8007492:	4618      	movlt	r0, r3
 8007494:	e7a6      	b.n	80073e4 <_printf_i+0x160>
 8007496:	2301      	movs	r3, #1
 8007498:	4632      	mov	r2, r6
 800749a:	4649      	mov	r1, r9
 800749c:	4640      	mov	r0, r8
 800749e:	47d0      	blx	sl
 80074a0:	3001      	adds	r0, #1
 80074a2:	d09d      	beq.n	80073e0 <_printf_i+0x15c>
 80074a4:	3501      	adds	r5, #1
 80074a6:	68e3      	ldr	r3, [r4, #12]
 80074a8:	9903      	ldr	r1, [sp, #12]
 80074aa:	1a5b      	subs	r3, r3, r1
 80074ac:	42ab      	cmp	r3, r5
 80074ae:	dcf2      	bgt.n	8007496 <_printf_i+0x212>
 80074b0:	e7eb      	b.n	800748a <_printf_i+0x206>
 80074b2:	2500      	movs	r5, #0
 80074b4:	f104 0619 	add.w	r6, r4, #25
 80074b8:	e7f5      	b.n	80074a6 <_printf_i+0x222>
 80074ba:	bf00      	nop
 80074bc:	08007cb1 	.word	0x08007cb1
 80074c0:	08007cc2 	.word	0x08007cc2

080074c4 <__swbuf_r>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	460e      	mov	r6, r1
 80074c8:	4614      	mov	r4, r2
 80074ca:	4605      	mov	r5, r0
 80074cc:	b118      	cbz	r0, 80074d6 <__swbuf_r+0x12>
 80074ce:	6a03      	ldr	r3, [r0, #32]
 80074d0:	b90b      	cbnz	r3, 80074d6 <__swbuf_r+0x12>
 80074d2:	f7fd fb8b 	bl	8004bec <__sinit>
 80074d6:	69a3      	ldr	r3, [r4, #24]
 80074d8:	60a3      	str	r3, [r4, #8]
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	071a      	lsls	r2, r3, #28
 80074de:	d501      	bpl.n	80074e4 <__swbuf_r+0x20>
 80074e0:	6923      	ldr	r3, [r4, #16]
 80074e2:	b943      	cbnz	r3, 80074f6 <__swbuf_r+0x32>
 80074e4:	4621      	mov	r1, r4
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 f82a 	bl	8007540 <__swsetup_r>
 80074ec:	b118      	cbz	r0, 80074f6 <__swbuf_r+0x32>
 80074ee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80074f2:	4638      	mov	r0, r7
 80074f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	1a98      	subs	r0, r3, r2
 80074fc:	6963      	ldr	r3, [r4, #20]
 80074fe:	b2f6      	uxtb	r6, r6
 8007500:	4283      	cmp	r3, r0
 8007502:	4637      	mov	r7, r6
 8007504:	dc05      	bgt.n	8007512 <__swbuf_r+0x4e>
 8007506:	4621      	mov	r1, r4
 8007508:	4628      	mov	r0, r5
 800750a:	f7fe ff05 	bl	8006318 <_fflush_r>
 800750e:	2800      	cmp	r0, #0
 8007510:	d1ed      	bne.n	80074ee <__swbuf_r+0x2a>
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	3b01      	subs	r3, #1
 8007516:	60a3      	str	r3, [r4, #8]
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	701e      	strb	r6, [r3, #0]
 8007520:	6962      	ldr	r2, [r4, #20]
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	429a      	cmp	r2, r3
 8007526:	d004      	beq.n	8007532 <__swbuf_r+0x6e>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	07db      	lsls	r3, r3, #31
 800752c:	d5e1      	bpl.n	80074f2 <__swbuf_r+0x2e>
 800752e:	2e0a      	cmp	r6, #10
 8007530:	d1df      	bne.n	80074f2 <__swbuf_r+0x2e>
 8007532:	4621      	mov	r1, r4
 8007534:	4628      	mov	r0, r5
 8007536:	f7fe feef 	bl	8006318 <_fflush_r>
 800753a:	2800      	cmp	r0, #0
 800753c:	d0d9      	beq.n	80074f2 <__swbuf_r+0x2e>
 800753e:	e7d6      	b.n	80074ee <__swbuf_r+0x2a>

08007540 <__swsetup_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4b29      	ldr	r3, [pc, #164]	@ (80075e8 <__swsetup_r+0xa8>)
 8007544:	4605      	mov	r5, r0
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	460c      	mov	r4, r1
 800754a:	b118      	cbz	r0, 8007554 <__swsetup_r+0x14>
 800754c:	6a03      	ldr	r3, [r0, #32]
 800754e:	b90b      	cbnz	r3, 8007554 <__swsetup_r+0x14>
 8007550:	f7fd fb4c 	bl	8004bec <__sinit>
 8007554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007558:	0719      	lsls	r1, r3, #28
 800755a:	d422      	bmi.n	80075a2 <__swsetup_r+0x62>
 800755c:	06da      	lsls	r2, r3, #27
 800755e:	d407      	bmi.n	8007570 <__swsetup_r+0x30>
 8007560:	2209      	movs	r2, #9
 8007562:	602a      	str	r2, [r5, #0]
 8007564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007568:	81a3      	strh	r3, [r4, #12]
 800756a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800756e:	e033      	b.n	80075d8 <__swsetup_r+0x98>
 8007570:	0758      	lsls	r0, r3, #29
 8007572:	d512      	bpl.n	800759a <__swsetup_r+0x5a>
 8007574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007576:	b141      	cbz	r1, 800758a <__swsetup_r+0x4a>
 8007578:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800757c:	4299      	cmp	r1, r3
 800757e:	d002      	beq.n	8007586 <__swsetup_r+0x46>
 8007580:	4628      	mov	r0, r5
 8007582:	f7ff fc85 	bl	8006e90 <_free_r>
 8007586:	2300      	movs	r3, #0
 8007588:	6363      	str	r3, [r4, #52]	@ 0x34
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	2300      	movs	r3, #0
 8007594:	6063      	str	r3, [r4, #4]
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f043 0308 	orr.w	r3, r3, #8
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	b94b      	cbnz	r3, 80075ba <__swsetup_r+0x7a>
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075b0:	d003      	beq.n	80075ba <__swsetup_r+0x7a>
 80075b2:	4621      	mov	r1, r4
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 f83f 	bl	8007638 <__smakebuf_r>
 80075ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075be:	f013 0201 	ands.w	r2, r3, #1
 80075c2:	d00a      	beq.n	80075da <__swsetup_r+0x9a>
 80075c4:	2200      	movs	r2, #0
 80075c6:	60a2      	str	r2, [r4, #8]
 80075c8:	6962      	ldr	r2, [r4, #20]
 80075ca:	4252      	negs	r2, r2
 80075cc:	61a2      	str	r2, [r4, #24]
 80075ce:	6922      	ldr	r2, [r4, #16]
 80075d0:	b942      	cbnz	r2, 80075e4 <__swsetup_r+0xa4>
 80075d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075d6:	d1c5      	bne.n	8007564 <__swsetup_r+0x24>
 80075d8:	bd38      	pop	{r3, r4, r5, pc}
 80075da:	0799      	lsls	r1, r3, #30
 80075dc:	bf58      	it	pl
 80075de:	6962      	ldrpl	r2, [r4, #20]
 80075e0:	60a2      	str	r2, [r4, #8]
 80075e2:	e7f4      	b.n	80075ce <__swsetup_r+0x8e>
 80075e4:	2000      	movs	r0, #0
 80075e6:	e7f7      	b.n	80075d8 <__swsetup_r+0x98>
 80075e8:	20000188 	.word	0x20000188

080075ec <__swhatbuf_r>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	460c      	mov	r4, r1
 80075f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f4:	2900      	cmp	r1, #0
 80075f6:	b096      	sub	sp, #88	@ 0x58
 80075f8:	4615      	mov	r5, r2
 80075fa:	461e      	mov	r6, r3
 80075fc:	da0d      	bge.n	800761a <__swhatbuf_r+0x2e>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007604:	f04f 0100 	mov.w	r1, #0
 8007608:	bf14      	ite	ne
 800760a:	2340      	movne	r3, #64	@ 0x40
 800760c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007610:	2000      	movs	r0, #0
 8007612:	6031      	str	r1, [r6, #0]
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	b016      	add	sp, #88	@ 0x58
 8007618:	bd70      	pop	{r4, r5, r6, pc}
 800761a:	466a      	mov	r2, sp
 800761c:	f000 f848 	bl	80076b0 <_fstat_r>
 8007620:	2800      	cmp	r0, #0
 8007622:	dbec      	blt.n	80075fe <__swhatbuf_r+0x12>
 8007624:	9901      	ldr	r1, [sp, #4]
 8007626:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800762a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800762e:	4259      	negs	r1, r3
 8007630:	4159      	adcs	r1, r3
 8007632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007636:	e7eb      	b.n	8007610 <__swhatbuf_r+0x24>

08007638 <__smakebuf_r>:
 8007638:	898b      	ldrh	r3, [r1, #12]
 800763a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800763c:	079d      	lsls	r5, r3, #30
 800763e:	4606      	mov	r6, r0
 8007640:	460c      	mov	r4, r1
 8007642:	d507      	bpl.n	8007654 <__smakebuf_r+0x1c>
 8007644:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	2301      	movs	r3, #1
 800764e:	6163      	str	r3, [r4, #20]
 8007650:	b003      	add	sp, #12
 8007652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007654:	ab01      	add	r3, sp, #4
 8007656:	466a      	mov	r2, sp
 8007658:	f7ff ffc8 	bl	80075ec <__swhatbuf_r>
 800765c:	9f00      	ldr	r7, [sp, #0]
 800765e:	4605      	mov	r5, r0
 8007660:	4639      	mov	r1, r7
 8007662:	4630      	mov	r0, r6
 8007664:	f7fe fd42 	bl	80060ec <_malloc_r>
 8007668:	b948      	cbnz	r0, 800767e <__smakebuf_r+0x46>
 800766a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766e:	059a      	lsls	r2, r3, #22
 8007670:	d4ee      	bmi.n	8007650 <__smakebuf_r+0x18>
 8007672:	f023 0303 	bic.w	r3, r3, #3
 8007676:	f043 0302 	orr.w	r3, r3, #2
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	e7e2      	b.n	8007644 <__smakebuf_r+0xc>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	6020      	str	r0, [r4, #0]
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	9b01      	ldr	r3, [sp, #4]
 800768a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800768e:	b15b      	cbz	r3, 80076a8 <__smakebuf_r+0x70>
 8007690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007694:	4630      	mov	r0, r6
 8007696:	f000 f81d 	bl	80076d4 <_isatty_r>
 800769a:	b128      	cbz	r0, 80076a8 <__smakebuf_r+0x70>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	f043 0301 	orr.w	r3, r3, #1
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	431d      	orrs	r5, r3
 80076ac:	81a5      	strh	r5, [r4, #12]
 80076ae:	e7cf      	b.n	8007650 <__smakebuf_r+0x18>

080076b0 <_fstat_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d07      	ldr	r5, [pc, #28]	@ (80076d0 <_fstat_r+0x20>)
 80076b4:	2300      	movs	r3, #0
 80076b6:	4604      	mov	r4, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	4611      	mov	r1, r2
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	f7fa fb19 	bl	8001cf4 <_fstat>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	d102      	bne.n	80076cc <_fstat_r+0x1c>
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	b103      	cbz	r3, 80076cc <_fstat_r+0x1c>
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	bd38      	pop	{r3, r4, r5, pc}
 80076ce:	bf00      	nop
 80076d0:	20000478 	.word	0x20000478

080076d4 <_isatty_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4d06      	ldr	r5, [pc, #24]	@ (80076f0 <_isatty_r+0x1c>)
 80076d8:	2300      	movs	r3, #0
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	602b      	str	r3, [r5, #0]
 80076e0:	f7fa fb18 	bl	8001d14 <_isatty>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	d102      	bne.n	80076ee <_isatty_r+0x1a>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	b103      	cbz	r3, 80076ee <_isatty_r+0x1a>
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	bd38      	pop	{r3, r4, r5, pc}
 80076f0:	20000478 	.word	0x20000478

080076f4 <_raise_r>:
 80076f4:	291f      	cmp	r1, #31
 80076f6:	b538      	push	{r3, r4, r5, lr}
 80076f8:	4605      	mov	r5, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	d904      	bls.n	8007708 <_raise_r+0x14>
 80076fe:	2316      	movs	r3, #22
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800770a:	b112      	cbz	r2, 8007712 <_raise_r+0x1e>
 800770c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007710:	b94b      	cbnz	r3, 8007726 <_raise_r+0x32>
 8007712:	4628      	mov	r0, r5
 8007714:	f000 f830 	bl	8007778 <_getpid_r>
 8007718:	4622      	mov	r2, r4
 800771a:	4601      	mov	r1, r0
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	f000 b817 	b.w	8007754 <_kill_r>
 8007726:	2b01      	cmp	r3, #1
 8007728:	d00a      	beq.n	8007740 <_raise_r+0x4c>
 800772a:	1c59      	adds	r1, r3, #1
 800772c:	d103      	bne.n	8007736 <_raise_r+0x42>
 800772e:	2316      	movs	r3, #22
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	2001      	movs	r0, #1
 8007734:	e7e7      	b.n	8007706 <_raise_r+0x12>
 8007736:	2100      	movs	r1, #0
 8007738:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800773c:	4620      	mov	r0, r4
 800773e:	4798      	blx	r3
 8007740:	2000      	movs	r0, #0
 8007742:	e7e0      	b.n	8007706 <_raise_r+0x12>

08007744 <raise>:
 8007744:	4b02      	ldr	r3, [pc, #8]	@ (8007750 <raise+0xc>)
 8007746:	4601      	mov	r1, r0
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	f7ff bfd3 	b.w	80076f4 <_raise_r>
 800774e:	bf00      	nop
 8007750:	20000188 	.word	0x20000188

08007754 <_kill_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d07      	ldr	r5, [pc, #28]	@ (8007774 <_kill_r+0x20>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	f7fa fa67 	bl	8001c34 <_kill>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	d102      	bne.n	8007770 <_kill_r+0x1c>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	b103      	cbz	r3, 8007770 <_kill_r+0x1c>
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	bd38      	pop	{r3, r4, r5, pc}
 8007772:	bf00      	nop
 8007774:	20000478 	.word	0x20000478

08007778 <_getpid_r>:
 8007778:	f7fa ba54 	b.w	8001c24 <_getpid>

0800777c <fmin>:
 800777c:	b508      	push	{r3, lr}
 800777e:	ed2d 8b04 	vpush	{d8-d9}
 8007782:	eeb0 8a40 	vmov.f32	s16, s0
 8007786:	eef0 8a60 	vmov.f32	s17, s1
 800778a:	eeb0 9a41 	vmov.f32	s18, s2
 800778e:	eef0 9a61 	vmov.f32	s19, s3
 8007792:	f000 f81d 	bl	80077d0 <__fpclassifyd>
 8007796:	b950      	cbnz	r0, 80077ae <fmin+0x32>
 8007798:	eeb0 8a49 	vmov.f32	s16, s18
 800779c:	eef0 8a69 	vmov.f32	s17, s19
 80077a0:	eeb0 0a48 	vmov.f32	s0, s16
 80077a4:	eef0 0a68 	vmov.f32	s1, s17
 80077a8:	ecbd 8b04 	vpop	{d8-d9}
 80077ac:	bd08      	pop	{r3, pc}
 80077ae:	eeb0 0a49 	vmov.f32	s0, s18
 80077b2:	eef0 0a69 	vmov.f32	s1, s19
 80077b6:	f000 f80b 	bl	80077d0 <__fpclassifyd>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d0f0      	beq.n	80077a0 <fmin+0x24>
 80077be:	ec53 2b19 	vmov	r2, r3, d9
 80077c2:	ec51 0b18 	vmov	r0, r1, d8
 80077c6:	f7f9 f9a9 	bl	8000b1c <__aeabi_dcmplt>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d0e4      	beq.n	8007798 <fmin+0x1c>
 80077ce:	e7e7      	b.n	80077a0 <fmin+0x24>

080077d0 <__fpclassifyd>:
 80077d0:	ec51 0b10 	vmov	r0, r1, d0
 80077d4:	b510      	push	{r4, lr}
 80077d6:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80077da:	460b      	mov	r3, r1
 80077dc:	d019      	beq.n	8007812 <__fpclassifyd+0x42>
 80077de:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80077e2:	490e      	ldr	r1, [pc, #56]	@ (800781c <__fpclassifyd+0x4c>)
 80077e4:	428a      	cmp	r2, r1
 80077e6:	d90e      	bls.n	8007806 <__fpclassifyd+0x36>
 80077e8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80077ec:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80077f0:	428a      	cmp	r2, r1
 80077f2:	d908      	bls.n	8007806 <__fpclassifyd+0x36>
 80077f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007820 <__fpclassifyd+0x50>)
 80077f6:	4213      	tst	r3, r2
 80077f8:	d007      	beq.n	800780a <__fpclassifyd+0x3a>
 80077fa:	4294      	cmp	r4, r2
 80077fc:	d107      	bne.n	800780e <__fpclassifyd+0x3e>
 80077fe:	fab0 f080 	clz	r0, r0
 8007802:	0940      	lsrs	r0, r0, #5
 8007804:	bd10      	pop	{r4, pc}
 8007806:	2004      	movs	r0, #4
 8007808:	e7fc      	b.n	8007804 <__fpclassifyd+0x34>
 800780a:	2003      	movs	r0, #3
 800780c:	e7fa      	b.n	8007804 <__fpclassifyd+0x34>
 800780e:	2000      	movs	r0, #0
 8007810:	e7f8      	b.n	8007804 <__fpclassifyd+0x34>
 8007812:	2800      	cmp	r0, #0
 8007814:	d1ee      	bne.n	80077f4 <__fpclassifyd+0x24>
 8007816:	2002      	movs	r0, #2
 8007818:	e7f4      	b.n	8007804 <__fpclassifyd+0x34>
 800781a:	bf00      	nop
 800781c:	7fdfffff 	.word	0x7fdfffff
 8007820:	7ff00000 	.word	0x7ff00000

08007824 <fmax>:
 8007824:	b508      	push	{r3, lr}
 8007826:	ed2d 8b04 	vpush	{d8-d9}
 800782a:	eeb0 8a40 	vmov.f32	s16, s0
 800782e:	eef0 8a60 	vmov.f32	s17, s1
 8007832:	eeb0 9a41 	vmov.f32	s18, s2
 8007836:	eef0 9a61 	vmov.f32	s19, s3
 800783a:	f7ff ffc9 	bl	80077d0 <__fpclassifyd>
 800783e:	b950      	cbnz	r0, 8007856 <fmax+0x32>
 8007840:	eeb0 8a49 	vmov.f32	s16, s18
 8007844:	eef0 8a69 	vmov.f32	s17, s19
 8007848:	eeb0 0a48 	vmov.f32	s0, s16
 800784c:	eef0 0a68 	vmov.f32	s1, s17
 8007850:	ecbd 8b04 	vpop	{d8-d9}
 8007854:	bd08      	pop	{r3, pc}
 8007856:	eeb0 0a49 	vmov.f32	s0, s18
 800785a:	eef0 0a69 	vmov.f32	s1, s19
 800785e:	f7ff ffb7 	bl	80077d0 <__fpclassifyd>
 8007862:	2800      	cmp	r0, #0
 8007864:	d0f0      	beq.n	8007848 <fmax+0x24>
 8007866:	ec53 2b19 	vmov	r2, r3, d9
 800786a:	ec51 0b18 	vmov	r0, r1, d8
 800786e:	f7f9 f973 	bl	8000b58 <__aeabi_dcmpgt>
 8007872:	2800      	cmp	r0, #0
 8007874:	d0e4      	beq.n	8007840 <fmax+0x1c>
 8007876:	e7e7      	b.n	8007848 <fmax+0x24>

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
