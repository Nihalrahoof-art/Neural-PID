
uart_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080074b8  080074b8  000084b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078fc  080078fc  000091dc  2**0
                  CONTENTS
  4 .ARM          00000008  080078fc  080078fc  000088fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007904  08007904  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007904  08007904  00008904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007908  08007908  00008908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800790c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001dc  08007ae8  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08007ae8  00009488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ded5  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002056  00000000  00000000  000170e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00019138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a91  00000000  00000000  00019ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bed  00000000  00000000  0001a951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbf5  00000000  00000000  0003d53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2caa  00000000  00000000  0004d133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fddd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac0  00000000  00000000  0011fe20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001248e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800749c 	.word	0x0800749c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800749c 	.word	0x0800749c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <process_uart_data>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t data[] = "Hello world\n";


void process_uart_data() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    char *cmd_token = strtok((char *)rx_buffer, ",");
 8000fae:	4918      	ldr	r1, [pc, #96]	@ (8001010 <process_uart_data+0x68>)
 8000fb0:	4818      	ldr	r0, [pc, #96]	@ (8001014 <process_uart_data+0x6c>)
 8000fb2:	f004 fb01 	bl	80055b8 <strtok>
 8000fb6:	6078      	str	r0, [r7, #4]
    char *imu_token = strtok(NULL, ",");
 8000fb8:	4915      	ldr	r1, [pc, #84]	@ (8001010 <process_uart_data+0x68>)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f004 fafc 	bl	80055b8 <strtok>
 8000fc0:	6038      	str	r0, [r7, #0]

    if (cmd_token && imu_token) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01a      	beq.n	8000ffe <process_uart_data+0x56>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d017      	beq.n	8000ffe <process_uart_data+0x56>
        cmd_vel = atof(cmd_token);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f003 fc0c 	bl	80047ec <atof>
 8000fd4:	ec53 2b10 	vmov	r2, r3, d0
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fde6 	bl	8000bac <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <process_uart_data+0x70>)
 8000fe4:	6013      	str	r3, [r2, #0]
        imu_vel = atof(imu_token);
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f003 fc00 	bl	80047ec <atof>
 8000fec:	ec53 2b10 	vmov	r2, r3, d0
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fdda 	bl	8000bac <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <process_uart_data+0x74>)
 8000ffc:	6013      	str	r3, [r2, #0]
    }
    memset(rx_buffer, 0, 32);
 8000ffe:	2220      	movs	r2, #32
 8001000:	2100      	movs	r1, #0
 8001002:	4804      	ldr	r0, [pc, #16]	@ (8001014 <process_uart_data+0x6c>)
 8001004:	f004 fb34 	bl	8005670 <memset>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	080074b8 	.word	0x080074b8
 8001014:	200002f4 	.word	0x200002f4
 8001018:	20000318 	.word	0x20000318
 800101c:	2000031c 	.word	0x2000031c

08001020 <set_pwm>:


void set_pwm(float duty_cycle) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0a01 	vstr	s0, [r7, #4]
    if (duty_cycle > 100.0f) duty_cycle = 100.0f;
 800102a:	edd7 7a01 	vldr	s15, [r7, #4]
 800102e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800108c <set_pwm+0x6c>
 8001032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	dd01      	ble.n	8001040 <set_pwm+0x20>
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <set_pwm+0x70>)
 800103e:	607b      	str	r3, [r7, #4]
    if (duty_cycle < 0.0f) duty_cycle = 0.0f;
 8001040:	edd7 7a01 	vldr	s15, [r7, #4]
 8001044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	d502      	bpl.n	8001054 <set_pwm+0x34>
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	607b      	str	r3, [r7, #4]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (htim3.Init.Period * duty_cycle) / 100);
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <set_pwm+0x74>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001060:	edd7 7a01 	vldr	s15, [r7, #4]
 8001064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001068:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800108c <set_pwm+0x6c>
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <set_pwm+0x74>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001078:	ee17 2a90 	vmov	r2, s15
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	42c80000 	.word	0x42c80000
 8001090:	42c80000 	.word	0x42c80000
 8001094:	200001f8 	.word	0x200001f8

08001098 <set_direction>:

void set_direction(int direction) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    // Direction control: 0 = reverse, 1 = forward
    if (direction == 1) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <set_direction+0x1a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // DIR pin LOW for forward
 80010a6:	2200      	movs	r2, #0
 80010a8:	2102      	movs	r1, #2
 80010aa:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <set_direction+0x2c>)
 80010ac:	f001 f91a 	bl	80022e4 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // DIR pin HIGH for reverse
    }
}
 80010b0:	e004      	b.n	80010bc <set_direction+0x24>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // DIR pin HIGH for reverse
 80010b2:	2201      	movs	r2, #1
 80010b4:	2102      	movs	r1, #2
 80010b6:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <set_direction+0x2c>)
 80010b8:	f001 f914 	bl	80022e4 <HAL_GPIO_WritePin>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40020400 	.word	0x40020400

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f000 fd3c 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f8fc 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 fa16 	bl	8001504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d8:	f000 f9ea 	bl	80014b0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80010dc:	f000 f9be 	bl	800145c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80010e0:	f000 f962 	bl	80013a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

//HAL_UART_Receive_IT(&huart1, rx_data, 32);
HAL_UART_Receive_IT(&huart1, &rx_data[rx_index], 1);
 80010e4:	4b68      	ldr	r3, [pc, #416]	@ (8001288 <main+0x1c0>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b68      	ldr	r3, [pc, #416]	@ (800128c <main+0x1c4>)
 80010ec:	4413      	add	r3, r2
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	4867      	ldr	r0, [pc, #412]	@ (8001290 <main+0x1c8>)
 80010f4:	f002 fc56 	bl	80039a4 <HAL_UART_Receive_IT>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Start PWM
 80010f8:	2100      	movs	r1, #0
 80010fa:	4866      	ldr	r0, [pc, #408]	@ (8001294 <main+0x1cc>)
 80010fc:	f001 ff44 	bl	8002f88 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
  {
	  if (data_received) {
 8001100:	4b65      	ldr	r3, [pc, #404]	@ (8001298 <main+0x1d0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <main+0x4a>
	              process_uart_data();
 8001108:	f7ff ff4e 	bl	8000fa8 <process_uart_data>
	              data_received = 0;
 800110c:	4b62      	ldr	r3, [pc, #392]	@ (8001298 <main+0x1d0>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	          }    /* USER CODE END WHILE */
	  //float error = cmd_vel - imu_vel;

	  if (cmd_vel > imu_vel) {
 8001112:	4b62      	ldr	r3, [pc, #392]	@ (800129c <main+0x1d4>)
 8001114:	ed93 7a00 	vldr	s14, [r3]
 8001118:	4b61      	ldr	r3, [pc, #388]	@ (80012a0 <main+0x1d8>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd3c      	ble.n	80011a2 <main+0xda>
	      pwm_duty += step_size;  // Increase PWM if velocity is too low
 8001128:	4b5e      	ldr	r3, [pc, #376]	@ (80012a4 <main+0x1dc>)
 800112a:	ed93 7a00 	vldr	s14, [r3]
 800112e:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <main+0x1e0>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	4b5a      	ldr	r3, [pc, #360]	@ (80012a4 <main+0x1dc>)
 800113a:	edc3 7a00 	vstr	s15, [r3]
	      if (pwm_duty > 100.0f) pwm_duty = 100.0f;
 800113e:	4b59      	ldr	r3, [pc, #356]	@ (80012a4 <main+0x1dc>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80012ac <main+0x1e4>
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	dd02      	ble.n	8001158 <main+0x90>
 8001152:	4b54      	ldr	r3, [pc, #336]	@ (80012a4 <main+0x1dc>)
 8001154:	4a56      	ldr	r2, [pc, #344]	@ (80012b0 <main+0x1e8>)
 8001156:	601a      	str	r2, [r3, #0]
	      set_direction(0);  // Forward
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff ff9d 	bl	8001098 <set_direction>

	      // Continuously send 0.5 until imu_vel reaches cmd_vel
	      strcpy(adjust, "0.5\n");
 800115e:	4b55      	ldr	r3, [pc, #340]	@ (80012b4 <main+0x1ec>)
 8001160:	4a55      	ldr	r2, [pc, #340]	@ (80012b8 <main+0x1f0>)
 8001162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001166:	6018      	str	r0, [r3, #0]
 8001168:	3304      	adds	r3, #4
 800116a:	7019      	strb	r1, [r3, #0]
	      HAL_Delay(100);
 800116c:	2064      	movs	r0, #100	@ 0x64
 800116e:	f000 fd5d 	bl	8001c2c <HAL_Delay>
	      HAL_UART_Transmit_IT(&huart1, (uint8_t *)adjust, strlen(adjust));
 8001172:	4850      	ldr	r0, [pc, #320]	@ (80012b4 <main+0x1ec>)
 8001174:	f7ff f84c 	bl	8000210 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	494d      	ldr	r1, [pc, #308]	@ (80012b4 <main+0x1ec>)
 8001180:	4843      	ldr	r0, [pc, #268]	@ (8001290 <main+0x1c8>)
 8001182:	f002 fbd9 	bl	8003938 <HAL_UART_Transmit_IT>
	      HAL_Delay(100);
 8001186:	2064      	movs	r0, #100	@ 0x64
 8001188:	f000 fd50 	bl	8001c2c <HAL_Delay>
	      more++;
 800118c:	4b4b      	ldr	r3, [pc, #300]	@ (80012bc <main+0x1f4>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800119a:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <main+0x1f4>)
 800119c:	edc3 7a00 	vstr	s15, [r3]
 80011a0:	e069      	b.n	8001276 <main+0x1ae>

	  } else if (cmd_vel < imu_vel) {
 80011a2:	4b3e      	ldr	r3, [pc, #248]	@ (800129c <main+0x1d4>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <main+0x1d8>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	d53b      	bpl.n	8001230 <main+0x168>
		  pwm_duty += step_size;  // Decrease PWM if velocity is too high
 80011b8:	4b3a      	ldr	r3, [pc, #232]	@ (80012a4 <main+0x1dc>)
 80011ba:	ed93 7a00 	vldr	s14, [r3]
 80011be:	4b3a      	ldr	r3, [pc, #232]	@ (80012a8 <main+0x1e0>)
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <main+0x1dc>)
 80011ca:	edc3 7a00 	vstr	s15, [r3]
	      if (pwm_duty < 0.0f) pwm_duty = 0.0f;
 80011ce:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <main+0x1dc>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d503      	bpl.n	80011e6 <main+0x11e>
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <main+0x1dc>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
	      set_direction(1);  // Reverse
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7ff ff56 	bl	8001098 <set_direction>

	      // Continuously send -0.5 until imu_vel reaches cmd_vel
	      strcpy(adjust, "-0.5\n");
 80011ec:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <main+0x1ec>)
 80011ee:	4a34      	ldr	r2, [pc, #208]	@ (80012c0 <main+0x1f8>)
 80011f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f4:	6018      	str	r0, [r3, #0]
 80011f6:	3304      	adds	r3, #4
 80011f8:	8019      	strh	r1, [r3, #0]
	      HAL_Delay(100);
 80011fa:	2064      	movs	r0, #100	@ 0x64
 80011fc:	f000 fd16 	bl	8001c2c <HAL_Delay>
	      HAL_UART_Transmit_IT(&huart1, (uint8_t *)adjust, strlen(adjust));
 8001200:	482c      	ldr	r0, [pc, #176]	@ (80012b4 <main+0x1ec>)
 8001202:	f7ff f805 	bl	8000210 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29b      	uxth	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	4929      	ldr	r1, [pc, #164]	@ (80012b4 <main+0x1ec>)
 800120e:	4820      	ldr	r0, [pc, #128]	@ (8001290 <main+0x1c8>)
 8001210:	f002 fb92 	bl	8003938 <HAL_UART_Transmit_IT>
	      HAL_Delay(100);
 8001214:	2064      	movs	r0, #100	@ 0x64
 8001216:	f000 fd09 	bl	8001c2c <HAL_Delay>
	      less++;
 800121a:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <main+0x1fc>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001228:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <main+0x1fc>)
 800122a:	edc3 7a00 	vstr	s15, [r3]
 800122e:	e022      	b.n	8001276 <main+0x1ae>

	  } else {  // When cmd_vel == imu_vel
	      pwm_duty = 0.0f;  // Stop actuator
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <main+0x1dc>)
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
	      set_pwm(pwm_duty);
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <main+0x1dc>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff feed 	bl	8001020 <set_pwm>

	      // Send 0 to stop imu_vel changes
	      strcpy(adjust, "0\n");
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <main+0x1ec>)
 8001248:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <main+0x200>)
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	4611      	mov	r1, r2
 800124e:	8019      	strh	r1, [r3, #0]
 8001250:	3302      	adds	r3, #2
 8001252:	0c12      	lsrs	r2, r2, #16
 8001254:	701a      	strb	r2, [r3, #0]
	      HAL_Delay(10);
 8001256:	200a      	movs	r0, #10
 8001258:	f000 fce8 	bl	8001c2c <HAL_Delay>
	      HAL_UART_Transmit_IT(&huart1, (uint8_t *)adjust, strlen(adjust));
 800125c:	4815      	ldr	r0, [pc, #84]	@ (80012b4 <main+0x1ec>)
 800125e:	f7fe ffd7 	bl	8000210 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	b29b      	uxth	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	4912      	ldr	r1, [pc, #72]	@ (80012b4 <main+0x1ec>)
 800126a:	4809      	ldr	r0, [pc, #36]	@ (8001290 <main+0x1c8>)
 800126c:	f002 fb64 	bl	8003938 <HAL_UART_Transmit_IT>
	      HAL_Delay(10);
 8001270:	200a      	movs	r0, #10
 8001272:	f000 fcdb 	bl	8001c2c <HAL_Delay>
	  }

	  // Update PWM only once per loop
	  set_pwm(pwm_duty);
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <main+0x1dc>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	f7ff fece 	bl	8001020 <set_pwm>
	  if (data_received) {
 8001284:	e73c      	b.n	8001100 <main+0x38>
 8001286:	bf00      	nop
 8001288:	200002d0 	.word	0x200002d0
 800128c:	200002d4 	.word	0x200002d4
 8001290:	20000240 	.word	0x20000240
 8001294:	200001f8 	.word	0x200001f8
 8001298:	20000314 	.word	0x20000314
 800129c:	20000318 	.word	0x20000318
 80012a0:	2000031c 	.word	0x2000031c
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000004 	.word	0x20000004
 80012ac:	42c80000 	.word	0x42c80000
 80012b0:	42c80000 	.word	0x42c80000
 80012b4:	20000328 	.word	0x20000328
 80012b8:	080074bc 	.word	0x080074bc
 80012bc:	20000320 	.word	0x20000320
 80012c0:	080074c4 	.word	0x080074c4
 80012c4:	20000324 	.word	0x20000324
 80012c8:	080074cc 	.word	0x080074cc

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	@ 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	2234      	movs	r2, #52	@ 0x34
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 f9c8 	bl	8005670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <SystemClock_Config+0xd4>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	4a29      	ldr	r2, [pc, #164]	@ (80013a0 <SystemClock_Config+0xd4>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001300:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <SystemClock_Config+0xd4>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <SystemClock_Config+0xd8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <SystemClock_Config+0xd8>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <SystemClock_Config+0xd8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132c:	2302      	movs	r3, #2
 800132e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001330:	2301      	movs	r3, #1
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001334:	2310      	movs	r3, #16
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001340:	2310      	movs	r3, #16
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001344:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001348:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800134a:	2304      	movs	r3, #4
 800134c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001352:	2302      	movs	r3, #2
 8001354:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fb26 	bl	80029ac <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001366:	f000 f993 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2302      	movs	r3, #2
 8001370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f000 ffc6 	bl	8002318 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001392:	f000 f97d 	bl	8001690 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3750      	adds	r7, #80	@ 0x50
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000

080013a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ca:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <MX_TIM3_Init+0xac>)
 80013cc:	4a22      	ldr	r2, [pc, #136]	@ (8001458 <MX_TIM3_Init+0xb0>)
 80013ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 80013d0:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <MX_TIM3_Init+0xac>)
 80013d2:	2253      	movs	r2, #83	@ 0x53
 80013d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <MX_TIM3_Init+0xac>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <MX_TIM3_Init+0xac>)
 80013de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_TIM3_Init+0xac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_TIM3_Init+0xac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013f0:	4818      	ldr	r0, [pc, #96]	@ (8001454 <MX_TIM3_Init+0xac>)
 80013f2:	f001 fd79 	bl	8002ee8 <HAL_TIM_PWM_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013fc:	f000 f948 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4619      	mov	r1, r3
 800140e:	4811      	ldr	r0, [pc, #68]	@ (8001454 <MX_TIM3_Init+0xac>)
 8001410:	f002 f9c6 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800141a:	f000 f939 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141e:	2360      	movs	r3, #96	@ 0x60
 8001420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4807      	ldr	r0, [pc, #28]	@ (8001454 <MX_TIM3_Init+0xac>)
 8001436:	f001 fe6f 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001440:	f000 f926 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001444:	4803      	ldr	r0, [pc, #12]	@ (8001454 <MX_TIM3_Init+0xac>)
 8001446:	f000 f973 	bl	8001730 <HAL_TIM_MspPostInit>

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001f8 	.word	0x200001f8
 8001458:	40000400 	.word	0x40000400

0800145c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <MX_USART1_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001494:	f002 fa00 	bl	8003898 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f000 f8f7 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000240 	.word	0x20000240
 80014ac:	40011000 	.word	0x40011000

080014b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <MX_USART2_UART_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014e8:	f002 f9d6 	bl	8003898 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014f2:	f000 f8cd 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000288 	.word	0x20000288
 8001500:	40004400 	.word	0x40004400

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a36      	ldr	r2, [pc, #216]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <MX_GPIO_Init+0xf8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <MX_GPIO_Init+0xf8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a2f      	ldr	r2, [pc, #188]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b29      	ldr	r3, [pc, #164]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a28      	ldr	r2, [pc, #160]	@ (80015fc <MX_GPIO_Init+0xf8>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <MX_GPIO_Init+0xf8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2120      	movs	r1, #32
 800158e:	481c      	ldr	r0, [pc, #112]	@ (8001600 <MX_GPIO_Init+0xfc>)
 8001590:	f000 fea8 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2102      	movs	r1, #2
 8001598:	481a      	ldr	r0, [pc, #104]	@ (8001604 <MX_GPIO_Init+0x100>)
 800159a:	f000 fea3 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800159e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4814      	ldr	r0, [pc, #80]	@ (8001608 <MX_GPIO_Init+0x104>)
 80015b6:	f000 fd01 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ba:	2320      	movs	r3, #32
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	480b      	ldr	r0, [pc, #44]	@ (8001600 <MX_GPIO_Init+0xfc>)
 80015d2:	f000 fcf3 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015d6:	2302      	movs	r3, #2
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_GPIO_Init+0x100>)
 80015ee:	f000 fce5 	bl	8001fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	@ 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40020800 	.word	0x40020800

0800160c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <HAL_UART_RxCpltCallback+0x6c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d127      	bne.n	800166e <HAL_UART_RxCpltCallback+0x62>
        if (rx_data[0] == '\n') {
 800161e:	4b17      	ldr	r3, [pc, #92]	@ (800167c <HAL_UART_RxCpltCallback+0x70>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d10c      	bne.n	8001640 <HAL_UART_RxCpltCallback+0x34>
            rx_buffer[rx_index] = '\0';
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <HAL_UART_RxCpltCallback+0x74>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_UART_RxCpltCallback+0x78>)
 800162e:	2100      	movs	r1, #0
 8001630:	5499      	strb	r1, [r3, r2]
            data_received = 1;
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_UART_RxCpltCallback+0x7c>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_UART_RxCpltCallback+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e011      	b.n	8001664 <HAL_UART_RxCpltCallback+0x58>
        } else {
            rx_buffer[rx_index++] = rx_data[0];
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_UART_RxCpltCallback+0x74>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	b2d1      	uxtb	r1, r2
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <HAL_UART_RxCpltCallback+0x74>)
 800164a:	7011      	strb	r1, [r2, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_UART_RxCpltCallback+0x70>)
 8001650:	7819      	ldrb	r1, [r3, #0]
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_UART_RxCpltCallback+0x78>)
 8001654:	5499      	strb	r1, [r3, r2]
            if (rx_index >= 32) rx_index = 0;
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_UART_RxCpltCallback+0x74>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b1f      	cmp	r3, #31
 800165c:	d902      	bls.n	8001664 <HAL_UART_RxCpltCallback+0x58>
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <HAL_UART_RxCpltCallback+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, &rx_data[0], 1);
 8001664:	2201      	movs	r2, #1
 8001666:	4905      	ldr	r1, [pc, #20]	@ (800167c <HAL_UART_RxCpltCallback+0x70>)
 8001668:	4808      	ldr	r0, [pc, #32]	@ (800168c <HAL_UART_RxCpltCallback+0x80>)
 800166a:	f002 f99b 	bl	80039a4 <HAL_UART_Receive_IT>
    }
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40011000 	.word	0x40011000
 800167c:	200002d4 	.word	0x200002d4
 8001680:	200002d0 	.word	0x200002d0
 8001684:	200002f4 	.word	0x200002f4
 8001688:	20000314 	.word	0x20000314
 800168c:	20000240 	.word	0x20000240

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <Error_Handler+0x8>

0800169c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016da:	2007      	movs	r0, #7
 80016dc:	f000 fb9a 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_TIM_PWM_MspInit+0x3c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10d      	bne.n	800171a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_TIM_PWM_MspInit+0x40>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_TIM_PWM_MspInit+0x40>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <HAL_TIM_PWM_MspInit+0x40>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40000400 	.word	0x40000400
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <HAL_TIM_MspPostInit+0x68>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d11d      	bne.n	800178e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_TIM_MspPostInit+0x6c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	@ (800179c <HAL_TIM_MspPostInit+0x6c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_TIM_MspPostInit+0x6c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176e:	2340      	movs	r3, #64	@ 0x40
 8001770:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800177e:	2302      	movs	r3, #2
 8001780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <HAL_TIM_MspPostInit+0x70>)
 800178a:	f000 fc17 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40000400 	.word	0x40000400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a3a      	ldr	r2, [pc, #232]	@ (80018ac <HAL_UART_MspInit+0x108>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d135      	bne.n	8001832 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	4b39      	ldr	r3, [pc, #228]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a38      	ldr	r2, [pc, #224]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b36      	ldr	r3, [pc, #216]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	4b32      	ldr	r3, [pc, #200]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a31      	ldr	r2, [pc, #196]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b2f      	ldr	r3, [pc, #188]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001810:	2307      	movs	r3, #7
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4826      	ldr	r0, [pc, #152]	@ (80018b4 <HAL_UART_MspInit+0x110>)
 800181c:	f000 fbce 	bl	8001fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2025      	movs	r0, #37	@ 0x25
 8001826:	f000 fb00 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800182a:	2025      	movs	r0, #37	@ 0x25
 800182c:	f000 fb19 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001830:	e038      	b.n	80018a4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a20      	ldr	r2, [pc, #128]	@ (80018b8 <HAL_UART_MspInit+0x114>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d133      	bne.n	80018a4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 8001846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184a:	6413      	str	r3, [r2, #64]	@ 0x40
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001860:	4a13      	ldr	r2, [pc, #76]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6313      	str	r3, [r2, #48]	@ 0x30
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_UART_MspInit+0x10c>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001874:	230c      	movs	r3, #12
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001884:	2307      	movs	r3, #7
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <HAL_UART_MspInit+0x110>)
 8001890:	f000 fb94 	bl	8001fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2026      	movs	r0, #38	@ 0x26
 800189a:	f000 fac6 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800189e:	2026      	movs	r0, #38	@ 0x26
 80018a0:	f000 fadf 	bl	8001e62 <HAL_NVIC_EnableIRQ>
}
 80018a4:	bf00      	nop
 80018a6:	3730      	adds	r7, #48	@ 0x30
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40004400 	.word	0x40004400

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 f96b 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <USART1_IRQHandler+0x10>)
 8001922:	f002 f865 	bl	80039f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000240 	.word	0x20000240

08001930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <USART2_IRQHandler+0x10>)
 8001936:	f002 f85b 	bl	80039f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000288 	.word	0x20000288

08001944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return 1;
 8001948:	2301      	movs	r3, #1
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_kill>:

int _kill(int pid, int sig)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800195e:	f003 fe8f 	bl	8005680 <__errno>
 8001962:	4603      	mov	r3, r0
 8001964:	2216      	movs	r2, #22
 8001966:	601a      	str	r2, [r3, #0]
  return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_exit>:

void _exit (int status)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800197c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ffe7 	bl	8001954 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001986:	bf00      	nop
 8001988:	e7fd      	b.n	8001986 <_exit+0x12>

0800198a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e00a      	b.n	80019b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800199c:	f3af 8000 	nop.w
 80019a0:	4601      	mov	r1, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	60ba      	str	r2, [r7, #8]
 80019a8:	b2ca      	uxtb	r2, r1
 80019aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3301      	adds	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dbf0      	blt.n	800199c <_read+0x12>
  }

  return len;
 80019ba:	687b      	ldr	r3, [r7, #4]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e009      	b.n	80019ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	60ba      	str	r2, [r7, #8]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dbf1      	blt.n	80019d6 <_write+0x12>
  }
  return len;
 80019f2:	687b      	ldr	r3, [r7, #4]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_close>:

int _close(int file)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a24:	605a      	str	r2, [r3, #4]
  return 0;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_isatty>:

int _isatty(int file)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f003 fdf4 	bl	8005680 <__errno>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20020000 	.word	0x20020000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20000334 	.word	0x20000334
 8001acc:	20000488 	.word	0x20000488

08001ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001af8:	f7ff ffea 	bl	8001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001afe:	490d      	ldr	r1, [pc, #52]	@ (8001b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b00:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b14:	4c0a      	ldr	r4, [pc, #40]	@ (8001b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f003 fdb3 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b26:	f7ff facf 	bl	80010c8 <main>
  bx  lr    
 8001b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b38:	0800790c 	.word	0x0800790c
  ldr r2, =_sbss
 8001b3c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b40:	20000488 	.word	0x20000488

08001b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <HAL_Init+0x40>)
 8001b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <HAL_Init+0x40>)
 8001b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a07      	ldr	r2, [pc, #28]	@ (8001b88 <HAL_Init+0x40>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f000 f94f 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f000 f808 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7c:	f7ff fd8e 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_InitTick+0x54>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_InitTick+0x58>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f967 	bl	8001e7e <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00e      	b.n	8001bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d80a      	bhi.n	8001bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc8:	f000 f92f 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bcc:	4a06      	ldr	r2, [pc, #24]	@ (8001be8 <HAL_InitTick+0x5c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000010 	.word	0x20000010
 8001be8:	2000000c 	.word	0x2000000c

08001bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_IncTick+0x20>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000010 	.word	0x20000010
 8001c10:	20000338 	.word	0x20000338

08001c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return uwTick;
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_GetTick+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000338 	.word	0x20000338

08001c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff ffee 	bl	8001c14 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c44:	d005      	beq.n	8001c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <HAL_Delay+0x44>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c52:	bf00      	nop
 8001c54:	f7ff ffde 	bl	8001c14 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d8f7      	bhi.n	8001c54 <HAL_Delay+0x28>
  {
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000010 	.word	0x20000010

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	@ (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	@ (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff feb6 	bl	8001c14 <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e052      	b.n	8001f6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0216 	bic.w	r2, r2, #22
 8001ed6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <HAL_DMA_Abort+0x62>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0208 	bic.w	r2, r2, #8
 8001f06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f18:	e013      	b.n	8001f42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1a:	f7ff fe7b 	bl	8001c14 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d90c      	bls.n	8001f42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2203      	movs	r2, #3
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e015      	b.n	8001f6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e4      	bne.n	8001f1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	223f      	movs	r2, #63	@ 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e00c      	b.n	8001fae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2205      	movs	r2, #5
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e165      	b.n	80022a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f040 8154 	bne.w	800229e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d005      	beq.n	800200e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	2b02      	cmp	r3, #2
 800200c:	d130      	bne.n	8002070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 0201 	and.w	r2, r3, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b03      	cmp	r3, #3
 800207a:	d017      	beq.n	80020ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d123      	bne.n	8002100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	08da      	lsrs	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0203 	and.w	r2, r3, #3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80ae 	beq.w	800229e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b5d      	ldr	r3, [pc, #372]	@ (80022bc <HAL_GPIO_Init+0x300>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	4a5c      	ldr	r2, [pc, #368]	@ (80022bc <HAL_GPIO_Init+0x300>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002150:	6453      	str	r3, [r2, #68]	@ 0x44
 8002152:	4b5a      	ldr	r3, [pc, #360]	@ (80022bc <HAL_GPIO_Init+0x300>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215e:	4a58      	ldr	r2, [pc, #352]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4f      	ldr	r2, [pc, #316]	@ (80022c4 <HAL_GPIO_Init+0x308>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d025      	beq.n	80021d6 <HAL_GPIO_Init+0x21a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4e      	ldr	r2, [pc, #312]	@ (80022c8 <HAL_GPIO_Init+0x30c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <HAL_GPIO_Init+0x216>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4d      	ldr	r2, [pc, #308]	@ (80022cc <HAL_GPIO_Init+0x310>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d019      	beq.n	80021ce <HAL_GPIO_Init+0x212>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4c      	ldr	r2, [pc, #304]	@ (80022d0 <HAL_GPIO_Init+0x314>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0x20e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4b      	ldr	r2, [pc, #300]	@ (80022d4 <HAL_GPIO_Init+0x318>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00d      	beq.n	80021c6 <HAL_GPIO_Init+0x20a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4a      	ldr	r2, [pc, #296]	@ (80022d8 <HAL_GPIO_Init+0x31c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x206>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a49      	ldr	r2, [pc, #292]	@ (80022dc <HAL_GPIO_Init+0x320>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_GPIO_Init+0x202>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e00c      	b.n	80021d8 <HAL_GPIO_Init+0x21c>
 80021be:	2307      	movs	r3, #7
 80021c0:	e00a      	b.n	80021d8 <HAL_GPIO_Init+0x21c>
 80021c2:	2305      	movs	r3, #5
 80021c4:	e008      	b.n	80021d8 <HAL_GPIO_Init+0x21c>
 80021c6:	2304      	movs	r3, #4
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x21c>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e004      	b.n	80021d8 <HAL_GPIO_Init+0x21c>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_Init+0x21c>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x21c>
 80021d6:	2300      	movs	r3, #0
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f002 0203 	and.w	r2, r2, #3
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4093      	lsls	r3, r2
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e8:	4935      	ldr	r1, [pc, #212]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f6:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221a:	4a31      	ldr	r2, [pc, #196]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002220:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002244:	4a26      	ldr	r2, [pc, #152]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224a:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226e:	4a1c      	ldr	r2, [pc, #112]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002274:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002298:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	f67f ae96 	bls.w	8001fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3724      	adds	r7, #36	@ 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40021400 	.word	0x40021400
 80022dc:	40021800 	.word	0x40021800
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0cc      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b68      	ldr	r3, [pc, #416]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d90c      	bls.n	8002354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b65      	ldr	r3, [pc, #404]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a58      	ldr	r2, [pc, #352]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002376:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a52      	ldr	r2, [pc, #328]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800238e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d044      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d119      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b3f      	ldr	r3, [pc, #252]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3b      	ldr	r3, [pc, #236]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e067      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b37      	ldr	r3, [pc, #220]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4934      	ldr	r1, [pc, #208]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7ff fc04 	bl	8001c14 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7ff fc00 	bl	8001c14 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e04f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20c      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248a:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f855 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	490a      	ldr	r1, [pc, #40]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	5ccb      	ldrb	r3, [r1, r3]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fb64 	bl	8001b8c <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00
 80024d4:	40023800 	.word	0x40023800
 80024d8:	080074d0 	.word	0x080074d0
 80024dc:	20000008 	.word	0x20000008
 80024e0:	2000000c 	.word	0x2000000c

080024e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008

080024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002500:	f7ff fff0 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0a9b      	lsrs	r3, r3, #10
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	@ (8002520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	080074e0 	.word	0x080074e0

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002528:	f7ff ffdc 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0b5b      	lsrs	r3, r3, #13
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4903      	ldr	r1, [pc, #12]	@ (8002548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	080074e0 	.word	0x080074e0

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002550:	b0ae      	sub	sp, #184	@ 0xb8
 8002552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002572:	4bcb      	ldr	r3, [pc, #812]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b0c      	cmp	r3, #12
 800257c:	f200 8206 	bhi.w	800298c <HAL_RCC_GetSysClockFreq+0x440>
 8002580:	a201      	add	r2, pc, #4	@ (adr r2, 8002588 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	080025bd 	.word	0x080025bd
 800258c:	0800298d 	.word	0x0800298d
 8002590:	0800298d 	.word	0x0800298d
 8002594:	0800298d 	.word	0x0800298d
 8002598:	080025c5 	.word	0x080025c5
 800259c:	0800298d 	.word	0x0800298d
 80025a0:	0800298d 	.word	0x0800298d
 80025a4:	0800298d 	.word	0x0800298d
 80025a8:	080025cd 	.word	0x080025cd
 80025ac:	0800298d 	.word	0x0800298d
 80025b0:	0800298d 	.word	0x0800298d
 80025b4:	0800298d 	.word	0x0800298d
 80025b8:	080027bd 	.word	0x080027bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4bb9      	ldr	r3, [pc, #740]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80025be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025c2:	e1e7      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c4:	4bb8      	ldr	r3, [pc, #736]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025ca:	e1e3      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025cc:	4bb4      	ldr	r3, [pc, #720]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d8:	4bb1      	ldr	r3, [pc, #708]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d071      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e4:	4bae      	ldr	r3, [pc, #696]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800260a:	4622      	mov	r2, r4
 800260c:	462b      	mov	r3, r5
 800260e:	f04f 0000 	mov.w	r0, #0
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	0159      	lsls	r1, r3, #5
 8002618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800261c:	0150      	lsls	r0, r2, #5
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4621      	mov	r1, r4
 8002624:	1a51      	subs	r1, r2, r1
 8002626:	6439      	str	r1, [r7, #64]	@ 0x40
 8002628:	4629      	mov	r1, r5
 800262a:	eb63 0301 	sbc.w	r3, r3, r1
 800262e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800263c:	4649      	mov	r1, r9
 800263e:	018b      	lsls	r3, r1, #6
 8002640:	4641      	mov	r1, r8
 8002642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002646:	4641      	mov	r1, r8
 8002648:	018a      	lsls	r2, r1, #6
 800264a:	4641      	mov	r1, r8
 800264c:	1a51      	subs	r1, r2, r1
 800264e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002650:	4649      	mov	r1, r9
 8002652:	eb63 0301 	sbc.w	r3, r3, r1
 8002656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002664:	4649      	mov	r1, r9
 8002666:	00cb      	lsls	r3, r1, #3
 8002668:	4641      	mov	r1, r8
 800266a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800266e:	4641      	mov	r1, r8
 8002670:	00ca      	lsls	r2, r1, #3
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	4603      	mov	r3, r0
 8002678:	4622      	mov	r2, r4
 800267a:	189b      	adds	r3, r3, r2
 800267c:	633b      	str	r3, [r7, #48]	@ 0x30
 800267e:	462b      	mov	r3, r5
 8002680:	460a      	mov	r2, r1
 8002682:	eb42 0303 	adc.w	r3, r2, r3
 8002686:	637b      	str	r3, [r7, #52]	@ 0x34
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002694:	4629      	mov	r1, r5
 8002696:	024b      	lsls	r3, r1, #9
 8002698:	4621      	mov	r1, r4
 800269a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800269e:	4621      	mov	r1, r4
 80026a0:	024a      	lsls	r2, r1, #9
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80026b8:	f7fe fac8 	bl	8000c4c <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026c6:	e067      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c8:	4b75      	ldr	r3, [pc, #468]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80026d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026e2:	2300      	movs	r3, #0
 80026e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026ea:	4622      	mov	r2, r4
 80026ec:	462b      	mov	r3, r5
 80026ee:	f04f 0000 	mov.w	r0, #0
 80026f2:	f04f 0100 	mov.w	r1, #0
 80026f6:	0159      	lsls	r1, r3, #5
 80026f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026fc:	0150      	lsls	r0, r2, #5
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4621      	mov	r1, r4
 8002704:	1a51      	subs	r1, r2, r1
 8002706:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002708:	4629      	mov	r1, r5
 800270a:	eb63 0301 	sbc.w	r3, r3, r1
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800271c:	4649      	mov	r1, r9
 800271e:	018b      	lsls	r3, r1, #6
 8002720:	4641      	mov	r1, r8
 8002722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002726:	4641      	mov	r1, r8
 8002728:	018a      	lsls	r2, r1, #6
 800272a:	4641      	mov	r1, r8
 800272c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002730:	4649      	mov	r1, r9
 8002732:	eb63 0b01 	sbc.w	fp, r3, r1
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002742:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002746:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800274a:	4692      	mov	sl, r2
 800274c:	469b      	mov	fp, r3
 800274e:	4623      	mov	r3, r4
 8002750:	eb1a 0303 	adds.w	r3, sl, r3
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	462b      	mov	r3, r5
 8002758:	eb4b 0303 	adc.w	r3, fp, r3
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800276a:	4629      	mov	r1, r5
 800276c:	028b      	lsls	r3, r1, #10
 800276e:	4621      	mov	r1, r4
 8002770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002774:	4621      	mov	r1, r4
 8002776:	028a      	lsls	r2, r1, #10
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002780:	2200      	movs	r2, #0
 8002782:	673b      	str	r3, [r7, #112]	@ 0x70
 8002784:	677a      	str	r2, [r7, #116]	@ 0x74
 8002786:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800278a:	f7fe fa5f 	bl	8000c4c <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4613      	mov	r3, r2
 8002794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002798:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	3301      	adds	r3, #1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80027aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027ba:	e0eb      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027bc:	4b38      	ldr	r3, [pc, #224]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027c8:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d06b      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d4:	4b32      	ldr	r3, [pc, #200]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	2200      	movs	r2, #0
 80027dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80027e8:	2300      	movs	r3, #0
 80027ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80027ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027f0:	4622      	mov	r2, r4
 80027f2:	462b      	mov	r3, r5
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	0159      	lsls	r1, r3, #5
 80027fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002802:	0150      	lsls	r0, r2, #5
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4621      	mov	r1, r4
 800280a:	1a51      	subs	r1, r2, r1
 800280c:	61b9      	str	r1, [r7, #24]
 800280e:	4629      	mov	r1, r5
 8002810:	eb63 0301 	sbc.w	r3, r3, r1
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002822:	4659      	mov	r1, fp
 8002824:	018b      	lsls	r3, r1, #6
 8002826:	4651      	mov	r1, sl
 8002828:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282c:	4651      	mov	r1, sl
 800282e:	018a      	lsls	r2, r1, #6
 8002830:	4651      	mov	r1, sl
 8002832:	ebb2 0801 	subs.w	r8, r2, r1
 8002836:	4659      	mov	r1, fp
 8002838:	eb63 0901 	sbc.w	r9, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002848:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800284c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002850:	4690      	mov	r8, r2
 8002852:	4699      	mov	r9, r3
 8002854:	4623      	mov	r3, r4
 8002856:	eb18 0303 	adds.w	r3, r8, r3
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	462b      	mov	r3, r5
 800285e:	eb49 0303 	adc.w	r3, r9, r3
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002870:	4629      	mov	r1, r5
 8002872:	024b      	lsls	r3, r1, #9
 8002874:	4621      	mov	r1, r4
 8002876:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800287a:	4621      	mov	r1, r4
 800287c:	024a      	lsls	r2, r1, #9
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002886:	2200      	movs	r2, #0
 8002888:	65bb      	str	r3, [r7, #88]	@ 0x58
 800288a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800288c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002890:	f7fe f9dc 	bl	8000c4c <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800289e:	e065      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x420>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ac:	4b3d      	ldr	r3, [pc, #244]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	2200      	movs	r2, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	4611      	mov	r1, r2
 80028b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80028be:	2300      	movs	r3, #0
 80028c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80028c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80028c6:	4642      	mov	r2, r8
 80028c8:	464b      	mov	r3, r9
 80028ca:	f04f 0000 	mov.w	r0, #0
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	0159      	lsls	r1, r3, #5
 80028d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d8:	0150      	lsls	r0, r2, #5
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4641      	mov	r1, r8
 80028e0:	1a51      	subs	r1, r2, r1
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	4649      	mov	r1, r9
 80028e6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028f8:	4659      	mov	r1, fp
 80028fa:	018b      	lsls	r3, r1, #6
 80028fc:	4651      	mov	r1, sl
 80028fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002902:	4651      	mov	r1, sl
 8002904:	018a      	lsls	r2, r1, #6
 8002906:	4651      	mov	r1, sl
 8002908:	1a54      	subs	r4, r2, r1
 800290a:	4659      	mov	r1, fp
 800290c:	eb63 0501 	sbc.w	r5, r3, r1
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	00eb      	lsls	r3, r5, #3
 800291a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800291e:	00e2      	lsls	r2, r4, #3
 8002920:	4614      	mov	r4, r2
 8002922:	461d      	mov	r5, r3
 8002924:	4643      	mov	r3, r8
 8002926:	18e3      	adds	r3, r4, r3
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	464b      	mov	r3, r9
 800292c:	eb45 0303 	adc.w	r3, r5, r3
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800293e:	4629      	mov	r1, r5
 8002940:	028b      	lsls	r3, r1, #10
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002948:	4621      	mov	r1, r4
 800294a:	028a      	lsls	r2, r1, #10
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002954:	2200      	movs	r2, #0
 8002956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002958:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800295a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800295e:	f7fe f975 	bl	8000c4c <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4613      	mov	r3, r2
 8002968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800296c:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0f1b      	lsrs	r3, r3, #28
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800297a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800297e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800298a:	e003      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800298e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002992:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002994:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002998:	4618      	mov	r0, r3
 800299a:	37b8      	adds	r7, #184	@ 0xb8
 800299c:	46bd      	mov	sp, r7
 800299e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	00f42400 	.word	0x00f42400

080029ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e28d      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8083 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029cc:	4b94      	ldr	r3, [pc, #592]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d019      	beq.n	8002a0c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029d8:	4b91      	ldr	r3, [pc, #580]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f0:	d00c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d112      	bne.n	8002a24 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fe:	4b88      	ldr	r3, [pc, #544]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	4b84      	ldr	r3, [pc, #528]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x124>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d157      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e25a      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x90>
 8002a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7b      	ldr	r2, [pc, #492]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0xcc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0xb4>
 8002a46:	4b76      	ldr	r3, [pc, #472]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a75      	ldr	r2, [pc, #468]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b73      	ldr	r3, [pc, #460]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a72      	ldr	r2, [pc, #456]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xcc>
 8002a60:	4b6f      	ldr	r3, [pc, #444]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6e      	ldr	r2, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6b      	ldr	r2, [pc, #428]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff f8c8 	bl	8001c14 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff f8c4 	bl	8001c14 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	@ 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e21f      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b61      	ldr	r3, [pc, #388]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xdc>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f8b4 	bl	8001c14 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f8b0 	bl	8001c14 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e20b      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac2:	4b57      	ldr	r3, [pc, #348]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x104>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d06f      	beq.n	8002bbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ade:	4b50      	ldr	r3, [pc, #320]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d017      	beq.n	8002b1a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002aea:	4b4d      	ldr	r3, [pc, #308]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
        || \
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002af6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b02:	4b47      	ldr	r3, [pc, #284]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d11c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0e:	4b44      	ldr	r3, [pc, #272]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	4b41      	ldr	r3, [pc, #260]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_RCC_OscConfig+0x186>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e1d3      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4937      	ldr	r1, [pc, #220]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	e03a      	b.n	8002bbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b50:	4b34      	ldr	r3, [pc, #208]	@ (8002c24 <HAL_RCC_OscConfig+0x278>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7ff f85d 	bl	8001c14 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7ff f859 	bl	8001c14 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e1b4      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	4b2b      	ldr	r3, [pc, #172]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b28      	ldr	r3, [pc, #160]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4925      	ldr	r1, [pc, #148]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b92:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_RCC_OscConfig+0x278>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff f83c 	bl	8001c14 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7ff f838 	bl	8001c14 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e193      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d036      	beq.n	8002c38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7ff f81c 	bl	8001c14 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be0:	f7ff f818 	bl	8001c14 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e173      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x234>
 8002bfe:	e01b      	b.n	8002c38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <HAL_RCC_OscConfig+0x27c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c06:	f7ff f805 	bl	8001c14 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	e00e      	b.n	8002c2c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0e:	f7ff f801 	bl	8001c14 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d907      	bls.n	8002c2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e15c      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
 8002c20:	40023800 	.word	0x40023800
 8002c24:	42470000 	.word	0x42470000
 8002c28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ea      	bne.n	8002c0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8097 	beq.w	8002d74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4a:	4b83      	ldr	r3, [pc, #524]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c66:	4b7c      	ldr	r3, [pc, #496]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b79      	ldr	r3, [pc, #484]	@ (8002e5c <HAL_RCC_OscConfig+0x4b0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c82:	4b76      	ldr	r3, [pc, #472]	@ (8002e5c <HAL_RCC_OscConfig+0x4b0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a75      	ldr	r2, [pc, #468]	@ (8002e5c <HAL_RCC_OscConfig+0x4b0>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe ffc1 	bl	8001c14 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe ffbd 	bl	8001c14 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e118      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8002e5c <HAL_RCC_OscConfig+0x4b0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x31e>
 8002cbc:	4b66      	ldr	r3, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a65      	ldr	r2, [pc, #404]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc8:	e01c      	b.n	8002d04 <HAL_RCC_OscConfig+0x358>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x340>
 8002cd2:	4b61      	ldr	r3, [pc, #388]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	4a60      	ldr	r2, [pc, #384]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cde:	4b5e      	ldr	r3, [pc, #376]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce2:	4a5d      	ldr	r2, [pc, #372]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0x358>
 8002cec:	4b5a      	ldr	r3, [pc, #360]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf0:	4a59      	ldr	r2, [pc, #356]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf8:	4b57      	ldr	r3, [pc, #348]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfc:	4a56      	ldr	r2, [pc, #344]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002cfe:	f023 0304 	bic.w	r3, r3, #4
 8002d02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe ff82 	bl	8001c14 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7fe ff7e 	bl	8001c14 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0d7      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ee      	beq.n	8002d14 <HAL_RCC_OscConfig+0x368>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe ff6c 	bl	8001c14 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7fe ff68 	bl	8001c14 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0c1      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	4b40      	ldr	r3, [pc, #256]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1ee      	bne.n	8002d40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d68:	4b3b      	ldr	r3, [pc, #236]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80ad 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d7e:	4b36      	ldr	r3, [pc, #216]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d060      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d145      	bne.n	8002e1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <HAL_RCC_OscConfig+0x4b4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe ff3c 	bl	8001c14 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe ff38 	bl	8001c14 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e093      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	4b29      	ldr	r3, [pc, #164]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	019b      	lsls	r3, r3, #6
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	071b      	lsls	r3, r3, #28
 8002dea:	491b      	ldr	r1, [pc, #108]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_RCC_OscConfig+0x4b4>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe ff0d 	bl	8001c14 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe ff09 	bl	8001c14 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e064      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e10:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x452>
 8002e1c:	e05c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <HAL_RCC_OscConfig+0x4b4>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fef6 	bl	8001c14 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fef2 	bl	8001c14 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04d      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_RCC_OscConfig+0x4ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x480>
 8002e4a:	e045      	b.n	8002ed8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e040      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <HAL_RCC_OscConfig+0x538>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d030      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d129      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d122      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d119      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	3b01      	subs	r3, #1
 8002eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e041      	b.n	8002f7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe fbec 	bl	80016ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 f9b8 	bl	800329c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_TIM_PWM_Start+0x24>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e022      	b.n	8002ff2 <HAL_TIM_PWM_Start+0x6a>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d109      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0x3e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e015      	b.n	8002ff2 <HAL_TIM_PWM_Start+0x6a>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d109      	bne.n	8002fe0 <HAL_TIM_PWM_Start+0x58>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e008      	b.n	8002ff2 <HAL_TIM_PWM_Start+0x6a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e07c      	b.n	80030f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_PWM_Start+0x82>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003008:	e013      	b.n	8003032 <HAL_TIM_PWM_Start+0xaa>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start+0x92>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003018:	e00b      	b.n	8003032 <HAL_TIM_PWM_Start+0xaa>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d104      	bne.n	800302a <HAL_TIM_PWM_Start+0xa2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003028:	e003      	b.n	8003032 <HAL_TIM_PWM_Start+0xaa>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2201      	movs	r2, #1
 8003038:	6839      	ldr	r1, [r7, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fb8a 	bl	8003754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2d      	ldr	r2, [pc, #180]	@ (80030fc <HAL_TIM_PWM_Start+0x174>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_TIM_PWM_Start+0xcc>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2c      	ldr	r2, [pc, #176]	@ (8003100 <HAL_TIM_PWM_Start+0x178>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_TIM_PWM_Start+0xd0>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_TIM_PWM_Start+0xd2>
 8003058:	2300      	movs	r3, #0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a22      	ldr	r2, [pc, #136]	@ (80030fc <HAL_TIM_PWM_Start+0x174>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_TIM_PWM_Start+0x136>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003080:	d01d      	beq.n	80030be <HAL_TIM_PWM_Start+0x136>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1f      	ldr	r2, [pc, #124]	@ (8003104 <HAL_TIM_PWM_Start+0x17c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_TIM_PWM_Start+0x136>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <HAL_TIM_PWM_Start+0x180>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_TIM_PWM_Start+0x136>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1c      	ldr	r2, [pc, #112]	@ (800310c <HAL_TIM_PWM_Start+0x184>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_TIM_PWM_Start+0x136>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a16      	ldr	r2, [pc, #88]	@ (8003100 <HAL_TIM_PWM_Start+0x178>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_TIM_PWM_Start+0x136>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <HAL_TIM_PWM_Start+0x188>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_TIM_PWM_Start+0x136>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a16      	ldr	r2, [pc, #88]	@ (8003114 <HAL_TIM_PWM_Start+0x18c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d111      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d010      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e0:	e007      	b.n	80030f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40010000 	.word	0x40010000
 8003100:	40010400 	.word	0x40010400
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40000c00 	.word	0x40000c00
 8003110:	40014000 	.word	0x40014000
 8003114:	40001800 	.word	0x40001800

08003118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e0ae      	b.n	8003294 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	f200 809f 	bhi.w	8003284 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003146:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	08003181 	.word	0x08003181
 8003150:	08003285 	.word	0x08003285
 8003154:	08003285 	.word	0x08003285
 8003158:	08003285 	.word	0x08003285
 800315c:	080031c1 	.word	0x080031c1
 8003160:	08003285 	.word	0x08003285
 8003164:	08003285 	.word	0x08003285
 8003168:	08003285 	.word	0x08003285
 800316c:	08003203 	.word	0x08003203
 8003170:	08003285 	.word	0x08003285
 8003174:	08003285 	.word	0x08003285
 8003178:	08003285 	.word	0x08003285
 800317c:	08003243 	.word	0x08003243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f934 	bl	80033f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6999      	ldr	r1, [r3, #24]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	619a      	str	r2, [r3, #24]
      break;
 80031be:	e064      	b.n	800328a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f984 	bl	80034d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6999      	ldr	r1, [r3, #24]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
      break;
 8003200:	e043      	b.n	800328a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f9d9 	bl	80035c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0208 	orr.w	r2, r2, #8
 800321c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0204 	bic.w	r2, r2, #4
 800322c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
      break;
 8003240:	e023      	b.n	800328a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fa2d 	bl	80036a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	61da      	str	r2, [r3, #28]
      break;
 8003282:	e002      	b.n	800328a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	75fb      	strb	r3, [r7, #23]
      break;
 8003288:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a46      	ldr	r2, [pc, #280]	@ (80033c8 <TIM_Base_SetConfig+0x12c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ba:	d00f      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a43      	ldr	r2, [pc, #268]	@ (80033cc <TIM_Base_SetConfig+0x130>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00b      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a42      	ldr	r2, [pc, #264]	@ (80033d0 <TIM_Base_SetConfig+0x134>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a41      	ldr	r2, [pc, #260]	@ (80033d4 <TIM_Base_SetConfig+0x138>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a40      	ldr	r2, [pc, #256]	@ (80033d8 <TIM_Base_SetConfig+0x13c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a35      	ldr	r2, [pc, #212]	@ (80033c8 <TIM_Base_SetConfig+0x12c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d02b      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d027      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a32      	ldr	r2, [pc, #200]	@ (80033cc <TIM_Base_SetConfig+0x130>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d023      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a31      	ldr	r2, [pc, #196]	@ (80033d0 <TIM_Base_SetConfig+0x134>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01f      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a30      	ldr	r2, [pc, #192]	@ (80033d4 <TIM_Base_SetConfig+0x138>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01b      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2f      	ldr	r2, [pc, #188]	@ (80033d8 <TIM_Base_SetConfig+0x13c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d017      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2e      	ldr	r2, [pc, #184]	@ (80033dc <TIM_Base_SetConfig+0x140>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2d      	ldr	r2, [pc, #180]	@ (80033e0 <TIM_Base_SetConfig+0x144>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00f      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2c      	ldr	r2, [pc, #176]	@ (80033e4 <TIM_Base_SetConfig+0x148>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00b      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2b      	ldr	r2, [pc, #172]	@ (80033e8 <TIM_Base_SetConfig+0x14c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2a      	ldr	r2, [pc, #168]	@ (80033ec <TIM_Base_SetConfig+0x150>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a29      	ldr	r2, [pc, #164]	@ (80033f0 <TIM_Base_SetConfig+0x154>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d108      	bne.n	8003360 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a10      	ldr	r2, [pc, #64]	@ (80033c8 <TIM_Base_SetConfig+0x12c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <TIM_Base_SetConfig+0xf8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a12      	ldr	r2, [pc, #72]	@ (80033d8 <TIM_Base_SetConfig+0x13c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d103      	bne.n	800339c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d105      	bne.n	80033ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f023 0201 	bic.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]
  }
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	40001800 	.word	0x40001800
 80033ec:	40001c00 	.word	0x40001c00
 80033f0:	40002000 	.word	0x40002000

080033f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 0201 	bic.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f023 0302 	bic.w	r3, r3, #2
 800343c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a20      	ldr	r2, [pc, #128]	@ (80034cc <TIM_OC1_SetConfig+0xd8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_OC1_SetConfig+0x64>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a1f      	ldr	r2, [pc, #124]	@ (80034d0 <TIM_OC1_SetConfig+0xdc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10c      	bne.n	8003472 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 0308 	bic.w	r3, r3, #8
 800345e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 0304 	bic.w	r3, r3, #4
 8003470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <TIM_OC1_SetConfig+0xd8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_OC1_SetConfig+0x8e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <TIM_OC1_SetConfig+0xdc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d111      	bne.n	80034a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	621a      	str	r2, [r3, #32]
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40010400 	.word	0x40010400

080034d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f023 0210 	bic.w	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0320 	bic.w	r3, r3, #32
 800351e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a22      	ldr	r2, [pc, #136]	@ (80035b8 <TIM_OC2_SetConfig+0xe4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_OC2_SetConfig+0x68>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a21      	ldr	r2, [pc, #132]	@ (80035bc <TIM_OC2_SetConfig+0xe8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d10d      	bne.n	8003558 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003556:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a17      	ldr	r2, [pc, #92]	@ (80035b8 <TIM_OC2_SetConfig+0xe4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_OC2_SetConfig+0x94>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a16      	ldr	r2, [pc, #88]	@ (80035bc <TIM_OC2_SetConfig+0xe8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d113      	bne.n	8003590 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800356e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40010400 	.word	0x40010400

080035c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a21      	ldr	r2, [pc, #132]	@ (80036a0 <TIM_OC3_SetConfig+0xe0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_OC3_SetConfig+0x66>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a20      	ldr	r2, [pc, #128]	@ (80036a4 <TIM_OC3_SetConfig+0xe4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10d      	bne.n	8003642 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800362c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <TIM_OC3_SetConfig+0xe0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d003      	beq.n	8003652 <TIM_OC3_SetConfig+0x92>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a15      	ldr	r2, [pc, #84]	@ (80036a4 <TIM_OC3_SetConfig+0xe4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d113      	bne.n	800367a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	621a      	str	r2, [r3, #32]
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40010400 	.word	0x40010400

080036a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	031b      	lsls	r3, r3, #12
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a12      	ldr	r2, [pc, #72]	@ (800374c <TIM_OC4_SetConfig+0xa4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_OC4_SetConfig+0x68>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a11      	ldr	r2, [pc, #68]	@ (8003750 <TIM_OC4_SetConfig+0xa8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d109      	bne.n	8003724 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	019b      	lsls	r3, r3, #6
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000
 8003750:	40010400 	.word	0x40010400

08003754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2201      	movs	r2, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1a      	ldr	r2, [r3, #32]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	43db      	mvns	r3, r3
 8003776:	401a      	ands	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e05a      	b.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a21      	ldr	r2, [pc, #132]	@ (800387c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d022      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003804:	d01d      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1d      	ldr	r2, [pc, #116]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d018      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1a      	ldr	r2, [pc, #104]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a18      	ldr	r2, [pc, #96]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a17      	ldr	r2, [pc, #92]	@ (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a15      	ldr	r2, [pc, #84]	@ (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10c      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40010400 	.word	0x40010400
 8003890:	40014000 	.word	0x40014000
 8003894:	40001800 	.word	0x40001800

08003898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e042      	b.n	8003930 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd ff70 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	@ 0x24
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fd11 	bl	8004304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d121      	bne.n	8003996 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_Transmit_IT+0x26>
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e01a      	b.n	8003998 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	88fa      	ldrh	r2, [r7, #6]
 800396c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2221      	movs	r2, #33	@ 0x21
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003990:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d112      	bne.n	80039e4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_UART_Receive_IT+0x26>
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e00b      	b.n	80039e6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 faba 	bl	8003f54 <UART_Start_Receive_IT>
 80039e0:	4603      	mov	r3, r0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b0ba      	sub	sp, #232	@ 0xe8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_UART_IRQHandler+0x66>
 8003a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fb99 	bl	8004186 <UART_Receive_IT>
      return;
 8003a54:	e25b      	b.n	8003f0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80de 	beq.w	8003c1c <HAL_UART_IRQHandler+0x22c>
 8003a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80d1 	beq.w	8003c1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_UART_IRQHandler+0xae>
 8003a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f043 0201 	orr.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xd2>
 8003aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xf6>
 8003ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d011      	beq.n	8003b16 <HAL_UART_IRQHandler+0x126>
 8003af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 81f2 	beq.w	8003f04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_UART_IRQHandler+0x14e>
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fb24 	bl	8004186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b40      	cmp	r3, #64	@ 0x40
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d103      	bne.n	8003b6a <HAL_UART_IRQHandler+0x17a>
 8003b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d04f      	beq.n	8003c0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa2c 	bl	8003fc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7a:	2b40      	cmp	r3, #64	@ 0x40
 8003b7c:	d141      	bne.n	8003c02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3314      	adds	r3, #20
 8003ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003baa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1d9      	bne.n	8003b7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d013      	beq.n	8003bfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8003dd0 <HAL_UART_IRQHandler+0x3e0>)
 8003bd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe f9c9 	bl	8001f76 <HAL_DMA_Abort_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	e00e      	b.n	8003c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f994 	bl	8003f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	e00a      	b.n	8003c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f990 	bl	8003f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e006      	b.n	8003c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f98c 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c16:	e175      	b.n	8003f04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	bf00      	nop
    return;
 8003c1a:	e173      	b.n	8003f04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	f040 814f 	bne.w	8003ec4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8148 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8141 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b40      	cmp	r3, #64	@ 0x40
 8003c64:	f040 80b6 	bne.w	8003dd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8145 	beq.w	8003f08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c86:	429a      	cmp	r2, r3
 8003c88:	f080 813e 	bcs.w	8003f08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c9e:	f000 8088 	beq.w	8003db2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1d9      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e1      	bne.n	8003cee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e3      	bne.n	8003d2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e3      	bne.n	8003d70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe f872 	bl	8001e96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8b7 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dce:	e09b      	b.n	8003f08 <HAL_UART_IRQHandler+0x518>
 8003dd0:	0800408f 	.word	0x0800408f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 808e 	beq.w	8003f0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8089 	beq.w	8003f0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e3      	bne.n	8003dfa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3314      	adds	r3, #20
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	623b      	str	r3, [r7, #32]
   return(result);
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3314      	adds	r3, #20
 8003e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e56:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e3      	bne.n	8003e32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0310 	bic.w	r3, r3, #16
 8003e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e9c:	61fa      	str	r2, [r7, #28]
 8003e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	69b9      	ldr	r1, [r7, #24]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e3      	bne.n	8003e78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f83d 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec2:	e023      	b.n	8003f0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x4f4>
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8ea 	bl	80040b6 <UART_Transmit_IT>
    return;
 8003ee2:	e014      	b.n	8003f0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00e      	beq.n	8003f0e <HAL_UART_IRQHandler+0x51e>
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f92a 	bl	8004156 <UART_EndTransmit_IT>
    return;
 8003f02:	e004      	b.n	8003f0e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f04:	bf00      	nop
 8003f06:	e002      	b.n	8003f0e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f0c:	bf00      	nop
  }
}
 8003f0e:	37e8      	adds	r7, #232	@ 0xe8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	88fa      	ldrh	r2, [r7, #6]
 8003f72:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2222      	movs	r2, #34	@ 0x22
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0220 	orr.w	r2, r2, #32
 8003fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b095      	sub	sp, #84	@ 0x54
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ff0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ff6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	61fb      	str	r3, [r7, #28]
   return(result);
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800402a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	2b01      	cmp	r3, #1
 800403e:	d119      	bne.n	8004074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 0310 	bic.w	r3, r3, #16
 8004056:	647b      	str	r3, [r7, #68]	@ 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004060:	61ba      	str	r2, [r7, #24]
 8004062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	613b      	str	r3, [r7, #16]
   return(result);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004082:	bf00      	nop
 8004084:	3754      	adds	r7, #84	@ 0x54
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff ff3d 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b21      	cmp	r3, #33	@ 0x21
 80040c8:	d13e      	bne.n	8004148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d2:	d114      	bne.n	80040fe <UART_Transmit_IT+0x48>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d110      	bne.n	80040fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	1c9a      	adds	r2, r3, #2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]
 80040fc:	e008      	b.n	8004110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	1c59      	adds	r1, r3, #1
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6211      	str	r1, [r2, #32]
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29b      	uxth	r3, r3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4619      	mov	r1, r3
 800411e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10f      	bne.n	8004144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800416c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff fecc 	bl	8003f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b08c      	sub	sp, #48	@ 0x30
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b22      	cmp	r3, #34	@ 0x22
 8004198:	f040 80ae 	bne.w	80042f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a4:	d117      	bne.n	80041d6 <UART_Receive_IT+0x50>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d113      	bne.n	80041d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80041d4:	e026      	b.n	8004224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e8:	d007      	beq.n	80041fa <UART_Receive_IT+0x74>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <UART_Receive_IT+0x82>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e008      	b.n	800421a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004214:	b2da      	uxtb	r2, r3
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29b      	uxth	r3, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4619      	mov	r1, r3
 8004232:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004234:	2b00      	cmp	r3, #0
 8004236:	d15d      	bne.n	80042f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0220 	bic.w	r2, r2, #32
 8004246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	2b01      	cmp	r3, #1
 800427c:	d135      	bne.n	80042ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	613b      	str	r3, [r7, #16]
   return(result);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f023 0310 	bic.w	r3, r3, #16
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a4:	623a      	str	r2, [r7, #32]
 80042a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	69f9      	ldr	r1, [r7, #28]
 80042aa:	6a3a      	ldr	r2, [r7, #32]
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d10a      	bne.n	80042dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff fe2a 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
 80042e8:	e002      	b.n	80042f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd f98e 	bl	800160c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e002      	b.n	80042fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e000      	b.n	80042fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3730      	adds	r7, #48	@ 0x30
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004308:	b0c0      	sub	sp, #256	@ 0x100
 800430a:	af00      	add	r7, sp, #0
 800430c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	68d9      	ldr	r1, [r3, #12]
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	ea40 0301 	orr.w	r3, r0, r1
 800432c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	431a      	orrs	r2, r3
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800435c:	f021 010c 	bic.w	r1, r1, #12
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800436a:	430b      	orrs	r3, r1
 800436c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437e:	6999      	ldr	r1, [r3, #24]
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	ea40 0301 	orr.w	r3, r0, r1
 800438a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b8f      	ldr	r3, [pc, #572]	@ (80045d0 <UART_SetConfig+0x2cc>)
 8004394:	429a      	cmp	r2, r3
 8004396:	d005      	beq.n	80043a4 <UART_SetConfig+0xa0>
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b8d      	ldr	r3, [pc, #564]	@ (80045d4 <UART_SetConfig+0x2d0>)
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d104      	bne.n	80043ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7fe f8be 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 80043a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043ac:	e003      	b.n	80043b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ae:	f7fe f8a5 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 80043b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c0:	f040 810c 	bne.w	80045dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	1891      	adds	r1, r2, r2
 80043dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043de:	415b      	adcs	r3, r3
 80043e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043e6:	4621      	mov	r1, r4
 80043e8:	eb12 0801 	adds.w	r8, r2, r1
 80043ec:	4629      	mov	r1, r5
 80043ee:	eb43 0901 	adc.w	r9, r3, r1
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004406:	4690      	mov	r8, r2
 8004408:	4699      	mov	r9, r3
 800440a:	4623      	mov	r3, r4
 800440c:	eb18 0303 	adds.w	r3, r8, r3
 8004410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004414:	462b      	mov	r3, r5
 8004416:	eb49 0303 	adc.w	r3, r9, r3
 800441a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800442a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800442e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004432:	460b      	mov	r3, r1
 8004434:	18db      	adds	r3, r3, r3
 8004436:	653b      	str	r3, [r7, #80]	@ 0x50
 8004438:	4613      	mov	r3, r2
 800443a:	eb42 0303 	adc.w	r3, r2, r3
 800443e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004448:	f7fc fc00 	bl	8000c4c <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4b61      	ldr	r3, [pc, #388]	@ (80045d8 <UART_SetConfig+0x2d4>)
 8004452:	fba3 2302 	umull	r2, r3, r3, r2
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	011c      	lsls	r4, r3, #4
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004464:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	1891      	adds	r1, r2, r2
 8004472:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004474:	415b      	adcs	r3, r3
 8004476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800447c:	4641      	mov	r1, r8
 800447e:	eb12 0a01 	adds.w	sl, r2, r1
 8004482:	4649      	mov	r1, r9
 8004484:	eb43 0b01 	adc.w	fp, r3, r1
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449c:	4692      	mov	sl, r2
 800449e:	469b      	mov	fp, r3
 80044a0:	4643      	mov	r3, r8
 80044a2:	eb1a 0303 	adds.w	r3, sl, r3
 80044a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044aa:	464b      	mov	r3, r9
 80044ac:	eb4b 0303 	adc.w	r3, fp, r3
 80044b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044c8:	460b      	mov	r3, r1
 80044ca:	18db      	adds	r3, r3, r3
 80044cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ce:	4613      	mov	r3, r2
 80044d0:	eb42 0303 	adc.w	r3, r2, r3
 80044d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044de:	f7fc fbb5 	bl	8000c4c <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	4b3b      	ldr	r3, [pc, #236]	@ (80045d8 <UART_SetConfig+0x2d4>)
 80044ea:	fba3 2301 	umull	r2, r3, r3, r1
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2264      	movs	r2, #100	@ 0x64
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	1acb      	subs	r3, r1, r3
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044fe:	4b36      	ldr	r3, [pc, #216]	@ (80045d8 <UART_SetConfig+0x2d4>)
 8004500:	fba3 2302 	umull	r2, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800450c:	441c      	add	r4, r3
 800450e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004512:	2200      	movs	r2, #0
 8004514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004518:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800451c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	1891      	adds	r1, r2, r2
 8004526:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004528:	415b      	adcs	r3, r3
 800452a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800452c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004530:	4641      	mov	r1, r8
 8004532:	1851      	adds	r1, r2, r1
 8004534:	6339      	str	r1, [r7, #48]	@ 0x30
 8004536:	4649      	mov	r1, r9
 8004538:	414b      	adcs	r3, r1
 800453a:	637b      	str	r3, [r7, #52]	@ 0x34
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004548:	4659      	mov	r1, fp
 800454a:	00cb      	lsls	r3, r1, #3
 800454c:	4651      	mov	r1, sl
 800454e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004552:	4651      	mov	r1, sl
 8004554:	00ca      	lsls	r2, r1, #3
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	4603      	mov	r3, r0
 800455c:	4642      	mov	r2, r8
 800455e:	189b      	adds	r3, r3, r2
 8004560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004564:	464b      	mov	r3, r9
 8004566:	460a      	mov	r2, r1
 8004568:	eb42 0303 	adc.w	r3, r2, r3
 800456c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800457c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004584:	460b      	mov	r3, r1
 8004586:	18db      	adds	r3, r3, r3
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800458a:	4613      	mov	r3, r2
 800458c:	eb42 0303 	adc.w	r3, r2, r3
 8004590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800459a:	f7fc fb57 	bl	8000c4c <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <UART_SetConfig+0x2d4>)
 80045a4:	fba3 1302 	umull	r1, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	2164      	movs	r1, #100	@ 0x64
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	3332      	adds	r3, #50	@ 0x32
 80045b6:	4a08      	ldr	r2, [pc, #32]	@ (80045d8 <UART_SetConfig+0x2d4>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	f003 0207 	and.w	r2, r3, #7
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4422      	add	r2, r4
 80045ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045cc:	e106      	b.n	80047dc <UART_SetConfig+0x4d8>
 80045ce:	bf00      	nop
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40011400 	.word	0x40011400
 80045d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045ee:	4642      	mov	r2, r8
 80045f0:	464b      	mov	r3, r9
 80045f2:	1891      	adds	r1, r2, r2
 80045f4:	6239      	str	r1, [r7, #32]
 80045f6:	415b      	adcs	r3, r3
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045fe:	4641      	mov	r1, r8
 8004600:	1854      	adds	r4, r2, r1
 8004602:	4649      	mov	r1, r9
 8004604:	eb43 0501 	adc.w	r5, r3, r1
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	00eb      	lsls	r3, r5, #3
 8004612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004616:	00e2      	lsls	r2, r4, #3
 8004618:	4614      	mov	r4, r2
 800461a:	461d      	mov	r5, r3
 800461c:	4643      	mov	r3, r8
 800461e:	18e3      	adds	r3, r4, r3
 8004620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004624:	464b      	mov	r3, r9
 8004626:	eb45 0303 	adc.w	r3, r5, r3
 800462a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800463a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800464a:	4629      	mov	r1, r5
 800464c:	008b      	lsls	r3, r1, #2
 800464e:	4621      	mov	r1, r4
 8004650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004654:	4621      	mov	r1, r4
 8004656:	008a      	lsls	r2, r1, #2
 8004658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800465c:	f7fc faf6 	bl	8000c4c <__aeabi_uldivmod>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4b60      	ldr	r3, [pc, #384]	@ (80047e8 <UART_SetConfig+0x4e4>)
 8004666:	fba3 2302 	umull	r2, r3, r3, r2
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	011c      	lsls	r4, r3, #4
 800466e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800467c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	1891      	adds	r1, r2, r2
 8004686:	61b9      	str	r1, [r7, #24]
 8004688:	415b      	adcs	r3, r3
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004690:	4641      	mov	r1, r8
 8004692:	1851      	adds	r1, r2, r1
 8004694:	6139      	str	r1, [r7, #16]
 8004696:	4649      	mov	r1, r9
 8004698:	414b      	adcs	r3, r1
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a8:	4659      	mov	r1, fp
 80046aa:	00cb      	lsls	r3, r1, #3
 80046ac:	4651      	mov	r1, sl
 80046ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b2:	4651      	mov	r1, sl
 80046b4:	00ca      	lsls	r2, r1, #3
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	4642      	mov	r2, r8
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046c4:	464b      	mov	r3, r9
 80046c6:	460a      	mov	r2, r1
 80046c8:	eb42 0303 	adc.w	r3, r2, r3
 80046cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046e8:	4649      	mov	r1, r9
 80046ea:	008b      	lsls	r3, r1, #2
 80046ec:	4641      	mov	r1, r8
 80046ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f2:	4641      	mov	r1, r8
 80046f4:	008a      	lsls	r2, r1, #2
 80046f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046fa:	f7fc faa7 	bl	8000c4c <__aeabi_uldivmod>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4611      	mov	r1, r2
 8004704:	4b38      	ldr	r3, [pc, #224]	@ (80047e8 <UART_SetConfig+0x4e4>)
 8004706:	fba3 2301 	umull	r2, r3, r3, r1
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2264      	movs	r2, #100	@ 0x64
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	1acb      	subs	r3, r1, r3
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	3332      	adds	r3, #50	@ 0x32
 8004718:	4a33      	ldr	r2, [pc, #204]	@ (80047e8 <UART_SetConfig+0x4e4>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004724:	441c      	add	r4, r3
 8004726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800472a:	2200      	movs	r2, #0
 800472c:	673b      	str	r3, [r7, #112]	@ 0x70
 800472e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004730:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	1891      	adds	r1, r2, r2
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	415b      	adcs	r3, r3
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004744:	4641      	mov	r1, r8
 8004746:	1851      	adds	r1, r2, r1
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	4649      	mov	r1, r9
 800474c:	414b      	adcs	r3, r1
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800475c:	4659      	mov	r1, fp
 800475e:	00cb      	lsls	r3, r1, #3
 8004760:	4651      	mov	r1, sl
 8004762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004766:	4651      	mov	r1, sl
 8004768:	00ca      	lsls	r2, r1, #3
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	4603      	mov	r3, r0
 8004770:	4642      	mov	r2, r8
 8004772:	189b      	adds	r3, r3, r2
 8004774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004776:	464b      	mov	r3, r9
 8004778:	460a      	mov	r2, r1
 800477a:	eb42 0303 	adc.w	r3, r2, r3
 800477e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	663b      	str	r3, [r7, #96]	@ 0x60
 800478a:	667a      	str	r2, [r7, #100]	@ 0x64
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004798:	4649      	mov	r1, r9
 800479a:	008b      	lsls	r3, r1, #2
 800479c:	4641      	mov	r1, r8
 800479e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a2:	4641      	mov	r1, r8
 80047a4:	008a      	lsls	r2, r1, #2
 80047a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047aa:	f7fc fa4f 	bl	8000c4c <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <UART_SetConfig+0x4e4>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	@ 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	3332      	adds	r3, #50	@ 0x32
 80047c6:	4a08      	ldr	r2, [pc, #32]	@ (80047e8 <UART_SetConfig+0x4e4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4422      	add	r2, r4
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047e2:	46bd      	mov	sp, r7
 80047e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e8:	51eb851f 	.word	0x51eb851f

080047ec <atof>:
 80047ec:	2100      	movs	r1, #0
 80047ee:	f000 bea7 	b.w	8005540 <strtod>
	...

080047f4 <std>:
 80047f4:	2300      	movs	r3, #0
 80047f6:	b510      	push	{r4, lr}
 80047f8:	4604      	mov	r4, r0
 80047fa:	e9c0 3300 	strd	r3, r3, [r0]
 80047fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004802:	6083      	str	r3, [r0, #8]
 8004804:	8181      	strh	r1, [r0, #12]
 8004806:	6643      	str	r3, [r0, #100]	@ 0x64
 8004808:	81c2      	strh	r2, [r0, #14]
 800480a:	6183      	str	r3, [r0, #24]
 800480c:	4619      	mov	r1, r3
 800480e:	2208      	movs	r2, #8
 8004810:	305c      	adds	r0, #92	@ 0x5c
 8004812:	f000 ff2d 	bl	8005670 <memset>
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <std+0x58>)
 8004818:	6263      	str	r3, [r4, #36]	@ 0x24
 800481a:	4b0d      	ldr	r3, [pc, #52]	@ (8004850 <std+0x5c>)
 800481c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <std+0x60>)
 8004820:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004822:	4b0d      	ldr	r3, [pc, #52]	@ (8004858 <std+0x64>)
 8004824:	6323      	str	r3, [r4, #48]	@ 0x30
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <std+0x68>)
 8004828:	6224      	str	r4, [r4, #32]
 800482a:	429c      	cmp	r4, r3
 800482c:	d006      	beq.n	800483c <std+0x48>
 800482e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004832:	4294      	cmp	r4, r2
 8004834:	d002      	beq.n	800483c <std+0x48>
 8004836:	33d0      	adds	r3, #208	@ 0xd0
 8004838:	429c      	cmp	r4, r3
 800483a:	d105      	bne.n	8004848 <std+0x54>
 800483c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004844:	f000 bf46 	b.w	80056d4 <__retarget_lock_init_recursive>
 8004848:	bd10      	pop	{r4, pc}
 800484a:	bf00      	nop
 800484c:	08006a05 	.word	0x08006a05
 8004850:	08006a27 	.word	0x08006a27
 8004854:	08006a5f 	.word	0x08006a5f
 8004858:	08006a83 	.word	0x08006a83
 800485c:	2000033c 	.word	0x2000033c

08004860 <stdio_exit_handler>:
 8004860:	4a02      	ldr	r2, [pc, #8]	@ (800486c <stdio_exit_handler+0xc>)
 8004862:	4903      	ldr	r1, [pc, #12]	@ (8004870 <stdio_exit_handler+0x10>)
 8004864:	4803      	ldr	r0, [pc, #12]	@ (8004874 <stdio_exit_handler+0x14>)
 8004866:	f000 be77 	b.w	8005558 <_fwalk_sglue>
 800486a:	bf00      	nop
 800486c:	20000014 	.word	0x20000014
 8004870:	08006039 	.word	0x08006039
 8004874:	20000190 	.word	0x20000190

08004878 <cleanup_stdio>:
 8004878:	6841      	ldr	r1, [r0, #4]
 800487a:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <cleanup_stdio+0x34>)
 800487c:	4299      	cmp	r1, r3
 800487e:	b510      	push	{r4, lr}
 8004880:	4604      	mov	r4, r0
 8004882:	d001      	beq.n	8004888 <cleanup_stdio+0x10>
 8004884:	f001 fbd8 	bl	8006038 <_fflush_r>
 8004888:	68a1      	ldr	r1, [r4, #8]
 800488a:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <cleanup_stdio+0x38>)
 800488c:	4299      	cmp	r1, r3
 800488e:	d002      	beq.n	8004896 <cleanup_stdio+0x1e>
 8004890:	4620      	mov	r0, r4
 8004892:	f001 fbd1 	bl	8006038 <_fflush_r>
 8004896:	68e1      	ldr	r1, [r4, #12]
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <cleanup_stdio+0x3c>)
 800489a:	4299      	cmp	r1, r3
 800489c:	d004      	beq.n	80048a8 <cleanup_stdio+0x30>
 800489e:	4620      	mov	r0, r4
 80048a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a4:	f001 bbc8 	b.w	8006038 <_fflush_r>
 80048a8:	bd10      	pop	{r4, pc}
 80048aa:	bf00      	nop
 80048ac:	2000033c 	.word	0x2000033c
 80048b0:	200003a4 	.word	0x200003a4
 80048b4:	2000040c 	.word	0x2000040c

080048b8 <global_stdio_init.part.0>:
 80048b8:	b510      	push	{r4, lr}
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <global_stdio_init.part.0+0x30>)
 80048bc:	4c0b      	ldr	r4, [pc, #44]	@ (80048ec <global_stdio_init.part.0+0x34>)
 80048be:	4a0c      	ldr	r2, [pc, #48]	@ (80048f0 <global_stdio_init.part.0+0x38>)
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	4620      	mov	r0, r4
 80048c4:	2200      	movs	r2, #0
 80048c6:	2104      	movs	r1, #4
 80048c8:	f7ff ff94 	bl	80047f4 <std>
 80048cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048d0:	2201      	movs	r2, #1
 80048d2:	2109      	movs	r1, #9
 80048d4:	f7ff ff8e 	bl	80047f4 <std>
 80048d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048dc:	2202      	movs	r2, #2
 80048de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e2:	2112      	movs	r1, #18
 80048e4:	f7ff bf86 	b.w	80047f4 <std>
 80048e8:	20000474 	.word	0x20000474
 80048ec:	2000033c 	.word	0x2000033c
 80048f0:	08004861 	.word	0x08004861

080048f4 <__sfp_lock_acquire>:
 80048f4:	4801      	ldr	r0, [pc, #4]	@ (80048fc <__sfp_lock_acquire+0x8>)
 80048f6:	f000 beee 	b.w	80056d6 <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	20000479 	.word	0x20000479

08004900 <__sfp_lock_release>:
 8004900:	4801      	ldr	r0, [pc, #4]	@ (8004908 <__sfp_lock_release+0x8>)
 8004902:	f000 bee9 	b.w	80056d8 <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	20000479 	.word	0x20000479

0800490c <__sinit>:
 800490c:	b510      	push	{r4, lr}
 800490e:	4604      	mov	r4, r0
 8004910:	f7ff fff0 	bl	80048f4 <__sfp_lock_acquire>
 8004914:	6a23      	ldr	r3, [r4, #32]
 8004916:	b11b      	cbz	r3, 8004920 <__sinit+0x14>
 8004918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800491c:	f7ff bff0 	b.w	8004900 <__sfp_lock_release>
 8004920:	4b04      	ldr	r3, [pc, #16]	@ (8004934 <__sinit+0x28>)
 8004922:	6223      	str	r3, [r4, #32]
 8004924:	4b04      	ldr	r3, [pc, #16]	@ (8004938 <__sinit+0x2c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f5      	bne.n	8004918 <__sinit+0xc>
 800492c:	f7ff ffc4 	bl	80048b8 <global_stdio_init.part.0>
 8004930:	e7f2      	b.n	8004918 <__sinit+0xc>
 8004932:	bf00      	nop
 8004934:	08004879 	.word	0x08004879
 8004938:	20000474 	.word	0x20000474

0800493c <sulp>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4604      	mov	r4, r0
 8004940:	460d      	mov	r5, r1
 8004942:	ec45 4b10 	vmov	d0, r4, r5
 8004946:	4616      	mov	r6, r2
 8004948:	f001 ff1e 	bl	8006788 <__ulp>
 800494c:	ec51 0b10 	vmov	r0, r1, d0
 8004950:	b17e      	cbz	r6, 8004972 <sulp+0x36>
 8004952:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004956:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800495a:	2b00      	cmp	r3, #0
 800495c:	dd09      	ble.n	8004972 <sulp+0x36>
 800495e:	051b      	lsls	r3, r3, #20
 8004960:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004964:	2400      	movs	r4, #0
 8004966:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800496a:	4622      	mov	r2, r4
 800496c:	462b      	mov	r3, r5
 800496e:	f7fb fe63 	bl	8000638 <__aeabi_dmul>
 8004972:	ec41 0b10 	vmov	d0, r0, r1
 8004976:	bd70      	pop	{r4, r5, r6, pc}

08004978 <_strtod_l>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	b09f      	sub	sp, #124	@ 0x7c
 800497e:	460c      	mov	r4, r1
 8004980:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004982:	2200      	movs	r2, #0
 8004984:	921a      	str	r2, [sp, #104]	@ 0x68
 8004986:	9005      	str	r0, [sp, #20]
 8004988:	f04f 0a00 	mov.w	sl, #0
 800498c:	f04f 0b00 	mov.w	fp, #0
 8004990:	460a      	mov	r2, r1
 8004992:	9219      	str	r2, [sp, #100]	@ 0x64
 8004994:	7811      	ldrb	r1, [r2, #0]
 8004996:	292b      	cmp	r1, #43	@ 0x2b
 8004998:	d04a      	beq.n	8004a30 <_strtod_l+0xb8>
 800499a:	d838      	bhi.n	8004a0e <_strtod_l+0x96>
 800499c:	290d      	cmp	r1, #13
 800499e:	d832      	bhi.n	8004a06 <_strtod_l+0x8e>
 80049a0:	2908      	cmp	r1, #8
 80049a2:	d832      	bhi.n	8004a0a <_strtod_l+0x92>
 80049a4:	2900      	cmp	r1, #0
 80049a6:	d03b      	beq.n	8004a20 <_strtod_l+0xa8>
 80049a8:	2200      	movs	r2, #0
 80049aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80049ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80049ae:	782a      	ldrb	r2, [r5, #0]
 80049b0:	2a30      	cmp	r2, #48	@ 0x30
 80049b2:	f040 80b3 	bne.w	8004b1c <_strtod_l+0x1a4>
 80049b6:	786a      	ldrb	r2, [r5, #1]
 80049b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80049bc:	2a58      	cmp	r2, #88	@ 0x58
 80049be:	d16e      	bne.n	8004a9e <_strtod_l+0x126>
 80049c0:	9302      	str	r3, [sp, #8]
 80049c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4a8e      	ldr	r2, [pc, #568]	@ (8004c04 <_strtod_l+0x28c>)
 80049cc:	9805      	ldr	r0, [sp, #20]
 80049ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80049d0:	a919      	add	r1, sp, #100	@ 0x64
 80049d2:	f000 ff1f 	bl	8005814 <__gethex>
 80049d6:	f010 060f 	ands.w	r6, r0, #15
 80049da:	4604      	mov	r4, r0
 80049dc:	d005      	beq.n	80049ea <_strtod_l+0x72>
 80049de:	2e06      	cmp	r6, #6
 80049e0:	d128      	bne.n	8004a34 <_strtod_l+0xbc>
 80049e2:	3501      	adds	r5, #1
 80049e4:	2300      	movs	r3, #0
 80049e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80049e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 858e 	bne.w	800550e <_strtod_l+0xb96>
 80049f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049f4:	b1cb      	cbz	r3, 8004a2a <_strtod_l+0xb2>
 80049f6:	4652      	mov	r2, sl
 80049f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80049fc:	ec43 2b10 	vmov	d0, r2, r3
 8004a00:	b01f      	add	sp, #124	@ 0x7c
 8004a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a06:	2920      	cmp	r1, #32
 8004a08:	d1ce      	bne.n	80049a8 <_strtod_l+0x30>
 8004a0a:	3201      	adds	r2, #1
 8004a0c:	e7c1      	b.n	8004992 <_strtod_l+0x1a>
 8004a0e:	292d      	cmp	r1, #45	@ 0x2d
 8004a10:	d1ca      	bne.n	80049a8 <_strtod_l+0x30>
 8004a12:	2101      	movs	r1, #1
 8004a14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004a16:	1c51      	adds	r1, r2, #1
 8004a18:	9119      	str	r1, [sp, #100]	@ 0x64
 8004a1a:	7852      	ldrb	r2, [r2, #1]
 8004a1c:	2a00      	cmp	r2, #0
 8004a1e:	d1c5      	bne.n	80049ac <_strtod_l+0x34>
 8004a20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a22:	9419      	str	r4, [sp, #100]	@ 0x64
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f040 8570 	bne.w	800550a <_strtod_l+0xb92>
 8004a2a:	4652      	mov	r2, sl
 8004a2c:	465b      	mov	r3, fp
 8004a2e:	e7e5      	b.n	80049fc <_strtod_l+0x84>
 8004a30:	2100      	movs	r1, #0
 8004a32:	e7ef      	b.n	8004a14 <_strtod_l+0x9c>
 8004a34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004a36:	b13a      	cbz	r2, 8004a48 <_strtod_l+0xd0>
 8004a38:	2135      	movs	r1, #53	@ 0x35
 8004a3a:	a81c      	add	r0, sp, #112	@ 0x70
 8004a3c:	f001 ff9e 	bl	800697c <__copybits>
 8004a40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004a42:	9805      	ldr	r0, [sp, #20]
 8004a44:	f001 fb6c 	bl	8006120 <_Bfree>
 8004a48:	3e01      	subs	r6, #1
 8004a4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004a4c:	2e04      	cmp	r6, #4
 8004a4e:	d806      	bhi.n	8004a5e <_strtod_l+0xe6>
 8004a50:	e8df f006 	tbb	[pc, r6]
 8004a54:	201d0314 	.word	0x201d0314
 8004a58:	14          	.byte	0x14
 8004a59:	00          	.byte	0x00
 8004a5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004a5e:	05e1      	lsls	r1, r4, #23
 8004a60:	bf48      	it	mi
 8004a62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004a66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004a6a:	0d1b      	lsrs	r3, r3, #20
 8004a6c:	051b      	lsls	r3, r3, #20
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1bb      	bne.n	80049ea <_strtod_l+0x72>
 8004a72:	f000 fe05 	bl	8005680 <__errno>
 8004a76:	2322      	movs	r3, #34	@ 0x22
 8004a78:	6003      	str	r3, [r0, #0]
 8004a7a:	e7b6      	b.n	80049ea <_strtod_l+0x72>
 8004a7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004a80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004a84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004a8c:	e7e7      	b.n	8004a5e <_strtod_l+0xe6>
 8004a8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004c0c <_strtod_l+0x294>
 8004a92:	e7e4      	b.n	8004a5e <_strtod_l+0xe6>
 8004a94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004a98:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004a9c:	e7df      	b.n	8004a5e <_strtod_l+0xe6>
 8004a9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	9219      	str	r2, [sp, #100]	@ 0x64
 8004aa4:	785b      	ldrb	r3, [r3, #1]
 8004aa6:	2b30      	cmp	r3, #48	@ 0x30
 8004aa8:	d0f9      	beq.n	8004a9e <_strtod_l+0x126>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d09d      	beq.n	80049ea <_strtod_l+0x72>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9308      	str	r3, [sp, #32]
 8004aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8004abc:	461f      	mov	r7, r3
 8004abe:	220a      	movs	r2, #10
 8004ac0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004ac2:	7805      	ldrb	r5, [r0, #0]
 8004ac4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004ac8:	b2d9      	uxtb	r1, r3
 8004aca:	2909      	cmp	r1, #9
 8004acc:	d928      	bls.n	8004b20 <_strtod_l+0x1a8>
 8004ace:	494e      	ldr	r1, [pc, #312]	@ (8004c08 <_strtod_l+0x290>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f000 fd5f 	bl	8005594 <strncmp>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d032      	beq.n	8004b40 <_strtod_l+0x1c8>
 8004ada:	2000      	movs	r0, #0
 8004adc:	462a      	mov	r2, r5
 8004ade:	4681      	mov	r9, r0
 8004ae0:	463d      	mov	r5, r7
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2a65      	cmp	r2, #101	@ 0x65
 8004ae6:	d001      	beq.n	8004aec <_strtod_l+0x174>
 8004ae8:	2a45      	cmp	r2, #69	@ 0x45
 8004aea:	d114      	bne.n	8004b16 <_strtod_l+0x19e>
 8004aec:	b91d      	cbnz	r5, 8004af6 <_strtod_l+0x17e>
 8004aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004af0:	4302      	orrs	r2, r0
 8004af2:	d095      	beq.n	8004a20 <_strtod_l+0xa8>
 8004af4:	2500      	movs	r5, #0
 8004af6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004af8:	1c62      	adds	r2, r4, #1
 8004afa:	9219      	str	r2, [sp, #100]	@ 0x64
 8004afc:	7862      	ldrb	r2, [r4, #1]
 8004afe:	2a2b      	cmp	r2, #43	@ 0x2b
 8004b00:	d077      	beq.n	8004bf2 <_strtod_l+0x27a>
 8004b02:	2a2d      	cmp	r2, #45	@ 0x2d
 8004b04:	d07b      	beq.n	8004bfe <_strtod_l+0x286>
 8004b06:	f04f 0c00 	mov.w	ip, #0
 8004b0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004b0e:	2909      	cmp	r1, #9
 8004b10:	f240 8082 	bls.w	8004c18 <_strtod_l+0x2a0>
 8004b14:	9419      	str	r4, [sp, #100]	@ 0x64
 8004b16:	f04f 0800 	mov.w	r8, #0
 8004b1a:	e0a2      	b.n	8004c62 <_strtod_l+0x2ea>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e7c7      	b.n	8004ab0 <_strtod_l+0x138>
 8004b20:	2f08      	cmp	r7, #8
 8004b22:	bfd5      	itete	le
 8004b24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004b26:	9908      	ldrgt	r1, [sp, #32]
 8004b28:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004b30:	f100 0001 	add.w	r0, r0, #1
 8004b34:	bfd4      	ite	le
 8004b36:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004b38:	9308      	strgt	r3, [sp, #32]
 8004b3a:	3701      	adds	r7, #1
 8004b3c:	9019      	str	r0, [sp, #100]	@ 0x64
 8004b3e:	e7bf      	b.n	8004ac0 <_strtod_l+0x148>
 8004b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b46:	785a      	ldrb	r2, [r3, #1]
 8004b48:	b37f      	cbz	r7, 8004baa <_strtod_l+0x232>
 8004b4a:	4681      	mov	r9, r0
 8004b4c:	463d      	mov	r5, r7
 8004b4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004b52:	2b09      	cmp	r3, #9
 8004b54:	d912      	bls.n	8004b7c <_strtod_l+0x204>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e7c4      	b.n	8004ae4 <_strtod_l+0x16c>
 8004b5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b60:	785a      	ldrb	r2, [r3, #1]
 8004b62:	3001      	adds	r0, #1
 8004b64:	2a30      	cmp	r2, #48	@ 0x30
 8004b66:	d0f8      	beq.n	8004b5a <_strtod_l+0x1e2>
 8004b68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	f200 84d3 	bhi.w	8005518 <_strtod_l+0xba0>
 8004b72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b74:	930c      	str	r3, [sp, #48]	@ 0x30
 8004b76:	4681      	mov	r9, r0
 8004b78:	2000      	movs	r0, #0
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	3a30      	subs	r2, #48	@ 0x30
 8004b7e:	f100 0301 	add.w	r3, r0, #1
 8004b82:	d02a      	beq.n	8004bda <_strtod_l+0x262>
 8004b84:	4499      	add	r9, r3
 8004b86:	eb00 0c05 	add.w	ip, r0, r5
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	210a      	movs	r1, #10
 8004b8e:	4563      	cmp	r3, ip
 8004b90:	d10d      	bne.n	8004bae <_strtod_l+0x236>
 8004b92:	1c69      	adds	r1, r5, #1
 8004b94:	4401      	add	r1, r0
 8004b96:	4428      	add	r0, r5
 8004b98:	2808      	cmp	r0, #8
 8004b9a:	dc16      	bgt.n	8004bca <_strtod_l+0x252>
 8004b9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	fb03 2300 	mla	r3, r3, r0, r2
 8004ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e018      	b.n	8004bdc <_strtod_l+0x264>
 8004baa:	4638      	mov	r0, r7
 8004bac:	e7da      	b.n	8004b64 <_strtod_l+0x1ec>
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	f103 0301 	add.w	r3, r3, #1
 8004bb4:	dc03      	bgt.n	8004bbe <_strtod_l+0x246>
 8004bb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004bb8:	434e      	muls	r6, r1
 8004bba:	960a      	str	r6, [sp, #40]	@ 0x28
 8004bbc:	e7e7      	b.n	8004b8e <_strtod_l+0x216>
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	bfde      	ittt	le
 8004bc2:	9e08      	ldrle	r6, [sp, #32]
 8004bc4:	434e      	mulle	r6, r1
 8004bc6:	9608      	strle	r6, [sp, #32]
 8004bc8:	e7e1      	b.n	8004b8e <_strtod_l+0x216>
 8004bca:	280f      	cmp	r0, #15
 8004bcc:	dceb      	bgt.n	8004ba6 <_strtod_l+0x22e>
 8004bce:	9808      	ldr	r0, [sp, #32]
 8004bd0:	230a      	movs	r3, #10
 8004bd2:	fb03 2300 	mla	r3, r3, r0, r2
 8004bd6:	9308      	str	r3, [sp, #32]
 8004bd8:	e7e5      	b.n	8004ba6 <_strtod_l+0x22e>
 8004bda:	4629      	mov	r1, r5
 8004bdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bde:	1c50      	adds	r0, r2, #1
 8004be0:	9019      	str	r0, [sp, #100]	@ 0x64
 8004be2:	7852      	ldrb	r2, [r2, #1]
 8004be4:	4618      	mov	r0, r3
 8004be6:	460d      	mov	r5, r1
 8004be8:	e7b1      	b.n	8004b4e <_strtod_l+0x1d6>
 8004bea:	f04f 0900 	mov.w	r9, #0
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e77d      	b.n	8004aee <_strtod_l+0x176>
 8004bf2:	f04f 0c00 	mov.w	ip, #0
 8004bf6:	1ca2      	adds	r2, r4, #2
 8004bf8:	9219      	str	r2, [sp, #100]	@ 0x64
 8004bfa:	78a2      	ldrb	r2, [r4, #2]
 8004bfc:	e785      	b.n	8004b0a <_strtod_l+0x192>
 8004bfe:	f04f 0c01 	mov.w	ip, #1
 8004c02:	e7f8      	b.n	8004bf6 <_strtod_l+0x27e>
 8004c04:	0800750c 	.word	0x0800750c
 8004c08:	080074e8 	.word	0x080074e8
 8004c0c:	7ff00000 	.word	0x7ff00000
 8004c10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004c12:	1c51      	adds	r1, r2, #1
 8004c14:	9119      	str	r1, [sp, #100]	@ 0x64
 8004c16:	7852      	ldrb	r2, [r2, #1]
 8004c18:	2a30      	cmp	r2, #48	@ 0x30
 8004c1a:	d0f9      	beq.n	8004c10 <_strtod_l+0x298>
 8004c1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004c20:	2908      	cmp	r1, #8
 8004c22:	f63f af78 	bhi.w	8004b16 <_strtod_l+0x19e>
 8004c26:	3a30      	subs	r2, #48	@ 0x30
 8004c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8004c2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004c2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004c2e:	f04f 080a 	mov.w	r8, #10
 8004c32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004c34:	1c56      	adds	r6, r2, #1
 8004c36:	9619      	str	r6, [sp, #100]	@ 0x64
 8004c38:	7852      	ldrb	r2, [r2, #1]
 8004c3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004c3e:	f1be 0f09 	cmp.w	lr, #9
 8004c42:	d939      	bls.n	8004cb8 <_strtod_l+0x340>
 8004c44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004c46:	1a76      	subs	r6, r6, r1
 8004c48:	2e08      	cmp	r6, #8
 8004c4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004c4e:	dc03      	bgt.n	8004c58 <_strtod_l+0x2e0>
 8004c50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004c52:	4588      	cmp	r8, r1
 8004c54:	bfa8      	it	ge
 8004c56:	4688      	movge	r8, r1
 8004c58:	f1bc 0f00 	cmp.w	ip, #0
 8004c5c:	d001      	beq.n	8004c62 <_strtod_l+0x2ea>
 8004c5e:	f1c8 0800 	rsb	r8, r8, #0
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	d14e      	bne.n	8004d04 <_strtod_l+0x38c>
 8004c66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c68:	4308      	orrs	r0, r1
 8004c6a:	f47f aebe 	bne.w	80049ea <_strtod_l+0x72>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f47f aed6 	bne.w	8004a20 <_strtod_l+0xa8>
 8004c74:	2a69      	cmp	r2, #105	@ 0x69
 8004c76:	d028      	beq.n	8004cca <_strtod_l+0x352>
 8004c78:	dc25      	bgt.n	8004cc6 <_strtod_l+0x34e>
 8004c7a:	2a49      	cmp	r2, #73	@ 0x49
 8004c7c:	d025      	beq.n	8004cca <_strtod_l+0x352>
 8004c7e:	2a4e      	cmp	r2, #78	@ 0x4e
 8004c80:	f47f aece 	bne.w	8004a20 <_strtod_l+0xa8>
 8004c84:	499b      	ldr	r1, [pc, #620]	@ (8004ef4 <_strtod_l+0x57c>)
 8004c86:	a819      	add	r0, sp, #100	@ 0x64
 8004c88:	f000 ffe6 	bl	8005c58 <__match>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	f43f aec7 	beq.w	8004a20 <_strtod_l+0xa8>
 8004c92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b28      	cmp	r3, #40	@ 0x28
 8004c98:	d12e      	bne.n	8004cf8 <_strtod_l+0x380>
 8004c9a:	4997      	ldr	r1, [pc, #604]	@ (8004ef8 <_strtod_l+0x580>)
 8004c9c:	aa1c      	add	r2, sp, #112	@ 0x70
 8004c9e:	a819      	add	r0, sp, #100	@ 0x64
 8004ca0:	f000 ffee 	bl	8005c80 <__hexnan>
 8004ca4:	2805      	cmp	r0, #5
 8004ca6:	d127      	bne.n	8004cf8 <_strtod_l+0x380>
 8004ca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004caa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004cae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004cb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004cb6:	e698      	b.n	80049ea <_strtod_l+0x72>
 8004cb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004cba:	fb08 2101 	mla	r1, r8, r1, r2
 8004cbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004cc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8004cc4:	e7b5      	b.n	8004c32 <_strtod_l+0x2ba>
 8004cc6:	2a6e      	cmp	r2, #110	@ 0x6e
 8004cc8:	e7da      	b.n	8004c80 <_strtod_l+0x308>
 8004cca:	498c      	ldr	r1, [pc, #560]	@ (8004efc <_strtod_l+0x584>)
 8004ccc:	a819      	add	r0, sp, #100	@ 0x64
 8004cce:	f000 ffc3 	bl	8005c58 <__match>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f43f aea4 	beq.w	8004a20 <_strtod_l+0xa8>
 8004cd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004cda:	4989      	ldr	r1, [pc, #548]	@ (8004f00 <_strtod_l+0x588>)
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	a819      	add	r0, sp, #100	@ 0x64
 8004ce0:	9319      	str	r3, [sp, #100]	@ 0x64
 8004ce2:	f000 ffb9 	bl	8005c58 <__match>
 8004ce6:	b910      	cbnz	r0, 8004cee <_strtod_l+0x376>
 8004ce8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004cea:	3301      	adds	r3, #1
 8004cec:	9319      	str	r3, [sp, #100]	@ 0x64
 8004cee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8004f10 <_strtod_l+0x598>
 8004cf2:	f04f 0a00 	mov.w	sl, #0
 8004cf6:	e678      	b.n	80049ea <_strtod_l+0x72>
 8004cf8:	4882      	ldr	r0, [pc, #520]	@ (8004f04 <_strtod_l+0x58c>)
 8004cfa:	f000 fcfd 	bl	80056f8 <nan>
 8004cfe:	ec5b ab10 	vmov	sl, fp, d0
 8004d02:	e672      	b.n	80049ea <_strtod_l+0x72>
 8004d04:	eba8 0309 	sub.w	r3, r8, r9
 8004d08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d0c:	2f00      	cmp	r7, #0
 8004d0e:	bf08      	it	eq
 8004d10:	462f      	moveq	r7, r5
 8004d12:	2d10      	cmp	r5, #16
 8004d14:	462c      	mov	r4, r5
 8004d16:	bfa8      	it	ge
 8004d18:	2410      	movge	r4, #16
 8004d1a:	f7fb fc13 	bl	8000544 <__aeabi_ui2d>
 8004d1e:	2d09      	cmp	r5, #9
 8004d20:	4682      	mov	sl, r0
 8004d22:	468b      	mov	fp, r1
 8004d24:	dc13      	bgt.n	8004d4e <_strtod_l+0x3d6>
 8004d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f43f ae5e 	beq.w	80049ea <_strtod_l+0x72>
 8004d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d30:	dd78      	ble.n	8004e24 <_strtod_l+0x4ac>
 8004d32:	2b16      	cmp	r3, #22
 8004d34:	dc5f      	bgt.n	8004df6 <_strtod_l+0x47e>
 8004d36:	4974      	ldr	r1, [pc, #464]	@ (8004f08 <_strtod_l+0x590>)
 8004d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d40:	4652      	mov	r2, sl
 8004d42:	465b      	mov	r3, fp
 8004d44:	f7fb fc78 	bl	8000638 <__aeabi_dmul>
 8004d48:	4682      	mov	sl, r0
 8004d4a:	468b      	mov	fp, r1
 8004d4c:	e64d      	b.n	80049ea <_strtod_l+0x72>
 8004d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8004f08 <_strtod_l+0x590>)
 8004d50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004d58:	f7fb fc6e 	bl	8000638 <__aeabi_dmul>
 8004d5c:	4682      	mov	sl, r0
 8004d5e:	9808      	ldr	r0, [sp, #32]
 8004d60:	468b      	mov	fp, r1
 8004d62:	f7fb fbef 	bl	8000544 <__aeabi_ui2d>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	f7fb faad 	bl	80002cc <__adddf3>
 8004d72:	2d0f      	cmp	r5, #15
 8004d74:	4682      	mov	sl, r0
 8004d76:	468b      	mov	fp, r1
 8004d78:	ddd5      	ble.n	8004d26 <_strtod_l+0x3ae>
 8004d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d7c:	1b2c      	subs	r4, r5, r4
 8004d7e:	441c      	add	r4, r3
 8004d80:	2c00      	cmp	r4, #0
 8004d82:	f340 8096 	ble.w	8004eb2 <_strtod_l+0x53a>
 8004d86:	f014 030f 	ands.w	r3, r4, #15
 8004d8a:	d00a      	beq.n	8004da2 <_strtod_l+0x42a>
 8004d8c:	495e      	ldr	r1, [pc, #376]	@ (8004f08 <_strtod_l+0x590>)
 8004d8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d92:	4652      	mov	r2, sl
 8004d94:	465b      	mov	r3, fp
 8004d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d9a:	f7fb fc4d 	bl	8000638 <__aeabi_dmul>
 8004d9e:	4682      	mov	sl, r0
 8004da0:	468b      	mov	fp, r1
 8004da2:	f034 040f 	bics.w	r4, r4, #15
 8004da6:	d073      	beq.n	8004e90 <_strtod_l+0x518>
 8004da8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004dac:	dd48      	ble.n	8004e40 <_strtod_l+0x4c8>
 8004dae:	2400      	movs	r4, #0
 8004db0:	46a0      	mov	r8, r4
 8004db2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004db4:	46a1      	mov	r9, r4
 8004db6:	9a05      	ldr	r2, [sp, #20]
 8004db8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8004f10 <_strtod_l+0x598>
 8004dbc:	2322      	movs	r3, #34	@ 0x22
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	f04f 0a00 	mov.w	sl, #0
 8004dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f43f ae0f 	beq.w	80049ea <_strtod_l+0x72>
 8004dcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004dce:	9805      	ldr	r0, [sp, #20]
 8004dd0:	f001 f9a6 	bl	8006120 <_Bfree>
 8004dd4:	9805      	ldr	r0, [sp, #20]
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	f001 f9a2 	bl	8006120 <_Bfree>
 8004ddc:	9805      	ldr	r0, [sp, #20]
 8004dde:	4641      	mov	r1, r8
 8004de0:	f001 f99e 	bl	8006120 <_Bfree>
 8004de4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004de6:	9805      	ldr	r0, [sp, #20]
 8004de8:	f001 f99a 	bl	8006120 <_Bfree>
 8004dec:	9805      	ldr	r0, [sp, #20]
 8004dee:	4621      	mov	r1, r4
 8004df0:	f001 f996 	bl	8006120 <_Bfree>
 8004df4:	e5f9      	b.n	80049ea <_strtod_l+0x72>
 8004df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004df8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	dbbc      	blt.n	8004d7a <_strtod_l+0x402>
 8004e00:	4c41      	ldr	r4, [pc, #260]	@ (8004f08 <_strtod_l+0x590>)
 8004e02:	f1c5 050f 	rsb	r5, r5, #15
 8004e06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004e0a:	4652      	mov	r2, sl
 8004e0c:	465b      	mov	r3, fp
 8004e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e12:	f7fb fc11 	bl	8000638 <__aeabi_dmul>
 8004e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e18:	1b5d      	subs	r5, r3, r5
 8004e1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004e1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004e22:	e78f      	b.n	8004d44 <_strtod_l+0x3cc>
 8004e24:	3316      	adds	r3, #22
 8004e26:	dba8      	blt.n	8004d7a <_strtod_l+0x402>
 8004e28:	4b37      	ldr	r3, [pc, #220]	@ (8004f08 <_strtod_l+0x590>)
 8004e2a:	eba9 0808 	sub.w	r8, r9, r8
 8004e2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004e32:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004e36:	4650      	mov	r0, sl
 8004e38:	4659      	mov	r1, fp
 8004e3a:	f7fb fd27 	bl	800088c <__aeabi_ddiv>
 8004e3e:	e783      	b.n	8004d48 <_strtod_l+0x3d0>
 8004e40:	4b32      	ldr	r3, [pc, #200]	@ (8004f0c <_strtod_l+0x594>)
 8004e42:	9308      	str	r3, [sp, #32]
 8004e44:	2300      	movs	r3, #0
 8004e46:	1124      	asrs	r4, r4, #4
 8004e48:	4650      	mov	r0, sl
 8004e4a:	4659      	mov	r1, fp
 8004e4c:	461e      	mov	r6, r3
 8004e4e:	2c01      	cmp	r4, #1
 8004e50:	dc21      	bgt.n	8004e96 <_strtod_l+0x51e>
 8004e52:	b10b      	cbz	r3, 8004e58 <_strtod_l+0x4e0>
 8004e54:	4682      	mov	sl, r0
 8004e56:	468b      	mov	fp, r1
 8004e58:	492c      	ldr	r1, [pc, #176]	@ (8004f0c <_strtod_l+0x594>)
 8004e5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004e5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004e62:	4652      	mov	r2, sl
 8004e64:	465b      	mov	r3, fp
 8004e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e6a:	f7fb fbe5 	bl	8000638 <__aeabi_dmul>
 8004e6e:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <_strtod_l+0x598>)
 8004e70:	460a      	mov	r2, r1
 8004e72:	400b      	ands	r3, r1
 8004e74:	4927      	ldr	r1, [pc, #156]	@ (8004f14 <_strtod_l+0x59c>)
 8004e76:	428b      	cmp	r3, r1
 8004e78:	4682      	mov	sl, r0
 8004e7a:	d898      	bhi.n	8004dae <_strtod_l+0x436>
 8004e7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004e80:	428b      	cmp	r3, r1
 8004e82:	bf86      	itte	hi
 8004e84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8004f18 <_strtod_l+0x5a0>
 8004e88:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8004e8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004e90:	2300      	movs	r3, #0
 8004e92:	9308      	str	r3, [sp, #32]
 8004e94:	e07a      	b.n	8004f8c <_strtod_l+0x614>
 8004e96:	07e2      	lsls	r2, r4, #31
 8004e98:	d505      	bpl.n	8004ea6 <_strtod_l+0x52e>
 8004e9a:	9b08      	ldr	r3, [sp, #32]
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f7fb fbca 	bl	8000638 <__aeabi_dmul>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	9a08      	ldr	r2, [sp, #32]
 8004ea8:	3208      	adds	r2, #8
 8004eaa:	3601      	adds	r6, #1
 8004eac:	1064      	asrs	r4, r4, #1
 8004eae:	9208      	str	r2, [sp, #32]
 8004eb0:	e7cd      	b.n	8004e4e <_strtod_l+0x4d6>
 8004eb2:	d0ed      	beq.n	8004e90 <_strtod_l+0x518>
 8004eb4:	4264      	negs	r4, r4
 8004eb6:	f014 020f 	ands.w	r2, r4, #15
 8004eba:	d00a      	beq.n	8004ed2 <_strtod_l+0x55a>
 8004ebc:	4b12      	ldr	r3, [pc, #72]	@ (8004f08 <_strtod_l+0x590>)
 8004ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ec2:	4650      	mov	r0, sl
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f7fb fcdf 	bl	800088c <__aeabi_ddiv>
 8004ece:	4682      	mov	sl, r0
 8004ed0:	468b      	mov	fp, r1
 8004ed2:	1124      	asrs	r4, r4, #4
 8004ed4:	d0dc      	beq.n	8004e90 <_strtod_l+0x518>
 8004ed6:	2c1f      	cmp	r4, #31
 8004ed8:	dd20      	ble.n	8004f1c <_strtod_l+0x5a4>
 8004eda:	2400      	movs	r4, #0
 8004edc:	46a0      	mov	r8, r4
 8004ede:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ee0:	46a1      	mov	r9, r4
 8004ee2:	9a05      	ldr	r2, [sp, #20]
 8004ee4:	2322      	movs	r3, #34	@ 0x22
 8004ee6:	f04f 0a00 	mov.w	sl, #0
 8004eea:	f04f 0b00 	mov.w	fp, #0
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e768      	b.n	8004dc4 <_strtod_l+0x44c>
 8004ef2:	bf00      	nop
 8004ef4:	080074f3 	.word	0x080074f3
 8004ef8:	080074f8 	.word	0x080074f8
 8004efc:	080074ea 	.word	0x080074ea
 8004f00:	080074ed 	.word	0x080074ed
 8004f04:	080076fd 	.word	0x080076fd
 8004f08:	08007800 	.word	0x08007800
 8004f0c:	080077d8 	.word	0x080077d8
 8004f10:	7ff00000 	.word	0x7ff00000
 8004f14:	7ca00000 	.word	0x7ca00000
 8004f18:	7fefffff 	.word	0x7fefffff
 8004f1c:	f014 0310 	ands.w	r3, r4, #16
 8004f20:	bf18      	it	ne
 8004f22:	236a      	movne	r3, #106	@ 0x6a
 8004f24:	4ea9      	ldr	r6, [pc, #676]	@ (80051cc <_strtod_l+0x854>)
 8004f26:	9308      	str	r3, [sp, #32]
 8004f28:	4650      	mov	r0, sl
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	07e2      	lsls	r2, r4, #31
 8004f30:	d504      	bpl.n	8004f3c <_strtod_l+0x5c4>
 8004f32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f36:	f7fb fb7f 	bl	8000638 <__aeabi_dmul>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	1064      	asrs	r4, r4, #1
 8004f3e:	f106 0608 	add.w	r6, r6, #8
 8004f42:	d1f4      	bne.n	8004f2e <_strtod_l+0x5b6>
 8004f44:	b10b      	cbz	r3, 8004f4a <_strtod_l+0x5d2>
 8004f46:	4682      	mov	sl, r0
 8004f48:	468b      	mov	fp, r1
 8004f4a:	9b08      	ldr	r3, [sp, #32]
 8004f4c:	b1b3      	cbz	r3, 8004f7c <_strtod_l+0x604>
 8004f4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004f52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	4659      	mov	r1, fp
 8004f5a:	dd0f      	ble.n	8004f7c <_strtod_l+0x604>
 8004f5c:	2b1f      	cmp	r3, #31
 8004f5e:	dd55      	ble.n	800500c <_strtod_l+0x694>
 8004f60:	2b34      	cmp	r3, #52	@ 0x34
 8004f62:	bfde      	ittt	le
 8004f64:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8004f68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004f6c:	4093      	lslle	r3, r2
 8004f6e:	f04f 0a00 	mov.w	sl, #0
 8004f72:	bfcc      	ite	gt
 8004f74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004f78:	ea03 0b01 	andle.w	fp, r3, r1
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2300      	movs	r3, #0
 8004f80:	4650      	mov	r0, sl
 8004f82:	4659      	mov	r1, fp
 8004f84:	f7fb fdc0 	bl	8000b08 <__aeabi_dcmpeq>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d1a6      	bne.n	8004eda <_strtod_l+0x562>
 8004f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004f92:	9805      	ldr	r0, [sp, #20]
 8004f94:	462b      	mov	r3, r5
 8004f96:	463a      	mov	r2, r7
 8004f98:	f001 f92a 	bl	80061f0 <__s2b>
 8004f9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f43f af05 	beq.w	8004dae <_strtod_l+0x436>
 8004fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	eba9 0308 	sub.w	r3, r9, r8
 8004fac:	bfa8      	it	ge
 8004fae:	2300      	movge	r3, #0
 8004fb0:	9312      	str	r3, [sp, #72]	@ 0x48
 8004fb2:	2400      	movs	r4, #0
 8004fb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004fb8:	9316      	str	r3, [sp, #88]	@ 0x58
 8004fba:	46a0      	mov	r8, r4
 8004fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fbe:	9805      	ldr	r0, [sp, #20]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	f001 f86d 	bl	80060a0 <_Balloc>
 8004fc6:	4681      	mov	r9, r0
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	f43f aef4 	beq.w	8004db6 <_strtod_l+0x43e>
 8004fce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	3202      	adds	r2, #2
 8004fd4:	f103 010c 	add.w	r1, r3, #12
 8004fd8:	0092      	lsls	r2, r2, #2
 8004fda:	300c      	adds	r0, #12
 8004fdc:	f000 fb7d 	bl	80056da <memcpy>
 8004fe0:	ec4b ab10 	vmov	d0, sl, fp
 8004fe4:	9805      	ldr	r0, [sp, #20]
 8004fe6:	aa1c      	add	r2, sp, #112	@ 0x70
 8004fe8:	a91b      	add	r1, sp, #108	@ 0x6c
 8004fea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004fee:	f001 fc3b 	bl	8006868 <__d2b>
 8004ff2:	901a      	str	r0, [sp, #104]	@ 0x68
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	f43f aede 	beq.w	8004db6 <_strtod_l+0x43e>
 8004ffa:	9805      	ldr	r0, [sp, #20]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	f001 f98d 	bl	800631c <__i2b>
 8005002:	4680      	mov	r8, r0
 8005004:	b948      	cbnz	r0, 800501a <_strtod_l+0x6a2>
 8005006:	f04f 0800 	mov.w	r8, #0
 800500a:	e6d4      	b.n	8004db6 <_strtod_l+0x43e>
 800500c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	ea03 0a0a 	and.w	sl, r3, sl
 8005018:	e7b0      	b.n	8004f7c <_strtod_l+0x604>
 800501a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800501c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800501e:	2d00      	cmp	r5, #0
 8005020:	bfab      	itete	ge
 8005022:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005024:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005026:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005028:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800502a:	bfac      	ite	ge
 800502c:	18ef      	addge	r7, r5, r3
 800502e:	1b5e      	sublt	r6, r3, r5
 8005030:	9b08      	ldr	r3, [sp, #32]
 8005032:	1aed      	subs	r5, r5, r3
 8005034:	4415      	add	r5, r2
 8005036:	4b66      	ldr	r3, [pc, #408]	@ (80051d0 <_strtod_l+0x858>)
 8005038:	3d01      	subs	r5, #1
 800503a:	429d      	cmp	r5, r3
 800503c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005040:	da50      	bge.n	80050e4 <_strtod_l+0x76c>
 8005042:	1b5b      	subs	r3, r3, r5
 8005044:	2b1f      	cmp	r3, #31
 8005046:	eba2 0203 	sub.w	r2, r2, r3
 800504a:	f04f 0101 	mov.w	r1, #1
 800504e:	dc3d      	bgt.n	80050cc <_strtod_l+0x754>
 8005050:	fa01 f303 	lsl.w	r3, r1, r3
 8005054:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005056:	2300      	movs	r3, #0
 8005058:	9310      	str	r3, [sp, #64]	@ 0x40
 800505a:	18bd      	adds	r5, r7, r2
 800505c:	9b08      	ldr	r3, [sp, #32]
 800505e:	42af      	cmp	r7, r5
 8005060:	4416      	add	r6, r2
 8005062:	441e      	add	r6, r3
 8005064:	463b      	mov	r3, r7
 8005066:	bfa8      	it	ge
 8005068:	462b      	movge	r3, r5
 800506a:	42b3      	cmp	r3, r6
 800506c:	bfa8      	it	ge
 800506e:	4633      	movge	r3, r6
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfc2      	ittt	gt
 8005074:	1aed      	subgt	r5, r5, r3
 8005076:	1af6      	subgt	r6, r6, r3
 8005078:	1aff      	subgt	r7, r7, r3
 800507a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800507c:	2b00      	cmp	r3, #0
 800507e:	dd16      	ble.n	80050ae <_strtod_l+0x736>
 8005080:	4641      	mov	r1, r8
 8005082:	9805      	ldr	r0, [sp, #20]
 8005084:	461a      	mov	r2, r3
 8005086:	f001 fa09 	bl	800649c <__pow5mult>
 800508a:	4680      	mov	r8, r0
 800508c:	2800      	cmp	r0, #0
 800508e:	d0ba      	beq.n	8005006 <_strtod_l+0x68e>
 8005090:	4601      	mov	r1, r0
 8005092:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005094:	9805      	ldr	r0, [sp, #20]
 8005096:	f001 f957 	bl	8006348 <__multiply>
 800509a:	900e      	str	r0, [sp, #56]	@ 0x38
 800509c:	2800      	cmp	r0, #0
 800509e:	f43f ae8a 	beq.w	8004db6 <_strtod_l+0x43e>
 80050a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80050a4:	9805      	ldr	r0, [sp, #20]
 80050a6:	f001 f83b 	bl	8006120 <_Bfree>
 80050aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	dc1d      	bgt.n	80050ee <_strtod_l+0x776>
 80050b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	dd23      	ble.n	8005100 <_strtod_l+0x788>
 80050b8:	4649      	mov	r1, r9
 80050ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80050bc:	9805      	ldr	r0, [sp, #20]
 80050be:	f001 f9ed 	bl	800649c <__pow5mult>
 80050c2:	4681      	mov	r9, r0
 80050c4:	b9e0      	cbnz	r0, 8005100 <_strtod_l+0x788>
 80050c6:	f04f 0900 	mov.w	r9, #0
 80050ca:	e674      	b.n	8004db6 <_strtod_l+0x43e>
 80050cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80050d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80050d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80050d8:	35e2      	adds	r5, #226	@ 0xe2
 80050da:	fa01 f305 	lsl.w	r3, r1, r5
 80050de:	9310      	str	r3, [sp, #64]	@ 0x40
 80050e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80050e2:	e7ba      	b.n	800505a <_strtod_l+0x6e2>
 80050e4:	2300      	movs	r3, #0
 80050e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80050e8:	2301      	movs	r3, #1
 80050ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80050ec:	e7b5      	b.n	800505a <_strtod_l+0x6e2>
 80050ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80050f0:	9805      	ldr	r0, [sp, #20]
 80050f2:	462a      	mov	r2, r5
 80050f4:	f001 fa2c 	bl	8006550 <__lshift>
 80050f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d1d9      	bne.n	80050b2 <_strtod_l+0x73a>
 80050fe:	e65a      	b.n	8004db6 <_strtod_l+0x43e>
 8005100:	2e00      	cmp	r6, #0
 8005102:	dd07      	ble.n	8005114 <_strtod_l+0x79c>
 8005104:	4649      	mov	r1, r9
 8005106:	9805      	ldr	r0, [sp, #20]
 8005108:	4632      	mov	r2, r6
 800510a:	f001 fa21 	bl	8006550 <__lshift>
 800510e:	4681      	mov	r9, r0
 8005110:	2800      	cmp	r0, #0
 8005112:	d0d8      	beq.n	80050c6 <_strtod_l+0x74e>
 8005114:	2f00      	cmp	r7, #0
 8005116:	dd08      	ble.n	800512a <_strtod_l+0x7b2>
 8005118:	4641      	mov	r1, r8
 800511a:	9805      	ldr	r0, [sp, #20]
 800511c:	463a      	mov	r2, r7
 800511e:	f001 fa17 	bl	8006550 <__lshift>
 8005122:	4680      	mov	r8, r0
 8005124:	2800      	cmp	r0, #0
 8005126:	f43f ae46 	beq.w	8004db6 <_strtod_l+0x43e>
 800512a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800512c:	9805      	ldr	r0, [sp, #20]
 800512e:	464a      	mov	r2, r9
 8005130:	f001 fa96 	bl	8006660 <__mdiff>
 8005134:	4604      	mov	r4, r0
 8005136:	2800      	cmp	r0, #0
 8005138:	f43f ae3d 	beq.w	8004db6 <_strtod_l+0x43e>
 800513c:	68c3      	ldr	r3, [r0, #12]
 800513e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005140:	2300      	movs	r3, #0
 8005142:	60c3      	str	r3, [r0, #12]
 8005144:	4641      	mov	r1, r8
 8005146:	f001 fa6f 	bl	8006628 <__mcmp>
 800514a:	2800      	cmp	r0, #0
 800514c:	da46      	bge.n	80051dc <_strtod_l+0x864>
 800514e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005150:	ea53 030a 	orrs.w	r3, r3, sl
 8005154:	d16c      	bne.n	8005230 <_strtod_l+0x8b8>
 8005156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800515a:	2b00      	cmp	r3, #0
 800515c:	d168      	bne.n	8005230 <_strtod_l+0x8b8>
 800515e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005162:	0d1b      	lsrs	r3, r3, #20
 8005164:	051b      	lsls	r3, r3, #20
 8005166:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800516a:	d961      	bls.n	8005230 <_strtod_l+0x8b8>
 800516c:	6963      	ldr	r3, [r4, #20]
 800516e:	b913      	cbnz	r3, 8005176 <_strtod_l+0x7fe>
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	2b01      	cmp	r3, #1
 8005174:	dd5c      	ble.n	8005230 <_strtod_l+0x8b8>
 8005176:	4621      	mov	r1, r4
 8005178:	2201      	movs	r2, #1
 800517a:	9805      	ldr	r0, [sp, #20]
 800517c:	f001 f9e8 	bl	8006550 <__lshift>
 8005180:	4641      	mov	r1, r8
 8005182:	4604      	mov	r4, r0
 8005184:	f001 fa50 	bl	8006628 <__mcmp>
 8005188:	2800      	cmp	r0, #0
 800518a:	dd51      	ble.n	8005230 <_strtod_l+0x8b8>
 800518c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005190:	9a08      	ldr	r2, [sp, #32]
 8005192:	0d1b      	lsrs	r3, r3, #20
 8005194:	051b      	lsls	r3, r3, #20
 8005196:	2a00      	cmp	r2, #0
 8005198:	d06b      	beq.n	8005272 <_strtod_l+0x8fa>
 800519a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800519e:	d868      	bhi.n	8005272 <_strtod_l+0x8fa>
 80051a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80051a4:	f67f ae9d 	bls.w	8004ee2 <_strtod_l+0x56a>
 80051a8:	4b0a      	ldr	r3, [pc, #40]	@ (80051d4 <_strtod_l+0x85c>)
 80051aa:	4650      	mov	r0, sl
 80051ac:	4659      	mov	r1, fp
 80051ae:	2200      	movs	r2, #0
 80051b0:	f7fb fa42 	bl	8000638 <__aeabi_dmul>
 80051b4:	4b08      	ldr	r3, [pc, #32]	@ (80051d8 <_strtod_l+0x860>)
 80051b6:	400b      	ands	r3, r1
 80051b8:	4682      	mov	sl, r0
 80051ba:	468b      	mov	fp, r1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f47f ae05 	bne.w	8004dcc <_strtod_l+0x454>
 80051c2:	9a05      	ldr	r2, [sp, #20]
 80051c4:	2322      	movs	r3, #34	@ 0x22
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	e600      	b.n	8004dcc <_strtod_l+0x454>
 80051ca:	bf00      	nop
 80051cc:	08007520 	.word	0x08007520
 80051d0:	fffffc02 	.word	0xfffffc02
 80051d4:	39500000 	.word	0x39500000
 80051d8:	7ff00000 	.word	0x7ff00000
 80051dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80051e0:	d165      	bne.n	80052ae <_strtod_l+0x936>
 80051e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80051e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051e8:	b35a      	cbz	r2, 8005242 <_strtod_l+0x8ca>
 80051ea:	4a9f      	ldr	r2, [pc, #636]	@ (8005468 <_strtod_l+0xaf0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d12b      	bne.n	8005248 <_strtod_l+0x8d0>
 80051f0:	9b08      	ldr	r3, [sp, #32]
 80051f2:	4651      	mov	r1, sl
 80051f4:	b303      	cbz	r3, 8005238 <_strtod_l+0x8c0>
 80051f6:	4b9d      	ldr	r3, [pc, #628]	@ (800546c <_strtod_l+0xaf4>)
 80051f8:	465a      	mov	r2, fp
 80051fa:	4013      	ands	r3, r2
 80051fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005200:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005204:	d81b      	bhi.n	800523e <_strtod_l+0x8c6>
 8005206:	0d1b      	lsrs	r3, r3, #20
 8005208:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	4299      	cmp	r1, r3
 8005212:	d119      	bne.n	8005248 <_strtod_l+0x8d0>
 8005214:	4b96      	ldr	r3, [pc, #600]	@ (8005470 <_strtod_l+0xaf8>)
 8005216:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005218:	429a      	cmp	r2, r3
 800521a:	d102      	bne.n	8005222 <_strtod_l+0x8aa>
 800521c:	3101      	adds	r1, #1
 800521e:	f43f adca 	beq.w	8004db6 <_strtod_l+0x43e>
 8005222:	4b92      	ldr	r3, [pc, #584]	@ (800546c <_strtod_l+0xaf4>)
 8005224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005226:	401a      	ands	r2, r3
 8005228:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800522c:	f04f 0a00 	mov.w	sl, #0
 8005230:	9b08      	ldr	r3, [sp, #32]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1b8      	bne.n	80051a8 <_strtod_l+0x830>
 8005236:	e5c9      	b.n	8004dcc <_strtod_l+0x454>
 8005238:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800523c:	e7e8      	b.n	8005210 <_strtod_l+0x898>
 800523e:	4613      	mov	r3, r2
 8005240:	e7e6      	b.n	8005210 <_strtod_l+0x898>
 8005242:	ea53 030a 	orrs.w	r3, r3, sl
 8005246:	d0a1      	beq.n	800518c <_strtod_l+0x814>
 8005248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800524a:	b1db      	cbz	r3, 8005284 <_strtod_l+0x90c>
 800524c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800524e:	4213      	tst	r3, r2
 8005250:	d0ee      	beq.n	8005230 <_strtod_l+0x8b8>
 8005252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005254:	9a08      	ldr	r2, [sp, #32]
 8005256:	4650      	mov	r0, sl
 8005258:	4659      	mov	r1, fp
 800525a:	b1bb      	cbz	r3, 800528c <_strtod_l+0x914>
 800525c:	f7ff fb6e 	bl	800493c <sulp>
 8005260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005264:	ec53 2b10 	vmov	r2, r3, d0
 8005268:	f7fb f830 	bl	80002cc <__adddf3>
 800526c:	4682      	mov	sl, r0
 800526e:	468b      	mov	fp, r1
 8005270:	e7de      	b.n	8005230 <_strtod_l+0x8b8>
 8005272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005276:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800527a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800527e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005282:	e7d5      	b.n	8005230 <_strtod_l+0x8b8>
 8005284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005286:	ea13 0f0a 	tst.w	r3, sl
 800528a:	e7e1      	b.n	8005250 <_strtod_l+0x8d8>
 800528c:	f7ff fb56 	bl	800493c <sulp>
 8005290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005294:	ec53 2b10 	vmov	r2, r3, d0
 8005298:	f7fb f816 	bl	80002c8 <__aeabi_dsub>
 800529c:	2200      	movs	r2, #0
 800529e:	2300      	movs	r3, #0
 80052a0:	4682      	mov	sl, r0
 80052a2:	468b      	mov	fp, r1
 80052a4:	f7fb fc30 	bl	8000b08 <__aeabi_dcmpeq>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d0c1      	beq.n	8005230 <_strtod_l+0x8b8>
 80052ac:	e619      	b.n	8004ee2 <_strtod_l+0x56a>
 80052ae:	4641      	mov	r1, r8
 80052b0:	4620      	mov	r0, r4
 80052b2:	f001 fb31 	bl	8006918 <__ratio>
 80052b6:	ec57 6b10 	vmov	r6, r7, d0
 80052ba:	2200      	movs	r2, #0
 80052bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80052c0:	4630      	mov	r0, r6
 80052c2:	4639      	mov	r1, r7
 80052c4:	f7fb fc34 	bl	8000b30 <__aeabi_dcmple>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d06f      	beq.n	80053ac <_strtod_l+0xa34>
 80052cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d17a      	bne.n	80053c8 <_strtod_l+0xa50>
 80052d2:	f1ba 0f00 	cmp.w	sl, #0
 80052d6:	d158      	bne.n	800538a <_strtod_l+0xa12>
 80052d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d15a      	bne.n	8005398 <_strtod_l+0xa20>
 80052e2:	4b64      	ldr	r3, [pc, #400]	@ (8005474 <_strtod_l+0xafc>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	4630      	mov	r0, r6
 80052e8:	4639      	mov	r1, r7
 80052ea:	f7fb fc17 	bl	8000b1c <__aeabi_dcmplt>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d159      	bne.n	80053a6 <_strtod_l+0xa2e>
 80052f2:	4630      	mov	r0, r6
 80052f4:	4639      	mov	r1, r7
 80052f6:	4b60      	ldr	r3, [pc, #384]	@ (8005478 <_strtod_l+0xb00>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	f7fb f99d 	bl	8000638 <__aeabi_dmul>
 80052fe:	4606      	mov	r6, r0
 8005300:	460f      	mov	r7, r1
 8005302:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005306:	9606      	str	r6, [sp, #24]
 8005308:	9307      	str	r3, [sp, #28]
 800530a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800530e:	4d57      	ldr	r5, [pc, #348]	@ (800546c <_strtod_l+0xaf4>)
 8005310:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005316:	401d      	ands	r5, r3
 8005318:	4b58      	ldr	r3, [pc, #352]	@ (800547c <_strtod_l+0xb04>)
 800531a:	429d      	cmp	r5, r3
 800531c:	f040 80b2 	bne.w	8005484 <_strtod_l+0xb0c>
 8005320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005322:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005326:	ec4b ab10 	vmov	d0, sl, fp
 800532a:	f001 fa2d 	bl	8006788 <__ulp>
 800532e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005332:	ec51 0b10 	vmov	r0, r1, d0
 8005336:	f7fb f97f 	bl	8000638 <__aeabi_dmul>
 800533a:	4652      	mov	r2, sl
 800533c:	465b      	mov	r3, fp
 800533e:	f7fa ffc5 	bl	80002cc <__adddf3>
 8005342:	460b      	mov	r3, r1
 8005344:	4949      	ldr	r1, [pc, #292]	@ (800546c <_strtod_l+0xaf4>)
 8005346:	4a4e      	ldr	r2, [pc, #312]	@ (8005480 <_strtod_l+0xb08>)
 8005348:	4019      	ands	r1, r3
 800534a:	4291      	cmp	r1, r2
 800534c:	4682      	mov	sl, r0
 800534e:	d942      	bls.n	80053d6 <_strtod_l+0xa5e>
 8005350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005352:	4b47      	ldr	r3, [pc, #284]	@ (8005470 <_strtod_l+0xaf8>)
 8005354:	429a      	cmp	r2, r3
 8005356:	d103      	bne.n	8005360 <_strtod_l+0x9e8>
 8005358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800535a:	3301      	adds	r3, #1
 800535c:	f43f ad2b 	beq.w	8004db6 <_strtod_l+0x43e>
 8005360:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005470 <_strtod_l+0xaf8>
 8005364:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800536a:	9805      	ldr	r0, [sp, #20]
 800536c:	f000 fed8 	bl	8006120 <_Bfree>
 8005370:	9805      	ldr	r0, [sp, #20]
 8005372:	4649      	mov	r1, r9
 8005374:	f000 fed4 	bl	8006120 <_Bfree>
 8005378:	9805      	ldr	r0, [sp, #20]
 800537a:	4641      	mov	r1, r8
 800537c:	f000 fed0 	bl	8006120 <_Bfree>
 8005380:	9805      	ldr	r0, [sp, #20]
 8005382:	4621      	mov	r1, r4
 8005384:	f000 fecc 	bl	8006120 <_Bfree>
 8005388:	e618      	b.n	8004fbc <_strtod_l+0x644>
 800538a:	f1ba 0f01 	cmp.w	sl, #1
 800538e:	d103      	bne.n	8005398 <_strtod_l+0xa20>
 8005390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005392:	2b00      	cmp	r3, #0
 8005394:	f43f ada5 	beq.w	8004ee2 <_strtod_l+0x56a>
 8005398:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005448 <_strtod_l+0xad0>
 800539c:	4f35      	ldr	r7, [pc, #212]	@ (8005474 <_strtod_l+0xafc>)
 800539e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80053a2:	2600      	movs	r6, #0
 80053a4:	e7b1      	b.n	800530a <_strtod_l+0x992>
 80053a6:	4f34      	ldr	r7, [pc, #208]	@ (8005478 <_strtod_l+0xb00>)
 80053a8:	2600      	movs	r6, #0
 80053aa:	e7aa      	b.n	8005302 <_strtod_l+0x98a>
 80053ac:	4b32      	ldr	r3, [pc, #200]	@ (8005478 <_strtod_l+0xb00>)
 80053ae:	4630      	mov	r0, r6
 80053b0:	4639      	mov	r1, r7
 80053b2:	2200      	movs	r2, #0
 80053b4:	f7fb f940 	bl	8000638 <__aeabi_dmul>
 80053b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053ba:	4606      	mov	r6, r0
 80053bc:	460f      	mov	r7, r1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d09f      	beq.n	8005302 <_strtod_l+0x98a>
 80053c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80053c6:	e7a0      	b.n	800530a <_strtod_l+0x992>
 80053c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005450 <_strtod_l+0xad8>
 80053cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80053d0:	ec57 6b17 	vmov	r6, r7, d7
 80053d4:	e799      	b.n	800530a <_strtod_l+0x992>
 80053d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80053da:	9b08      	ldr	r3, [sp, #32]
 80053dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1c1      	bne.n	8005368 <_strtod_l+0x9f0>
 80053e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80053e8:	0d1b      	lsrs	r3, r3, #20
 80053ea:	051b      	lsls	r3, r3, #20
 80053ec:	429d      	cmp	r5, r3
 80053ee:	d1bb      	bne.n	8005368 <_strtod_l+0x9f0>
 80053f0:	4630      	mov	r0, r6
 80053f2:	4639      	mov	r1, r7
 80053f4:	f7fb fc42 	bl	8000c7c <__aeabi_d2lz>
 80053f8:	f7fb f8f0 	bl	80005dc <__aeabi_l2d>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	f7fa ff60 	bl	80002c8 <__aeabi_dsub>
 8005408:	460b      	mov	r3, r1
 800540a:	4602      	mov	r2, r0
 800540c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005410:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005416:	ea46 060a 	orr.w	r6, r6, sl
 800541a:	431e      	orrs	r6, r3
 800541c:	d06f      	beq.n	80054fe <_strtod_l+0xb86>
 800541e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005458 <_strtod_l+0xae0>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f7fb fb7a 	bl	8000b1c <__aeabi_dcmplt>
 8005428:	2800      	cmp	r0, #0
 800542a:	f47f accf 	bne.w	8004dcc <_strtod_l+0x454>
 800542e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005460 <_strtod_l+0xae8>)
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005438:	f7fb fb8e 	bl	8000b58 <__aeabi_dcmpgt>
 800543c:	2800      	cmp	r0, #0
 800543e:	d093      	beq.n	8005368 <_strtod_l+0x9f0>
 8005440:	e4c4      	b.n	8004dcc <_strtod_l+0x454>
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	00000000 	.word	0x00000000
 800544c:	bff00000 	.word	0xbff00000
 8005450:	00000000 	.word	0x00000000
 8005454:	3ff00000 	.word	0x3ff00000
 8005458:	94a03595 	.word	0x94a03595
 800545c:	3fdfffff 	.word	0x3fdfffff
 8005460:	35afe535 	.word	0x35afe535
 8005464:	3fe00000 	.word	0x3fe00000
 8005468:	000fffff 	.word	0x000fffff
 800546c:	7ff00000 	.word	0x7ff00000
 8005470:	7fefffff 	.word	0x7fefffff
 8005474:	3ff00000 	.word	0x3ff00000
 8005478:	3fe00000 	.word	0x3fe00000
 800547c:	7fe00000 	.word	0x7fe00000
 8005480:	7c9fffff 	.word	0x7c9fffff
 8005484:	9b08      	ldr	r3, [sp, #32]
 8005486:	b323      	cbz	r3, 80054d2 <_strtod_l+0xb5a>
 8005488:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800548c:	d821      	bhi.n	80054d2 <_strtod_l+0xb5a>
 800548e:	a328      	add	r3, pc, #160	@ (adr r3, 8005530 <_strtod_l+0xbb8>)
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	4630      	mov	r0, r6
 8005496:	4639      	mov	r1, r7
 8005498:	f7fb fb4a 	bl	8000b30 <__aeabi_dcmple>
 800549c:	b1a0      	cbz	r0, 80054c8 <_strtod_l+0xb50>
 800549e:	4639      	mov	r1, r7
 80054a0:	4630      	mov	r0, r6
 80054a2:	f7fb fb63 	bl	8000b6c <__aeabi_d2uiz>
 80054a6:	2801      	cmp	r0, #1
 80054a8:	bf38      	it	cc
 80054aa:	2001      	movcc	r0, #1
 80054ac:	f7fb f84a 	bl	8000544 <__aeabi_ui2d>
 80054b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054b2:	4606      	mov	r6, r0
 80054b4:	460f      	mov	r7, r1
 80054b6:	b9fb      	cbnz	r3, 80054f8 <_strtod_l+0xb80>
 80054b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80054bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80054be:	9315      	str	r3, [sp, #84]	@ 0x54
 80054c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80054c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80054c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80054ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80054ce:	1b5b      	subs	r3, r3, r5
 80054d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80054d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80054d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80054da:	f001 f955 	bl	8006788 <__ulp>
 80054de:	4650      	mov	r0, sl
 80054e0:	ec53 2b10 	vmov	r2, r3, d0
 80054e4:	4659      	mov	r1, fp
 80054e6:	f7fb f8a7 	bl	8000638 <__aeabi_dmul>
 80054ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80054ee:	f7fa feed 	bl	80002cc <__adddf3>
 80054f2:	4682      	mov	sl, r0
 80054f4:	468b      	mov	fp, r1
 80054f6:	e770      	b.n	80053da <_strtod_l+0xa62>
 80054f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80054fc:	e7e0      	b.n	80054c0 <_strtod_l+0xb48>
 80054fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8005538 <_strtod_l+0xbc0>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f7fb fb0a 	bl	8000b1c <__aeabi_dcmplt>
 8005508:	e798      	b.n	800543c <_strtod_l+0xac4>
 800550a:	2300      	movs	r3, #0
 800550c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800550e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	f7ff ba6d 	b.w	80049f2 <_strtod_l+0x7a>
 8005518:	2a65      	cmp	r2, #101	@ 0x65
 800551a:	f43f ab66 	beq.w	8004bea <_strtod_l+0x272>
 800551e:	2a45      	cmp	r2, #69	@ 0x45
 8005520:	f43f ab63 	beq.w	8004bea <_strtod_l+0x272>
 8005524:	2301      	movs	r3, #1
 8005526:	f7ff bb9e 	b.w	8004c66 <_strtod_l+0x2ee>
 800552a:	bf00      	nop
 800552c:	f3af 8000 	nop.w
 8005530:	ffc00000 	.word	0xffc00000
 8005534:	41dfffff 	.word	0x41dfffff
 8005538:	94a03595 	.word	0x94a03595
 800553c:	3fcfffff 	.word	0x3fcfffff

08005540 <strtod>:
 8005540:	460a      	mov	r2, r1
 8005542:	4601      	mov	r1, r0
 8005544:	4802      	ldr	r0, [pc, #8]	@ (8005550 <strtod+0x10>)
 8005546:	4b03      	ldr	r3, [pc, #12]	@ (8005554 <strtod+0x14>)
 8005548:	6800      	ldr	r0, [r0, #0]
 800554a:	f7ff ba15 	b.w	8004978 <_strtod_l>
 800554e:	bf00      	nop
 8005550:	2000018c 	.word	0x2000018c
 8005554:	20000020 	.word	0x20000020

08005558 <_fwalk_sglue>:
 8005558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800555c:	4607      	mov	r7, r0
 800555e:	4688      	mov	r8, r1
 8005560:	4614      	mov	r4, r2
 8005562:	2600      	movs	r6, #0
 8005564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005568:	f1b9 0901 	subs.w	r9, r9, #1
 800556c:	d505      	bpl.n	800557a <_fwalk_sglue+0x22>
 800556e:	6824      	ldr	r4, [r4, #0]
 8005570:	2c00      	cmp	r4, #0
 8005572:	d1f7      	bne.n	8005564 <_fwalk_sglue+0xc>
 8005574:	4630      	mov	r0, r6
 8005576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557a:	89ab      	ldrh	r3, [r5, #12]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d907      	bls.n	8005590 <_fwalk_sglue+0x38>
 8005580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005584:	3301      	adds	r3, #1
 8005586:	d003      	beq.n	8005590 <_fwalk_sglue+0x38>
 8005588:	4629      	mov	r1, r5
 800558a:	4638      	mov	r0, r7
 800558c:	47c0      	blx	r8
 800558e:	4306      	orrs	r6, r0
 8005590:	3568      	adds	r5, #104	@ 0x68
 8005592:	e7e9      	b.n	8005568 <_fwalk_sglue+0x10>

08005594 <strncmp>:
 8005594:	b510      	push	{r4, lr}
 8005596:	b16a      	cbz	r2, 80055b4 <strncmp+0x20>
 8005598:	3901      	subs	r1, #1
 800559a:	1884      	adds	r4, r0, r2
 800559c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d103      	bne.n	80055b0 <strncmp+0x1c>
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d001      	beq.n	80055b0 <strncmp+0x1c>
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	d1f5      	bne.n	800559c <strncmp+0x8>
 80055b0:	1ad0      	subs	r0, r2, r3
 80055b2:	bd10      	pop	{r4, pc}
 80055b4:	4610      	mov	r0, r2
 80055b6:	e7fc      	b.n	80055b2 <strncmp+0x1e>

080055b8 <strtok>:
 80055b8:	4b16      	ldr	r3, [pc, #88]	@ (8005614 <strtok+0x5c>)
 80055ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055be:	681f      	ldr	r7, [r3, #0]
 80055c0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80055c2:	4605      	mov	r5, r0
 80055c4:	460e      	mov	r6, r1
 80055c6:	b9ec      	cbnz	r4, 8005604 <strtok+0x4c>
 80055c8:	2050      	movs	r0, #80	@ 0x50
 80055ca:	f000 fbf5 	bl	8005db8 <malloc>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6478      	str	r0, [r7, #68]	@ 0x44
 80055d2:	b920      	cbnz	r0, 80055de <strtok+0x26>
 80055d4:	4b10      	ldr	r3, [pc, #64]	@ (8005618 <strtok+0x60>)
 80055d6:	4811      	ldr	r0, [pc, #68]	@ (800561c <strtok+0x64>)
 80055d8:	215b      	movs	r1, #91	@ 0x5b
 80055da:	f000 f895 	bl	8005708 <__assert_func>
 80055de:	e9c0 4400 	strd	r4, r4, [r0]
 80055e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80055e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80055ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80055ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80055f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80055f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80055fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80055fe:	6184      	str	r4, [r0, #24]
 8005600:	7704      	strb	r4, [r0, #28]
 8005602:	6244      	str	r4, [r0, #36]	@ 0x24
 8005604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	2301      	movs	r3, #1
 800560c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005610:	f000 b806 	b.w	8005620 <__strtok_r>
 8005614:	2000018c 	.word	0x2000018c
 8005618:	08007548 	.word	0x08007548
 800561c:	0800755f 	.word	0x0800755f

08005620 <__strtok_r>:
 8005620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	b908      	cbnz	r0, 800562a <__strtok_r+0xa>
 8005626:	6814      	ldr	r4, [r2, #0]
 8005628:	b144      	cbz	r4, 800563c <__strtok_r+0x1c>
 800562a:	4620      	mov	r0, r4
 800562c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005630:	460f      	mov	r7, r1
 8005632:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005636:	b91e      	cbnz	r6, 8005640 <__strtok_r+0x20>
 8005638:	b965      	cbnz	r5, 8005654 <__strtok_r+0x34>
 800563a:	6015      	str	r5, [r2, #0]
 800563c:	2000      	movs	r0, #0
 800563e:	e005      	b.n	800564c <__strtok_r+0x2c>
 8005640:	42b5      	cmp	r5, r6
 8005642:	d1f6      	bne.n	8005632 <__strtok_r+0x12>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f0      	bne.n	800562a <__strtok_r+0xa>
 8005648:	6014      	str	r4, [r2, #0]
 800564a:	7003      	strb	r3, [r0, #0]
 800564c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564e:	461c      	mov	r4, r3
 8005650:	e00c      	b.n	800566c <__strtok_r+0x4c>
 8005652:	b915      	cbnz	r5, 800565a <__strtok_r+0x3a>
 8005654:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005658:	460e      	mov	r6, r1
 800565a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800565e:	42ab      	cmp	r3, r5
 8005660:	d1f7      	bne.n	8005652 <__strtok_r+0x32>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f3      	beq.n	800564e <__strtok_r+0x2e>
 8005666:	2300      	movs	r3, #0
 8005668:	f804 3c01 	strb.w	r3, [r4, #-1]
 800566c:	6014      	str	r4, [r2, #0]
 800566e:	e7ed      	b.n	800564c <__strtok_r+0x2c>

08005670 <memset>:
 8005670:	4402      	add	r2, r0
 8005672:	4603      	mov	r3, r0
 8005674:	4293      	cmp	r3, r2
 8005676:	d100      	bne.n	800567a <memset+0xa>
 8005678:	4770      	bx	lr
 800567a:	f803 1b01 	strb.w	r1, [r3], #1
 800567e:	e7f9      	b.n	8005674 <memset+0x4>

08005680 <__errno>:
 8005680:	4b01      	ldr	r3, [pc, #4]	@ (8005688 <__errno+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	2000018c 	.word	0x2000018c

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4d0d      	ldr	r5, [pc, #52]	@ (80056c4 <__libc_init_array+0x38>)
 8005690:	4c0d      	ldr	r4, [pc, #52]	@ (80056c8 <__libc_init_array+0x3c>)
 8005692:	1b64      	subs	r4, r4, r5
 8005694:	10a4      	asrs	r4, r4, #2
 8005696:	2600      	movs	r6, #0
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	4d0b      	ldr	r5, [pc, #44]	@ (80056cc <__libc_init_array+0x40>)
 800569e:	4c0c      	ldr	r4, [pc, #48]	@ (80056d0 <__libc_init_array+0x44>)
 80056a0:	f001 fefc 	bl	800749c <_init>
 80056a4:	1b64      	subs	r4, r4, r5
 80056a6:	10a4      	asrs	r4, r4, #2
 80056a8:	2600      	movs	r6, #0
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	08007904 	.word	0x08007904
 80056c8:	08007904 	.word	0x08007904
 80056cc:	08007904 	.word	0x08007904
 80056d0:	08007908 	.word	0x08007908

080056d4 <__retarget_lock_init_recursive>:
 80056d4:	4770      	bx	lr

080056d6 <__retarget_lock_acquire_recursive>:
 80056d6:	4770      	bx	lr

080056d8 <__retarget_lock_release_recursive>:
 80056d8:	4770      	bx	lr

080056da <memcpy>:
 80056da:	440a      	add	r2, r1
 80056dc:	4291      	cmp	r1, r2
 80056de:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80056e2:	d100      	bne.n	80056e6 <memcpy+0xc>
 80056e4:	4770      	bx	lr
 80056e6:	b510      	push	{r4, lr}
 80056e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056f0:	4291      	cmp	r1, r2
 80056f2:	d1f9      	bne.n	80056e8 <memcpy+0xe>
 80056f4:	bd10      	pop	{r4, pc}
	...

080056f8 <nan>:
 80056f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005700 <nan+0x8>
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	00000000 	.word	0x00000000
 8005704:	7ff80000 	.word	0x7ff80000

08005708 <__assert_func>:
 8005708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800570a:	4614      	mov	r4, r2
 800570c:	461a      	mov	r2, r3
 800570e:	4b09      	ldr	r3, [pc, #36]	@ (8005734 <__assert_func+0x2c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4605      	mov	r5, r0
 8005714:	68d8      	ldr	r0, [r3, #12]
 8005716:	b954      	cbnz	r4, 800572e <__assert_func+0x26>
 8005718:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <__assert_func+0x30>)
 800571a:	461c      	mov	r4, r3
 800571c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005720:	9100      	str	r1, [sp, #0]
 8005722:	462b      	mov	r3, r5
 8005724:	4905      	ldr	r1, [pc, #20]	@ (800573c <__assert_func+0x34>)
 8005726:	f001 f9b1 	bl	8006a8c <fiprintf>
 800572a:	f001 fa25 	bl	8006b78 <abort>
 800572e:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <__assert_func+0x38>)
 8005730:	e7f4      	b.n	800571c <__assert_func+0x14>
 8005732:	bf00      	nop
 8005734:	2000018c 	.word	0x2000018c
 8005738:	080076fd 	.word	0x080076fd
 800573c:	080076cf 	.word	0x080076cf
 8005740:	080076c2 	.word	0x080076c2

08005744 <rshift>:
 8005744:	6903      	ldr	r3, [r0, #16]
 8005746:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800574a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800574e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005752:	f100 0414 	add.w	r4, r0, #20
 8005756:	dd45      	ble.n	80057e4 <rshift+0xa0>
 8005758:	f011 011f 	ands.w	r1, r1, #31
 800575c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005760:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005764:	d10c      	bne.n	8005780 <rshift+0x3c>
 8005766:	f100 0710 	add.w	r7, r0, #16
 800576a:	4629      	mov	r1, r5
 800576c:	42b1      	cmp	r1, r6
 800576e:	d334      	bcc.n	80057da <rshift+0x96>
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	1eea      	subs	r2, r5, #3
 8005776:	4296      	cmp	r6, r2
 8005778:	bf38      	it	cc
 800577a:	2300      	movcc	r3, #0
 800577c:	4423      	add	r3, r4
 800577e:	e015      	b.n	80057ac <rshift+0x68>
 8005780:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005784:	f1c1 0820 	rsb	r8, r1, #32
 8005788:	40cf      	lsrs	r7, r1
 800578a:	f105 0e04 	add.w	lr, r5, #4
 800578e:	46a1      	mov	r9, r4
 8005790:	4576      	cmp	r6, lr
 8005792:	46f4      	mov	ip, lr
 8005794:	d815      	bhi.n	80057c2 <rshift+0x7e>
 8005796:	1a9a      	subs	r2, r3, r2
 8005798:	0092      	lsls	r2, r2, #2
 800579a:	3a04      	subs	r2, #4
 800579c:	3501      	adds	r5, #1
 800579e:	42ae      	cmp	r6, r5
 80057a0:	bf38      	it	cc
 80057a2:	2200      	movcc	r2, #0
 80057a4:	18a3      	adds	r3, r4, r2
 80057a6:	50a7      	str	r7, [r4, r2]
 80057a8:	b107      	cbz	r7, 80057ac <rshift+0x68>
 80057aa:	3304      	adds	r3, #4
 80057ac:	1b1a      	subs	r2, r3, r4
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80057b4:	bf08      	it	eq
 80057b6:	2300      	moveq	r3, #0
 80057b8:	6102      	str	r2, [r0, #16]
 80057ba:	bf08      	it	eq
 80057bc:	6143      	streq	r3, [r0, #20]
 80057be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057c2:	f8dc c000 	ldr.w	ip, [ip]
 80057c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80057ca:	ea4c 0707 	orr.w	r7, ip, r7
 80057ce:	f849 7b04 	str.w	r7, [r9], #4
 80057d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057d6:	40cf      	lsrs	r7, r1
 80057d8:	e7da      	b.n	8005790 <rshift+0x4c>
 80057da:	f851 cb04 	ldr.w	ip, [r1], #4
 80057de:	f847 cf04 	str.w	ip, [r7, #4]!
 80057e2:	e7c3      	b.n	800576c <rshift+0x28>
 80057e4:	4623      	mov	r3, r4
 80057e6:	e7e1      	b.n	80057ac <rshift+0x68>

080057e8 <__hexdig_fun>:
 80057e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80057ec:	2b09      	cmp	r3, #9
 80057ee:	d802      	bhi.n	80057f6 <__hexdig_fun+0xe>
 80057f0:	3820      	subs	r0, #32
 80057f2:	b2c0      	uxtb	r0, r0
 80057f4:	4770      	bx	lr
 80057f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d801      	bhi.n	8005802 <__hexdig_fun+0x1a>
 80057fe:	3847      	subs	r0, #71	@ 0x47
 8005800:	e7f7      	b.n	80057f2 <__hexdig_fun+0xa>
 8005802:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005806:	2b05      	cmp	r3, #5
 8005808:	d801      	bhi.n	800580e <__hexdig_fun+0x26>
 800580a:	3827      	subs	r0, #39	@ 0x27
 800580c:	e7f1      	b.n	80057f2 <__hexdig_fun+0xa>
 800580e:	2000      	movs	r0, #0
 8005810:	4770      	bx	lr
	...

08005814 <__gethex>:
 8005814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	b085      	sub	sp, #20
 800581a:	468a      	mov	sl, r1
 800581c:	9302      	str	r3, [sp, #8]
 800581e:	680b      	ldr	r3, [r1, #0]
 8005820:	9001      	str	r0, [sp, #4]
 8005822:	4690      	mov	r8, r2
 8005824:	1c9c      	adds	r4, r3, #2
 8005826:	46a1      	mov	r9, r4
 8005828:	f814 0b01 	ldrb.w	r0, [r4], #1
 800582c:	2830      	cmp	r0, #48	@ 0x30
 800582e:	d0fa      	beq.n	8005826 <__gethex+0x12>
 8005830:	eba9 0303 	sub.w	r3, r9, r3
 8005834:	f1a3 0b02 	sub.w	fp, r3, #2
 8005838:	f7ff ffd6 	bl	80057e8 <__hexdig_fun>
 800583c:	4605      	mov	r5, r0
 800583e:	2800      	cmp	r0, #0
 8005840:	d168      	bne.n	8005914 <__gethex+0x100>
 8005842:	49a0      	ldr	r1, [pc, #640]	@ (8005ac4 <__gethex+0x2b0>)
 8005844:	2201      	movs	r2, #1
 8005846:	4648      	mov	r0, r9
 8005848:	f7ff fea4 	bl	8005594 <strncmp>
 800584c:	4607      	mov	r7, r0
 800584e:	2800      	cmp	r0, #0
 8005850:	d167      	bne.n	8005922 <__gethex+0x10e>
 8005852:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005856:	4626      	mov	r6, r4
 8005858:	f7ff ffc6 	bl	80057e8 <__hexdig_fun>
 800585c:	2800      	cmp	r0, #0
 800585e:	d062      	beq.n	8005926 <__gethex+0x112>
 8005860:	4623      	mov	r3, r4
 8005862:	7818      	ldrb	r0, [r3, #0]
 8005864:	2830      	cmp	r0, #48	@ 0x30
 8005866:	4699      	mov	r9, r3
 8005868:	f103 0301 	add.w	r3, r3, #1
 800586c:	d0f9      	beq.n	8005862 <__gethex+0x4e>
 800586e:	f7ff ffbb 	bl	80057e8 <__hexdig_fun>
 8005872:	fab0 f580 	clz	r5, r0
 8005876:	096d      	lsrs	r5, r5, #5
 8005878:	f04f 0b01 	mov.w	fp, #1
 800587c:	464a      	mov	r2, r9
 800587e:	4616      	mov	r6, r2
 8005880:	3201      	adds	r2, #1
 8005882:	7830      	ldrb	r0, [r6, #0]
 8005884:	f7ff ffb0 	bl	80057e8 <__hexdig_fun>
 8005888:	2800      	cmp	r0, #0
 800588a:	d1f8      	bne.n	800587e <__gethex+0x6a>
 800588c:	498d      	ldr	r1, [pc, #564]	@ (8005ac4 <__gethex+0x2b0>)
 800588e:	2201      	movs	r2, #1
 8005890:	4630      	mov	r0, r6
 8005892:	f7ff fe7f 	bl	8005594 <strncmp>
 8005896:	2800      	cmp	r0, #0
 8005898:	d13f      	bne.n	800591a <__gethex+0x106>
 800589a:	b944      	cbnz	r4, 80058ae <__gethex+0x9a>
 800589c:	1c74      	adds	r4, r6, #1
 800589e:	4622      	mov	r2, r4
 80058a0:	4616      	mov	r6, r2
 80058a2:	3201      	adds	r2, #1
 80058a4:	7830      	ldrb	r0, [r6, #0]
 80058a6:	f7ff ff9f 	bl	80057e8 <__hexdig_fun>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d1f8      	bne.n	80058a0 <__gethex+0x8c>
 80058ae:	1ba4      	subs	r4, r4, r6
 80058b0:	00a7      	lsls	r7, r4, #2
 80058b2:	7833      	ldrb	r3, [r6, #0]
 80058b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80058b8:	2b50      	cmp	r3, #80	@ 0x50
 80058ba:	d13e      	bne.n	800593a <__gethex+0x126>
 80058bc:	7873      	ldrb	r3, [r6, #1]
 80058be:	2b2b      	cmp	r3, #43	@ 0x2b
 80058c0:	d033      	beq.n	800592a <__gethex+0x116>
 80058c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80058c4:	d034      	beq.n	8005930 <__gethex+0x11c>
 80058c6:	1c71      	adds	r1, r6, #1
 80058c8:	2400      	movs	r4, #0
 80058ca:	7808      	ldrb	r0, [r1, #0]
 80058cc:	f7ff ff8c 	bl	80057e8 <__hexdig_fun>
 80058d0:	1e43      	subs	r3, r0, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b18      	cmp	r3, #24
 80058d6:	d830      	bhi.n	800593a <__gethex+0x126>
 80058d8:	f1a0 0210 	sub.w	r2, r0, #16
 80058dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80058e0:	f7ff ff82 	bl	80057e8 <__hexdig_fun>
 80058e4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80058e8:	fa5f fc8c 	uxtb.w	ip, ip
 80058ec:	f1bc 0f18 	cmp.w	ip, #24
 80058f0:	f04f 030a 	mov.w	r3, #10
 80058f4:	d91e      	bls.n	8005934 <__gethex+0x120>
 80058f6:	b104      	cbz	r4, 80058fa <__gethex+0xe6>
 80058f8:	4252      	negs	r2, r2
 80058fa:	4417      	add	r7, r2
 80058fc:	f8ca 1000 	str.w	r1, [sl]
 8005900:	b1ed      	cbz	r5, 800593e <__gethex+0x12a>
 8005902:	f1bb 0f00 	cmp.w	fp, #0
 8005906:	bf0c      	ite	eq
 8005908:	2506      	moveq	r5, #6
 800590a:	2500      	movne	r5, #0
 800590c:	4628      	mov	r0, r5
 800590e:	b005      	add	sp, #20
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	2500      	movs	r5, #0
 8005916:	462c      	mov	r4, r5
 8005918:	e7b0      	b.n	800587c <__gethex+0x68>
 800591a:	2c00      	cmp	r4, #0
 800591c:	d1c7      	bne.n	80058ae <__gethex+0x9a>
 800591e:	4627      	mov	r7, r4
 8005920:	e7c7      	b.n	80058b2 <__gethex+0x9e>
 8005922:	464e      	mov	r6, r9
 8005924:	462f      	mov	r7, r5
 8005926:	2501      	movs	r5, #1
 8005928:	e7c3      	b.n	80058b2 <__gethex+0x9e>
 800592a:	2400      	movs	r4, #0
 800592c:	1cb1      	adds	r1, r6, #2
 800592e:	e7cc      	b.n	80058ca <__gethex+0xb6>
 8005930:	2401      	movs	r4, #1
 8005932:	e7fb      	b.n	800592c <__gethex+0x118>
 8005934:	fb03 0002 	mla	r0, r3, r2, r0
 8005938:	e7ce      	b.n	80058d8 <__gethex+0xc4>
 800593a:	4631      	mov	r1, r6
 800593c:	e7de      	b.n	80058fc <__gethex+0xe8>
 800593e:	eba6 0309 	sub.w	r3, r6, r9
 8005942:	3b01      	subs	r3, #1
 8005944:	4629      	mov	r1, r5
 8005946:	2b07      	cmp	r3, #7
 8005948:	dc0a      	bgt.n	8005960 <__gethex+0x14c>
 800594a:	9801      	ldr	r0, [sp, #4]
 800594c:	f000 fba8 	bl	80060a0 <_Balloc>
 8005950:	4604      	mov	r4, r0
 8005952:	b940      	cbnz	r0, 8005966 <__gethex+0x152>
 8005954:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac8 <__gethex+0x2b4>)
 8005956:	4602      	mov	r2, r0
 8005958:	21e4      	movs	r1, #228	@ 0xe4
 800595a:	485c      	ldr	r0, [pc, #368]	@ (8005acc <__gethex+0x2b8>)
 800595c:	f7ff fed4 	bl	8005708 <__assert_func>
 8005960:	3101      	adds	r1, #1
 8005962:	105b      	asrs	r3, r3, #1
 8005964:	e7ef      	b.n	8005946 <__gethex+0x132>
 8005966:	f100 0a14 	add.w	sl, r0, #20
 800596a:	2300      	movs	r3, #0
 800596c:	4655      	mov	r5, sl
 800596e:	469b      	mov	fp, r3
 8005970:	45b1      	cmp	r9, r6
 8005972:	d337      	bcc.n	80059e4 <__gethex+0x1d0>
 8005974:	f845 bb04 	str.w	fp, [r5], #4
 8005978:	eba5 050a 	sub.w	r5, r5, sl
 800597c:	10ad      	asrs	r5, r5, #2
 800597e:	6125      	str	r5, [r4, #16]
 8005980:	4658      	mov	r0, fp
 8005982:	f000 fc7f 	bl	8006284 <__hi0bits>
 8005986:	016d      	lsls	r5, r5, #5
 8005988:	f8d8 6000 	ldr.w	r6, [r8]
 800598c:	1a2d      	subs	r5, r5, r0
 800598e:	42b5      	cmp	r5, r6
 8005990:	dd54      	ble.n	8005a3c <__gethex+0x228>
 8005992:	1bad      	subs	r5, r5, r6
 8005994:	4629      	mov	r1, r5
 8005996:	4620      	mov	r0, r4
 8005998:	f001 f813 	bl	80069c2 <__any_on>
 800599c:	4681      	mov	r9, r0
 800599e:	b178      	cbz	r0, 80059c0 <__gethex+0x1ac>
 80059a0:	1e6b      	subs	r3, r5, #1
 80059a2:	1159      	asrs	r1, r3, #5
 80059a4:	f003 021f 	and.w	r2, r3, #31
 80059a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80059ac:	f04f 0901 	mov.w	r9, #1
 80059b0:	fa09 f202 	lsl.w	r2, r9, r2
 80059b4:	420a      	tst	r2, r1
 80059b6:	d003      	beq.n	80059c0 <__gethex+0x1ac>
 80059b8:	454b      	cmp	r3, r9
 80059ba:	dc36      	bgt.n	8005a2a <__gethex+0x216>
 80059bc:	f04f 0902 	mov.w	r9, #2
 80059c0:	4629      	mov	r1, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff febe 	bl	8005744 <rshift>
 80059c8:	442f      	add	r7, r5
 80059ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80059ce:	42bb      	cmp	r3, r7
 80059d0:	da42      	bge.n	8005a58 <__gethex+0x244>
 80059d2:	9801      	ldr	r0, [sp, #4]
 80059d4:	4621      	mov	r1, r4
 80059d6:	f000 fba3 	bl	8006120 <_Bfree>
 80059da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059dc:	2300      	movs	r3, #0
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	25a3      	movs	r5, #163	@ 0xa3
 80059e2:	e793      	b.n	800590c <__gethex+0xf8>
 80059e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80059e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80059ea:	d012      	beq.n	8005a12 <__gethex+0x1fe>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d104      	bne.n	80059fa <__gethex+0x1e6>
 80059f0:	f845 bb04 	str.w	fp, [r5], #4
 80059f4:	f04f 0b00 	mov.w	fp, #0
 80059f8:	465b      	mov	r3, fp
 80059fa:	7830      	ldrb	r0, [r6, #0]
 80059fc:	9303      	str	r3, [sp, #12]
 80059fe:	f7ff fef3 	bl	80057e8 <__hexdig_fun>
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	f000 000f 	and.w	r0, r0, #15
 8005a08:	4098      	lsls	r0, r3
 8005a0a:	ea4b 0b00 	orr.w	fp, fp, r0
 8005a0e:	3304      	adds	r3, #4
 8005a10:	e7ae      	b.n	8005970 <__gethex+0x15c>
 8005a12:	45b1      	cmp	r9, r6
 8005a14:	d8ea      	bhi.n	80059ec <__gethex+0x1d8>
 8005a16:	492b      	ldr	r1, [pc, #172]	@ (8005ac4 <__gethex+0x2b0>)
 8005a18:	9303      	str	r3, [sp, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7ff fdb9 	bl	8005594 <strncmp>
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d1e1      	bne.n	80059ec <__gethex+0x1d8>
 8005a28:	e7a2      	b.n	8005970 <__gethex+0x15c>
 8005a2a:	1ea9      	subs	r1, r5, #2
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 ffc8 	bl	80069c2 <__any_on>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d0c2      	beq.n	80059bc <__gethex+0x1a8>
 8005a36:	f04f 0903 	mov.w	r9, #3
 8005a3a:	e7c1      	b.n	80059c0 <__gethex+0x1ac>
 8005a3c:	da09      	bge.n	8005a52 <__gethex+0x23e>
 8005a3e:	1b75      	subs	r5, r6, r5
 8005a40:	4621      	mov	r1, r4
 8005a42:	9801      	ldr	r0, [sp, #4]
 8005a44:	462a      	mov	r2, r5
 8005a46:	f000 fd83 	bl	8006550 <__lshift>
 8005a4a:	1b7f      	subs	r7, r7, r5
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	f100 0a14 	add.w	sl, r0, #20
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	e7b8      	b.n	80059ca <__gethex+0x1b6>
 8005a58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005a5c:	42bd      	cmp	r5, r7
 8005a5e:	dd6f      	ble.n	8005b40 <__gethex+0x32c>
 8005a60:	1bed      	subs	r5, r5, r7
 8005a62:	42ae      	cmp	r6, r5
 8005a64:	dc34      	bgt.n	8005ad0 <__gethex+0x2bc>
 8005a66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d022      	beq.n	8005ab4 <__gethex+0x2a0>
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d024      	beq.n	8005abc <__gethex+0x2a8>
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d115      	bne.n	8005aa2 <__gethex+0x28e>
 8005a76:	42ae      	cmp	r6, r5
 8005a78:	d113      	bne.n	8005aa2 <__gethex+0x28e>
 8005a7a:	2e01      	cmp	r6, #1
 8005a7c:	d10b      	bne.n	8005a96 <__gethex+0x282>
 8005a7e:	9a02      	ldr	r2, [sp, #8]
 8005a80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	2301      	movs	r3, #1
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	f8ca 3000 	str.w	r3, [sl]
 8005a8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a90:	2562      	movs	r5, #98	@ 0x62
 8005a92:	601c      	str	r4, [r3, #0]
 8005a94:	e73a      	b.n	800590c <__gethex+0xf8>
 8005a96:	1e71      	subs	r1, r6, #1
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 ff92 	bl	80069c2 <__any_on>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d1ed      	bne.n	8005a7e <__gethex+0x26a>
 8005aa2:	9801      	ldr	r0, [sp, #4]
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	f000 fb3b 	bl	8006120 <_Bfree>
 8005aaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aac:	2300      	movs	r3, #0
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	2550      	movs	r5, #80	@ 0x50
 8005ab2:	e72b      	b.n	800590c <__gethex+0xf8>
 8005ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f3      	bne.n	8005aa2 <__gethex+0x28e>
 8005aba:	e7e0      	b.n	8005a7e <__gethex+0x26a>
 8005abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1dd      	bne.n	8005a7e <__gethex+0x26a>
 8005ac2:	e7ee      	b.n	8005aa2 <__gethex+0x28e>
 8005ac4:	080074e8 	.word	0x080074e8
 8005ac8:	080076fe 	.word	0x080076fe
 8005acc:	0800770f 	.word	0x0800770f
 8005ad0:	1e6f      	subs	r7, r5, #1
 8005ad2:	f1b9 0f00 	cmp.w	r9, #0
 8005ad6:	d130      	bne.n	8005b3a <__gethex+0x326>
 8005ad8:	b127      	cbz	r7, 8005ae4 <__gethex+0x2d0>
 8005ada:	4639      	mov	r1, r7
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 ff70 	bl	80069c2 <__any_on>
 8005ae2:	4681      	mov	r9, r0
 8005ae4:	117a      	asrs	r2, r7, #5
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005aec:	f007 071f 	and.w	r7, r7, #31
 8005af0:	40bb      	lsls	r3, r7
 8005af2:	4213      	tst	r3, r2
 8005af4:	4629      	mov	r1, r5
 8005af6:	4620      	mov	r0, r4
 8005af8:	bf18      	it	ne
 8005afa:	f049 0902 	orrne.w	r9, r9, #2
 8005afe:	f7ff fe21 	bl	8005744 <rshift>
 8005b02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005b06:	1b76      	subs	r6, r6, r5
 8005b08:	2502      	movs	r5, #2
 8005b0a:	f1b9 0f00 	cmp.w	r9, #0
 8005b0e:	d047      	beq.n	8005ba0 <__gethex+0x38c>
 8005b10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d015      	beq.n	8005b44 <__gethex+0x330>
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d017      	beq.n	8005b4c <__gethex+0x338>
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d109      	bne.n	8005b34 <__gethex+0x320>
 8005b20:	f019 0f02 	tst.w	r9, #2
 8005b24:	d006      	beq.n	8005b34 <__gethex+0x320>
 8005b26:	f8da 3000 	ldr.w	r3, [sl]
 8005b2a:	ea49 0903 	orr.w	r9, r9, r3
 8005b2e:	f019 0f01 	tst.w	r9, #1
 8005b32:	d10e      	bne.n	8005b52 <__gethex+0x33e>
 8005b34:	f045 0510 	orr.w	r5, r5, #16
 8005b38:	e032      	b.n	8005ba0 <__gethex+0x38c>
 8005b3a:	f04f 0901 	mov.w	r9, #1
 8005b3e:	e7d1      	b.n	8005ae4 <__gethex+0x2d0>
 8005b40:	2501      	movs	r5, #1
 8005b42:	e7e2      	b.n	8005b0a <__gethex+0x2f6>
 8005b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b46:	f1c3 0301 	rsb	r3, r3, #1
 8005b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <__gethex+0x320>
 8005b52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005b56:	f104 0314 	add.w	r3, r4, #20
 8005b5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005b5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005b62:	f04f 0c00 	mov.w	ip, #0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b6c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8005b70:	d01b      	beq.n	8005baa <__gethex+0x396>
 8005b72:	3201      	adds	r2, #1
 8005b74:	6002      	str	r2, [r0, #0]
 8005b76:	2d02      	cmp	r5, #2
 8005b78:	f104 0314 	add.w	r3, r4, #20
 8005b7c:	d13c      	bne.n	8005bf8 <__gethex+0x3e4>
 8005b7e:	f8d8 2000 	ldr.w	r2, [r8]
 8005b82:	3a01      	subs	r2, #1
 8005b84:	42b2      	cmp	r2, r6
 8005b86:	d109      	bne.n	8005b9c <__gethex+0x388>
 8005b88:	1171      	asrs	r1, r6, #5
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b90:	f006 061f 	and.w	r6, r6, #31
 8005b94:	fa02 f606 	lsl.w	r6, r2, r6
 8005b98:	421e      	tst	r6, r3
 8005b9a:	d13a      	bne.n	8005c12 <__gethex+0x3fe>
 8005b9c:	f045 0520 	orr.w	r5, r5, #32
 8005ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ba2:	601c      	str	r4, [r3, #0]
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	601f      	str	r7, [r3, #0]
 8005ba8:	e6b0      	b.n	800590c <__gethex+0xf8>
 8005baa:	4299      	cmp	r1, r3
 8005bac:	f843 cc04 	str.w	ip, [r3, #-4]
 8005bb0:	d8d9      	bhi.n	8005b66 <__gethex+0x352>
 8005bb2:	68a3      	ldr	r3, [r4, #8]
 8005bb4:	459b      	cmp	fp, r3
 8005bb6:	db17      	blt.n	8005be8 <__gethex+0x3d4>
 8005bb8:	6861      	ldr	r1, [r4, #4]
 8005bba:	9801      	ldr	r0, [sp, #4]
 8005bbc:	3101      	adds	r1, #1
 8005bbe:	f000 fa6f 	bl	80060a0 <_Balloc>
 8005bc2:	4681      	mov	r9, r0
 8005bc4:	b918      	cbnz	r0, 8005bce <__gethex+0x3ba>
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c30 <__gethex+0x41c>)
 8005bc8:	4602      	mov	r2, r0
 8005bca:	2184      	movs	r1, #132	@ 0x84
 8005bcc:	e6c5      	b.n	800595a <__gethex+0x146>
 8005bce:	6922      	ldr	r2, [r4, #16]
 8005bd0:	3202      	adds	r2, #2
 8005bd2:	f104 010c 	add.w	r1, r4, #12
 8005bd6:	0092      	lsls	r2, r2, #2
 8005bd8:	300c      	adds	r0, #12
 8005bda:	f7ff fd7e 	bl	80056da <memcpy>
 8005bde:	4621      	mov	r1, r4
 8005be0:	9801      	ldr	r0, [sp, #4]
 8005be2:	f000 fa9d 	bl	8006120 <_Bfree>
 8005be6:	464c      	mov	r4, r9
 8005be8:	6923      	ldr	r3, [r4, #16]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bf0:	6122      	str	r2, [r4, #16]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	615a      	str	r2, [r3, #20]
 8005bf6:	e7be      	b.n	8005b76 <__gethex+0x362>
 8005bf8:	6922      	ldr	r2, [r4, #16]
 8005bfa:	455a      	cmp	r2, fp
 8005bfc:	dd0b      	ble.n	8005c16 <__gethex+0x402>
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4620      	mov	r0, r4
 8005c02:	f7ff fd9f 	bl	8005744 <rshift>
 8005c06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c0a:	3701      	adds	r7, #1
 8005c0c:	42bb      	cmp	r3, r7
 8005c0e:	f6ff aee0 	blt.w	80059d2 <__gethex+0x1be>
 8005c12:	2501      	movs	r5, #1
 8005c14:	e7c2      	b.n	8005b9c <__gethex+0x388>
 8005c16:	f016 061f 	ands.w	r6, r6, #31
 8005c1a:	d0fa      	beq.n	8005c12 <__gethex+0x3fe>
 8005c1c:	4453      	add	r3, sl
 8005c1e:	f1c6 0620 	rsb	r6, r6, #32
 8005c22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005c26:	f000 fb2d 	bl	8006284 <__hi0bits>
 8005c2a:	42b0      	cmp	r0, r6
 8005c2c:	dbe7      	blt.n	8005bfe <__gethex+0x3ea>
 8005c2e:	e7f0      	b.n	8005c12 <__gethex+0x3fe>
 8005c30:	080076fe 	.word	0x080076fe

08005c34 <L_shift>:
 8005c34:	f1c2 0208 	rsb	r2, r2, #8
 8005c38:	0092      	lsls	r2, r2, #2
 8005c3a:	b570      	push	{r4, r5, r6, lr}
 8005c3c:	f1c2 0620 	rsb	r6, r2, #32
 8005c40:	6843      	ldr	r3, [r0, #4]
 8005c42:	6804      	ldr	r4, [r0, #0]
 8005c44:	fa03 f506 	lsl.w	r5, r3, r6
 8005c48:	432c      	orrs	r4, r5
 8005c4a:	40d3      	lsrs	r3, r2
 8005c4c:	6004      	str	r4, [r0, #0]
 8005c4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005c52:	4288      	cmp	r0, r1
 8005c54:	d3f4      	bcc.n	8005c40 <L_shift+0xc>
 8005c56:	bd70      	pop	{r4, r5, r6, pc}

08005c58 <__match>:
 8005c58:	b530      	push	{r4, r5, lr}
 8005c5a:	6803      	ldr	r3, [r0, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c62:	b914      	cbnz	r4, 8005c6a <__match+0x12>
 8005c64:	6003      	str	r3, [r0, #0]
 8005c66:	2001      	movs	r0, #1
 8005c68:	bd30      	pop	{r4, r5, pc}
 8005c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005c72:	2d19      	cmp	r5, #25
 8005c74:	bf98      	it	ls
 8005c76:	3220      	addls	r2, #32
 8005c78:	42a2      	cmp	r2, r4
 8005c7a:	d0f0      	beq.n	8005c5e <__match+0x6>
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	e7f3      	b.n	8005c68 <__match+0x10>

08005c80 <__hexnan>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	680b      	ldr	r3, [r1, #0]
 8005c86:	6801      	ldr	r1, [r0, #0]
 8005c88:	115e      	asrs	r6, r3, #5
 8005c8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005c8e:	f013 031f 	ands.w	r3, r3, #31
 8005c92:	b087      	sub	sp, #28
 8005c94:	bf18      	it	ne
 8005c96:	3604      	addne	r6, #4
 8005c98:	2500      	movs	r5, #0
 8005c9a:	1f37      	subs	r7, r6, #4
 8005c9c:	4682      	mov	sl, r0
 8005c9e:	4690      	mov	r8, r2
 8005ca0:	9301      	str	r3, [sp, #4]
 8005ca2:	f846 5c04 	str.w	r5, [r6, #-4]
 8005ca6:	46b9      	mov	r9, r7
 8005ca8:	463c      	mov	r4, r7
 8005caa:	9502      	str	r5, [sp, #8]
 8005cac:	46ab      	mov	fp, r5
 8005cae:	784a      	ldrb	r2, [r1, #1]
 8005cb0:	1c4b      	adds	r3, r1, #1
 8005cb2:	9303      	str	r3, [sp, #12]
 8005cb4:	b342      	cbz	r2, 8005d08 <__hexnan+0x88>
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	9105      	str	r1, [sp, #20]
 8005cba:	9204      	str	r2, [sp, #16]
 8005cbc:	f7ff fd94 	bl	80057e8 <__hexdig_fun>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d151      	bne.n	8005d68 <__hexnan+0xe8>
 8005cc4:	9a04      	ldr	r2, [sp, #16]
 8005cc6:	9905      	ldr	r1, [sp, #20]
 8005cc8:	2a20      	cmp	r2, #32
 8005cca:	d818      	bhi.n	8005cfe <__hexnan+0x7e>
 8005ccc:	9b02      	ldr	r3, [sp, #8]
 8005cce:	459b      	cmp	fp, r3
 8005cd0:	dd13      	ble.n	8005cfa <__hexnan+0x7a>
 8005cd2:	454c      	cmp	r4, r9
 8005cd4:	d206      	bcs.n	8005ce4 <__hexnan+0x64>
 8005cd6:	2d07      	cmp	r5, #7
 8005cd8:	dc04      	bgt.n	8005ce4 <__hexnan+0x64>
 8005cda:	462a      	mov	r2, r5
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f7ff ffa8 	bl	8005c34 <L_shift>
 8005ce4:	4544      	cmp	r4, r8
 8005ce6:	d952      	bls.n	8005d8e <__hexnan+0x10e>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f1a4 0904 	sub.w	r9, r4, #4
 8005cee:	f844 3c04 	str.w	r3, [r4, #-4]
 8005cf2:	f8cd b008 	str.w	fp, [sp, #8]
 8005cf6:	464c      	mov	r4, r9
 8005cf8:	461d      	mov	r5, r3
 8005cfa:	9903      	ldr	r1, [sp, #12]
 8005cfc:	e7d7      	b.n	8005cae <__hexnan+0x2e>
 8005cfe:	2a29      	cmp	r2, #41	@ 0x29
 8005d00:	d157      	bne.n	8005db2 <__hexnan+0x132>
 8005d02:	3102      	adds	r1, #2
 8005d04:	f8ca 1000 	str.w	r1, [sl]
 8005d08:	f1bb 0f00 	cmp.w	fp, #0
 8005d0c:	d051      	beq.n	8005db2 <__hexnan+0x132>
 8005d0e:	454c      	cmp	r4, r9
 8005d10:	d206      	bcs.n	8005d20 <__hexnan+0xa0>
 8005d12:	2d07      	cmp	r5, #7
 8005d14:	dc04      	bgt.n	8005d20 <__hexnan+0xa0>
 8005d16:	462a      	mov	r2, r5
 8005d18:	4649      	mov	r1, r9
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff ff8a 	bl	8005c34 <L_shift>
 8005d20:	4544      	cmp	r4, r8
 8005d22:	d936      	bls.n	8005d92 <__hexnan+0x112>
 8005d24:	f1a8 0204 	sub.w	r2, r8, #4
 8005d28:	4623      	mov	r3, r4
 8005d2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8005d2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d32:	429f      	cmp	r7, r3
 8005d34:	d2f9      	bcs.n	8005d2a <__hexnan+0xaa>
 8005d36:	1b3b      	subs	r3, r7, r4
 8005d38:	f023 0303 	bic.w	r3, r3, #3
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	3401      	adds	r4, #1
 8005d40:	3e03      	subs	r6, #3
 8005d42:	42b4      	cmp	r4, r6
 8005d44:	bf88      	it	hi
 8005d46:	2304      	movhi	r3, #4
 8005d48:	4443      	add	r3, r8
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f843 2b04 	str.w	r2, [r3], #4
 8005d50:	429f      	cmp	r7, r3
 8005d52:	d2fb      	bcs.n	8005d4c <__hexnan+0xcc>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	b91b      	cbnz	r3, 8005d60 <__hexnan+0xe0>
 8005d58:	4547      	cmp	r7, r8
 8005d5a:	d128      	bne.n	8005dae <__hexnan+0x12e>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	2005      	movs	r0, #5
 8005d62:	b007      	add	sp, #28
 8005d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d68:	3501      	adds	r5, #1
 8005d6a:	2d08      	cmp	r5, #8
 8005d6c:	f10b 0b01 	add.w	fp, fp, #1
 8005d70:	dd06      	ble.n	8005d80 <__hexnan+0x100>
 8005d72:	4544      	cmp	r4, r8
 8005d74:	d9c1      	bls.n	8005cfa <__hexnan+0x7a>
 8005d76:	2300      	movs	r3, #0
 8005d78:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d7c:	2501      	movs	r5, #1
 8005d7e:	3c04      	subs	r4, #4
 8005d80:	6822      	ldr	r2, [r4, #0]
 8005d82:	f000 000f 	and.w	r0, r0, #15
 8005d86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005d8a:	6020      	str	r0, [r4, #0]
 8005d8c:	e7b5      	b.n	8005cfa <__hexnan+0x7a>
 8005d8e:	2508      	movs	r5, #8
 8005d90:	e7b3      	b.n	8005cfa <__hexnan+0x7a>
 8005d92:	9b01      	ldr	r3, [sp, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0dd      	beq.n	8005d54 <__hexnan+0xd4>
 8005d98:	f1c3 0320 	rsb	r3, r3, #32
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005da0:	40da      	lsrs	r2, r3
 8005da2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005da6:	4013      	ands	r3, r2
 8005da8:	f846 3c04 	str.w	r3, [r6, #-4]
 8005dac:	e7d2      	b.n	8005d54 <__hexnan+0xd4>
 8005dae:	3f04      	subs	r7, #4
 8005db0:	e7d0      	b.n	8005d54 <__hexnan+0xd4>
 8005db2:	2004      	movs	r0, #4
 8005db4:	e7d5      	b.n	8005d62 <__hexnan+0xe2>
	...

08005db8 <malloc>:
 8005db8:	4b02      	ldr	r3, [pc, #8]	@ (8005dc4 <malloc+0xc>)
 8005dba:	4601      	mov	r1, r0
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	f000 b825 	b.w	8005e0c <_malloc_r>
 8005dc2:	bf00      	nop
 8005dc4:	2000018c 	.word	0x2000018c

08005dc8 <sbrk_aligned>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	4e0f      	ldr	r6, [pc, #60]	@ (8005e08 <sbrk_aligned+0x40>)
 8005dcc:	460c      	mov	r4, r1
 8005dce:	6831      	ldr	r1, [r6, #0]
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	b911      	cbnz	r1, 8005dda <sbrk_aligned+0x12>
 8005dd4:	f000 feae 	bl	8006b34 <_sbrk_r>
 8005dd8:	6030      	str	r0, [r6, #0]
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 fea9 	bl	8006b34 <_sbrk_r>
 8005de2:	1c43      	adds	r3, r0, #1
 8005de4:	d103      	bne.n	8005dee <sbrk_aligned+0x26>
 8005de6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005dea:	4620      	mov	r0, r4
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	1cc4      	adds	r4, r0, #3
 8005df0:	f024 0403 	bic.w	r4, r4, #3
 8005df4:	42a0      	cmp	r0, r4
 8005df6:	d0f8      	beq.n	8005dea <sbrk_aligned+0x22>
 8005df8:	1a21      	subs	r1, r4, r0
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 fe9a 	bl	8006b34 <_sbrk_r>
 8005e00:	3001      	adds	r0, #1
 8005e02:	d1f2      	bne.n	8005dea <sbrk_aligned+0x22>
 8005e04:	e7ef      	b.n	8005de6 <sbrk_aligned+0x1e>
 8005e06:	bf00      	nop
 8005e08:	2000047c 	.word	0x2000047c

08005e0c <_malloc_r>:
 8005e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e10:	1ccd      	adds	r5, r1, #3
 8005e12:	f025 0503 	bic.w	r5, r5, #3
 8005e16:	3508      	adds	r5, #8
 8005e18:	2d0c      	cmp	r5, #12
 8005e1a:	bf38      	it	cc
 8005e1c:	250c      	movcc	r5, #12
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	4606      	mov	r6, r0
 8005e22:	db01      	blt.n	8005e28 <_malloc_r+0x1c>
 8005e24:	42a9      	cmp	r1, r5
 8005e26:	d904      	bls.n	8005e32 <_malloc_r+0x26>
 8005e28:	230c      	movs	r3, #12
 8005e2a:	6033      	str	r3, [r6, #0]
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f08 <_malloc_r+0xfc>
 8005e36:	f000 f927 	bl	8006088 <__malloc_lock>
 8005e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e3e:	461c      	mov	r4, r3
 8005e40:	bb44      	cbnz	r4, 8005e94 <_malloc_r+0x88>
 8005e42:	4629      	mov	r1, r5
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff ffbf 	bl	8005dc8 <sbrk_aligned>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	d158      	bne.n	8005f02 <_malloc_r+0xf6>
 8005e50:	f8d8 4000 	ldr.w	r4, [r8]
 8005e54:	4627      	mov	r7, r4
 8005e56:	2f00      	cmp	r7, #0
 8005e58:	d143      	bne.n	8005ee2 <_malloc_r+0xd6>
 8005e5a:	2c00      	cmp	r4, #0
 8005e5c:	d04b      	beq.n	8005ef6 <_malloc_r+0xea>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	4639      	mov	r1, r7
 8005e62:	4630      	mov	r0, r6
 8005e64:	eb04 0903 	add.w	r9, r4, r3
 8005e68:	f000 fe64 	bl	8006b34 <_sbrk_r>
 8005e6c:	4581      	cmp	r9, r0
 8005e6e:	d142      	bne.n	8005ef6 <_malloc_r+0xea>
 8005e70:	6821      	ldr	r1, [r4, #0]
 8005e72:	1a6d      	subs	r5, r5, r1
 8005e74:	4629      	mov	r1, r5
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff ffa6 	bl	8005dc8 <sbrk_aligned>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d03a      	beq.n	8005ef6 <_malloc_r+0xea>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	442b      	add	r3, r5
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	f8d8 3000 	ldr.w	r3, [r8]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	bb62      	cbnz	r2, 8005ee8 <_malloc_r+0xdc>
 8005e8e:	f8c8 7000 	str.w	r7, [r8]
 8005e92:	e00f      	b.n	8005eb4 <_malloc_r+0xa8>
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	1b52      	subs	r2, r2, r5
 8005e98:	d420      	bmi.n	8005edc <_malloc_r+0xd0>
 8005e9a:	2a0b      	cmp	r2, #11
 8005e9c:	d917      	bls.n	8005ece <_malloc_r+0xc2>
 8005e9e:	1961      	adds	r1, r4, r5
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	6025      	str	r5, [r4, #0]
 8005ea4:	bf18      	it	ne
 8005ea6:	6059      	strne	r1, [r3, #4]
 8005ea8:	6863      	ldr	r3, [r4, #4]
 8005eaa:	bf08      	it	eq
 8005eac:	f8c8 1000 	streq.w	r1, [r8]
 8005eb0:	5162      	str	r2, [r4, r5]
 8005eb2:	604b      	str	r3, [r1, #4]
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f8ed 	bl	8006094 <__malloc_unlock>
 8005eba:	f104 000b 	add.w	r0, r4, #11
 8005ebe:	1d23      	adds	r3, r4, #4
 8005ec0:	f020 0007 	bic.w	r0, r0, #7
 8005ec4:	1ac2      	subs	r2, r0, r3
 8005ec6:	bf1c      	itt	ne
 8005ec8:	1a1b      	subne	r3, r3, r0
 8005eca:	50a3      	strne	r3, [r4, r2]
 8005ecc:	e7af      	b.n	8005e2e <_malloc_r+0x22>
 8005ece:	6862      	ldr	r2, [r4, #4]
 8005ed0:	42a3      	cmp	r3, r4
 8005ed2:	bf0c      	ite	eq
 8005ed4:	f8c8 2000 	streq.w	r2, [r8]
 8005ed8:	605a      	strne	r2, [r3, #4]
 8005eda:	e7eb      	b.n	8005eb4 <_malloc_r+0xa8>
 8005edc:	4623      	mov	r3, r4
 8005ede:	6864      	ldr	r4, [r4, #4]
 8005ee0:	e7ae      	b.n	8005e40 <_malloc_r+0x34>
 8005ee2:	463c      	mov	r4, r7
 8005ee4:	687f      	ldr	r7, [r7, #4]
 8005ee6:	e7b6      	b.n	8005e56 <_malloc_r+0x4a>
 8005ee8:	461a      	mov	r2, r3
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	42a3      	cmp	r3, r4
 8005eee:	d1fb      	bne.n	8005ee8 <_malloc_r+0xdc>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6053      	str	r3, [r2, #4]
 8005ef4:	e7de      	b.n	8005eb4 <_malloc_r+0xa8>
 8005ef6:	230c      	movs	r3, #12
 8005ef8:	6033      	str	r3, [r6, #0]
 8005efa:	4630      	mov	r0, r6
 8005efc:	f000 f8ca 	bl	8006094 <__malloc_unlock>
 8005f00:	e794      	b.n	8005e2c <_malloc_r+0x20>
 8005f02:	6005      	str	r5, [r0, #0]
 8005f04:	e7d6      	b.n	8005eb4 <_malloc_r+0xa8>
 8005f06:	bf00      	nop
 8005f08:	20000480 	.word	0x20000480

08005f0c <__ascii_mbtowc>:
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	b901      	cbnz	r1, 8005f12 <__ascii_mbtowc+0x6>
 8005f10:	a901      	add	r1, sp, #4
 8005f12:	b142      	cbz	r2, 8005f26 <__ascii_mbtowc+0x1a>
 8005f14:	b14b      	cbz	r3, 8005f2a <__ascii_mbtowc+0x1e>
 8005f16:	7813      	ldrb	r3, [r2, #0]
 8005f18:	600b      	str	r3, [r1, #0]
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	1e10      	subs	r0, r2, #0
 8005f1e:	bf18      	it	ne
 8005f20:	2001      	movne	r0, #1
 8005f22:	b002      	add	sp, #8
 8005f24:	4770      	bx	lr
 8005f26:	4610      	mov	r0, r2
 8005f28:	e7fb      	b.n	8005f22 <__ascii_mbtowc+0x16>
 8005f2a:	f06f 0001 	mvn.w	r0, #1
 8005f2e:	e7f8      	b.n	8005f22 <__ascii_mbtowc+0x16>

08005f30 <__sflush_r>:
 8005f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f38:	0716      	lsls	r6, r2, #28
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	d454      	bmi.n	8005fea <__sflush_r+0xba>
 8005f40:	684b      	ldr	r3, [r1, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dc02      	bgt.n	8005f4c <__sflush_r+0x1c>
 8005f46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dd48      	ble.n	8005fde <__sflush_r+0xae>
 8005f4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d045      	beq.n	8005fde <__sflush_r+0xae>
 8005f52:	2300      	movs	r3, #0
 8005f54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f58:	682f      	ldr	r7, [r5, #0]
 8005f5a:	6a21      	ldr	r1, [r4, #32]
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	d030      	beq.n	8005fc2 <__sflush_r+0x92>
 8005f60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	0759      	lsls	r1, r3, #29
 8005f66:	d505      	bpl.n	8005f74 <__sflush_r+0x44>
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f6e:	b10b      	cbz	r3, 8005f74 <__sflush_r+0x44>
 8005f70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	2300      	movs	r3, #0
 8005f76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f78:	6a21      	ldr	r1, [r4, #32]
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b0      	blx	r6
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	d106      	bne.n	8005f92 <__sflush_r+0x62>
 8005f84:	6829      	ldr	r1, [r5, #0]
 8005f86:	291d      	cmp	r1, #29
 8005f88:	d82b      	bhi.n	8005fe2 <__sflush_r+0xb2>
 8005f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8006034 <__sflush_r+0x104>)
 8005f8c:	410a      	asrs	r2, r1
 8005f8e:	07d6      	lsls	r6, r2, #31
 8005f90:	d427      	bmi.n	8005fe2 <__sflush_r+0xb2>
 8005f92:	2200      	movs	r2, #0
 8005f94:	6062      	str	r2, [r4, #4]
 8005f96:	04d9      	lsls	r1, r3, #19
 8005f98:	6922      	ldr	r2, [r4, #16]
 8005f9a:	6022      	str	r2, [r4, #0]
 8005f9c:	d504      	bpl.n	8005fa8 <__sflush_r+0x78>
 8005f9e:	1c42      	adds	r2, r0, #1
 8005fa0:	d101      	bne.n	8005fa6 <__sflush_r+0x76>
 8005fa2:	682b      	ldr	r3, [r5, #0]
 8005fa4:	b903      	cbnz	r3, 8005fa8 <__sflush_r+0x78>
 8005fa6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005fa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005faa:	602f      	str	r7, [r5, #0]
 8005fac:	b1b9      	cbz	r1, 8005fde <__sflush_r+0xae>
 8005fae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	d002      	beq.n	8005fbc <__sflush_r+0x8c>
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 fdfa 	bl	8006bb0 <_free_r>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fc0:	e00d      	b.n	8005fde <__sflush_r+0xae>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b0      	blx	r6
 8005fc8:	4602      	mov	r2, r0
 8005fca:	1c50      	adds	r0, r2, #1
 8005fcc:	d1c9      	bne.n	8005f62 <__sflush_r+0x32>
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0c6      	beq.n	8005f62 <__sflush_r+0x32>
 8005fd4:	2b1d      	cmp	r3, #29
 8005fd6:	d001      	beq.n	8005fdc <__sflush_r+0xac>
 8005fd8:	2b16      	cmp	r3, #22
 8005fda:	d11e      	bne.n	800601a <__sflush_r+0xea>
 8005fdc:	602f      	str	r7, [r5, #0]
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e022      	b.n	8006028 <__sflush_r+0xf8>
 8005fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	e01b      	b.n	8006022 <__sflush_r+0xf2>
 8005fea:	690f      	ldr	r7, [r1, #16]
 8005fec:	2f00      	cmp	r7, #0
 8005fee:	d0f6      	beq.n	8005fde <__sflush_r+0xae>
 8005ff0:	0793      	lsls	r3, r2, #30
 8005ff2:	680e      	ldr	r6, [r1, #0]
 8005ff4:	bf08      	it	eq
 8005ff6:	694b      	ldreq	r3, [r1, #20]
 8005ff8:	600f      	str	r7, [r1, #0]
 8005ffa:	bf18      	it	ne
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	eba6 0807 	sub.w	r8, r6, r7
 8006002:	608b      	str	r3, [r1, #8]
 8006004:	f1b8 0f00 	cmp.w	r8, #0
 8006008:	dde9      	ble.n	8005fde <__sflush_r+0xae>
 800600a:	6a21      	ldr	r1, [r4, #32]
 800600c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800600e:	4643      	mov	r3, r8
 8006010:	463a      	mov	r2, r7
 8006012:	4628      	mov	r0, r5
 8006014:	47b0      	blx	r6
 8006016:	2800      	cmp	r0, #0
 8006018:	dc08      	bgt.n	800602c <__sflush_r+0xfc>
 800601a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006022:	81a3      	strh	r3, [r4, #12]
 8006024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602c:	4407      	add	r7, r0
 800602e:	eba8 0800 	sub.w	r8, r8, r0
 8006032:	e7e7      	b.n	8006004 <__sflush_r+0xd4>
 8006034:	dfbffffe 	.word	0xdfbffffe

08006038 <_fflush_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	690b      	ldr	r3, [r1, #16]
 800603c:	4605      	mov	r5, r0
 800603e:	460c      	mov	r4, r1
 8006040:	b913      	cbnz	r3, 8006048 <_fflush_r+0x10>
 8006042:	2500      	movs	r5, #0
 8006044:	4628      	mov	r0, r5
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	b118      	cbz	r0, 8006052 <_fflush_r+0x1a>
 800604a:	6a03      	ldr	r3, [r0, #32]
 800604c:	b90b      	cbnz	r3, 8006052 <_fflush_r+0x1a>
 800604e:	f7fe fc5d 	bl	800490c <__sinit>
 8006052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f3      	beq.n	8006042 <_fflush_r+0xa>
 800605a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800605c:	07d0      	lsls	r0, r2, #31
 800605e:	d404      	bmi.n	800606a <_fflush_r+0x32>
 8006060:	0599      	lsls	r1, r3, #22
 8006062:	d402      	bmi.n	800606a <_fflush_r+0x32>
 8006064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006066:	f7ff fb36 	bl	80056d6 <__retarget_lock_acquire_recursive>
 800606a:	4628      	mov	r0, r5
 800606c:	4621      	mov	r1, r4
 800606e:	f7ff ff5f 	bl	8005f30 <__sflush_r>
 8006072:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006074:	07da      	lsls	r2, r3, #31
 8006076:	4605      	mov	r5, r0
 8006078:	d4e4      	bmi.n	8006044 <_fflush_r+0xc>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	059b      	lsls	r3, r3, #22
 800607e:	d4e1      	bmi.n	8006044 <_fflush_r+0xc>
 8006080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006082:	f7ff fb29 	bl	80056d8 <__retarget_lock_release_recursive>
 8006086:	e7dd      	b.n	8006044 <_fflush_r+0xc>

08006088 <__malloc_lock>:
 8006088:	4801      	ldr	r0, [pc, #4]	@ (8006090 <__malloc_lock+0x8>)
 800608a:	f7ff bb24 	b.w	80056d6 <__retarget_lock_acquire_recursive>
 800608e:	bf00      	nop
 8006090:	20000478 	.word	0x20000478

08006094 <__malloc_unlock>:
 8006094:	4801      	ldr	r0, [pc, #4]	@ (800609c <__malloc_unlock+0x8>)
 8006096:	f7ff bb1f 	b.w	80056d8 <__retarget_lock_release_recursive>
 800609a:	bf00      	nop
 800609c:	20000478 	.word	0x20000478

080060a0 <_Balloc>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	69c6      	ldr	r6, [r0, #28]
 80060a4:	4604      	mov	r4, r0
 80060a6:	460d      	mov	r5, r1
 80060a8:	b976      	cbnz	r6, 80060c8 <_Balloc+0x28>
 80060aa:	2010      	movs	r0, #16
 80060ac:	f7ff fe84 	bl	8005db8 <malloc>
 80060b0:	4602      	mov	r2, r0
 80060b2:	61e0      	str	r0, [r4, #28]
 80060b4:	b920      	cbnz	r0, 80060c0 <_Balloc+0x20>
 80060b6:	4b18      	ldr	r3, [pc, #96]	@ (8006118 <_Balloc+0x78>)
 80060b8:	4818      	ldr	r0, [pc, #96]	@ (800611c <_Balloc+0x7c>)
 80060ba:	216b      	movs	r1, #107	@ 0x6b
 80060bc:	f7ff fb24 	bl	8005708 <__assert_func>
 80060c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060c4:	6006      	str	r6, [r0, #0]
 80060c6:	60c6      	str	r6, [r0, #12]
 80060c8:	69e6      	ldr	r6, [r4, #28]
 80060ca:	68f3      	ldr	r3, [r6, #12]
 80060cc:	b183      	cbz	r3, 80060f0 <_Balloc+0x50>
 80060ce:	69e3      	ldr	r3, [r4, #28]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060d6:	b9b8      	cbnz	r0, 8006108 <_Balloc+0x68>
 80060d8:	2101      	movs	r1, #1
 80060da:	fa01 f605 	lsl.w	r6, r1, r5
 80060de:	1d72      	adds	r2, r6, #5
 80060e0:	0092      	lsls	r2, r2, #2
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 fd4f 	bl	8006b86 <_calloc_r>
 80060e8:	b160      	cbz	r0, 8006104 <_Balloc+0x64>
 80060ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060ee:	e00e      	b.n	800610e <_Balloc+0x6e>
 80060f0:	2221      	movs	r2, #33	@ 0x21
 80060f2:	2104      	movs	r1, #4
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fd46 	bl	8006b86 <_calloc_r>
 80060fa:	69e3      	ldr	r3, [r4, #28]
 80060fc:	60f0      	str	r0, [r6, #12]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e4      	bne.n	80060ce <_Balloc+0x2e>
 8006104:	2000      	movs	r0, #0
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	6802      	ldr	r2, [r0, #0]
 800610a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800610e:	2300      	movs	r3, #0
 8006110:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006114:	e7f7      	b.n	8006106 <_Balloc+0x66>
 8006116:	bf00      	nop
 8006118:	08007548 	.word	0x08007548
 800611c:	0800776f 	.word	0x0800776f

08006120 <_Bfree>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	69c6      	ldr	r6, [r0, #28]
 8006124:	4605      	mov	r5, r0
 8006126:	460c      	mov	r4, r1
 8006128:	b976      	cbnz	r6, 8006148 <_Bfree+0x28>
 800612a:	2010      	movs	r0, #16
 800612c:	f7ff fe44 	bl	8005db8 <malloc>
 8006130:	4602      	mov	r2, r0
 8006132:	61e8      	str	r0, [r5, #28]
 8006134:	b920      	cbnz	r0, 8006140 <_Bfree+0x20>
 8006136:	4b09      	ldr	r3, [pc, #36]	@ (800615c <_Bfree+0x3c>)
 8006138:	4809      	ldr	r0, [pc, #36]	@ (8006160 <_Bfree+0x40>)
 800613a:	218f      	movs	r1, #143	@ 0x8f
 800613c:	f7ff fae4 	bl	8005708 <__assert_func>
 8006140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006144:	6006      	str	r6, [r0, #0]
 8006146:	60c6      	str	r6, [r0, #12]
 8006148:	b13c      	cbz	r4, 800615a <_Bfree+0x3a>
 800614a:	69eb      	ldr	r3, [r5, #28]
 800614c:	6862      	ldr	r2, [r4, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006154:	6021      	str	r1, [r4, #0]
 8006156:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	08007548 	.word	0x08007548
 8006160:	0800776f 	.word	0x0800776f

08006164 <__multadd>:
 8006164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006168:	690d      	ldr	r5, [r1, #16]
 800616a:	4607      	mov	r7, r0
 800616c:	460c      	mov	r4, r1
 800616e:	461e      	mov	r6, r3
 8006170:	f101 0c14 	add.w	ip, r1, #20
 8006174:	2000      	movs	r0, #0
 8006176:	f8dc 3000 	ldr.w	r3, [ip]
 800617a:	b299      	uxth	r1, r3
 800617c:	fb02 6101 	mla	r1, r2, r1, r6
 8006180:	0c1e      	lsrs	r6, r3, #16
 8006182:	0c0b      	lsrs	r3, r1, #16
 8006184:	fb02 3306 	mla	r3, r2, r6, r3
 8006188:	b289      	uxth	r1, r1
 800618a:	3001      	adds	r0, #1
 800618c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006190:	4285      	cmp	r5, r0
 8006192:	f84c 1b04 	str.w	r1, [ip], #4
 8006196:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800619a:	dcec      	bgt.n	8006176 <__multadd+0x12>
 800619c:	b30e      	cbz	r6, 80061e2 <__multadd+0x7e>
 800619e:	68a3      	ldr	r3, [r4, #8]
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	dc19      	bgt.n	80061d8 <__multadd+0x74>
 80061a4:	6861      	ldr	r1, [r4, #4]
 80061a6:	4638      	mov	r0, r7
 80061a8:	3101      	adds	r1, #1
 80061aa:	f7ff ff79 	bl	80060a0 <_Balloc>
 80061ae:	4680      	mov	r8, r0
 80061b0:	b928      	cbnz	r0, 80061be <__multadd+0x5a>
 80061b2:	4602      	mov	r2, r0
 80061b4:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <__multadd+0x84>)
 80061b6:	480d      	ldr	r0, [pc, #52]	@ (80061ec <__multadd+0x88>)
 80061b8:	21ba      	movs	r1, #186	@ 0xba
 80061ba:	f7ff faa5 	bl	8005708 <__assert_func>
 80061be:	6922      	ldr	r2, [r4, #16]
 80061c0:	3202      	adds	r2, #2
 80061c2:	f104 010c 	add.w	r1, r4, #12
 80061c6:	0092      	lsls	r2, r2, #2
 80061c8:	300c      	adds	r0, #12
 80061ca:	f7ff fa86 	bl	80056da <memcpy>
 80061ce:	4621      	mov	r1, r4
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7ff ffa5 	bl	8006120 <_Bfree>
 80061d6:	4644      	mov	r4, r8
 80061d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061dc:	3501      	adds	r5, #1
 80061de:	615e      	str	r6, [r3, #20]
 80061e0:	6125      	str	r5, [r4, #16]
 80061e2:	4620      	mov	r0, r4
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e8:	080076fe 	.word	0x080076fe
 80061ec:	0800776f 	.word	0x0800776f

080061f0 <__s2b>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	460c      	mov	r4, r1
 80061f6:	4615      	mov	r5, r2
 80061f8:	461f      	mov	r7, r3
 80061fa:	2209      	movs	r2, #9
 80061fc:	3308      	adds	r3, #8
 80061fe:	4606      	mov	r6, r0
 8006200:	fb93 f3f2 	sdiv	r3, r3, r2
 8006204:	2100      	movs	r1, #0
 8006206:	2201      	movs	r2, #1
 8006208:	429a      	cmp	r2, r3
 800620a:	db09      	blt.n	8006220 <__s2b+0x30>
 800620c:	4630      	mov	r0, r6
 800620e:	f7ff ff47 	bl	80060a0 <_Balloc>
 8006212:	b940      	cbnz	r0, 8006226 <__s2b+0x36>
 8006214:	4602      	mov	r2, r0
 8006216:	4b19      	ldr	r3, [pc, #100]	@ (800627c <__s2b+0x8c>)
 8006218:	4819      	ldr	r0, [pc, #100]	@ (8006280 <__s2b+0x90>)
 800621a:	21d3      	movs	r1, #211	@ 0xd3
 800621c:	f7ff fa74 	bl	8005708 <__assert_func>
 8006220:	0052      	lsls	r2, r2, #1
 8006222:	3101      	adds	r1, #1
 8006224:	e7f0      	b.n	8006208 <__s2b+0x18>
 8006226:	9b08      	ldr	r3, [sp, #32]
 8006228:	6143      	str	r3, [r0, #20]
 800622a:	2d09      	cmp	r5, #9
 800622c:	f04f 0301 	mov.w	r3, #1
 8006230:	6103      	str	r3, [r0, #16]
 8006232:	dd16      	ble.n	8006262 <__s2b+0x72>
 8006234:	f104 0909 	add.w	r9, r4, #9
 8006238:	46c8      	mov	r8, r9
 800623a:	442c      	add	r4, r5
 800623c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006240:	4601      	mov	r1, r0
 8006242:	3b30      	subs	r3, #48	@ 0x30
 8006244:	220a      	movs	r2, #10
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff ff8c 	bl	8006164 <__multadd>
 800624c:	45a0      	cmp	r8, r4
 800624e:	d1f5      	bne.n	800623c <__s2b+0x4c>
 8006250:	f1a5 0408 	sub.w	r4, r5, #8
 8006254:	444c      	add	r4, r9
 8006256:	1b2d      	subs	r5, r5, r4
 8006258:	1963      	adds	r3, r4, r5
 800625a:	42bb      	cmp	r3, r7
 800625c:	db04      	blt.n	8006268 <__s2b+0x78>
 800625e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006262:	340a      	adds	r4, #10
 8006264:	2509      	movs	r5, #9
 8006266:	e7f6      	b.n	8006256 <__s2b+0x66>
 8006268:	f814 3b01 	ldrb.w	r3, [r4], #1
 800626c:	4601      	mov	r1, r0
 800626e:	3b30      	subs	r3, #48	@ 0x30
 8006270:	220a      	movs	r2, #10
 8006272:	4630      	mov	r0, r6
 8006274:	f7ff ff76 	bl	8006164 <__multadd>
 8006278:	e7ee      	b.n	8006258 <__s2b+0x68>
 800627a:	bf00      	nop
 800627c:	080076fe 	.word	0x080076fe
 8006280:	0800776f 	.word	0x0800776f

08006284 <__hi0bits>:
 8006284:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006288:	4603      	mov	r3, r0
 800628a:	bf36      	itet	cc
 800628c:	0403      	lslcc	r3, r0, #16
 800628e:	2000      	movcs	r0, #0
 8006290:	2010      	movcc	r0, #16
 8006292:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006296:	bf3c      	itt	cc
 8006298:	021b      	lslcc	r3, r3, #8
 800629a:	3008      	addcc	r0, #8
 800629c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062a0:	bf3c      	itt	cc
 80062a2:	011b      	lslcc	r3, r3, #4
 80062a4:	3004      	addcc	r0, #4
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062aa:	bf3c      	itt	cc
 80062ac:	009b      	lslcc	r3, r3, #2
 80062ae:	3002      	addcc	r0, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	db05      	blt.n	80062c0 <__hi0bits+0x3c>
 80062b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062b8:	f100 0001 	add.w	r0, r0, #1
 80062bc:	bf08      	it	eq
 80062be:	2020      	moveq	r0, #32
 80062c0:	4770      	bx	lr

080062c2 <__lo0bits>:
 80062c2:	6803      	ldr	r3, [r0, #0]
 80062c4:	4602      	mov	r2, r0
 80062c6:	f013 0007 	ands.w	r0, r3, #7
 80062ca:	d00b      	beq.n	80062e4 <__lo0bits+0x22>
 80062cc:	07d9      	lsls	r1, r3, #31
 80062ce:	d421      	bmi.n	8006314 <__lo0bits+0x52>
 80062d0:	0798      	lsls	r0, r3, #30
 80062d2:	bf49      	itett	mi
 80062d4:	085b      	lsrmi	r3, r3, #1
 80062d6:	089b      	lsrpl	r3, r3, #2
 80062d8:	2001      	movmi	r0, #1
 80062da:	6013      	strmi	r3, [r2, #0]
 80062dc:	bf5c      	itt	pl
 80062de:	6013      	strpl	r3, [r2, #0]
 80062e0:	2002      	movpl	r0, #2
 80062e2:	4770      	bx	lr
 80062e4:	b299      	uxth	r1, r3
 80062e6:	b909      	cbnz	r1, 80062ec <__lo0bits+0x2a>
 80062e8:	0c1b      	lsrs	r3, r3, #16
 80062ea:	2010      	movs	r0, #16
 80062ec:	b2d9      	uxtb	r1, r3
 80062ee:	b909      	cbnz	r1, 80062f4 <__lo0bits+0x32>
 80062f0:	3008      	adds	r0, #8
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	0719      	lsls	r1, r3, #28
 80062f6:	bf04      	itt	eq
 80062f8:	091b      	lsreq	r3, r3, #4
 80062fa:	3004      	addeq	r0, #4
 80062fc:	0799      	lsls	r1, r3, #30
 80062fe:	bf04      	itt	eq
 8006300:	089b      	lsreq	r3, r3, #2
 8006302:	3002      	addeq	r0, #2
 8006304:	07d9      	lsls	r1, r3, #31
 8006306:	d403      	bmi.n	8006310 <__lo0bits+0x4e>
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	f100 0001 	add.w	r0, r0, #1
 800630e:	d003      	beq.n	8006318 <__lo0bits+0x56>
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	4770      	bx	lr
 8006314:	2000      	movs	r0, #0
 8006316:	4770      	bx	lr
 8006318:	2020      	movs	r0, #32
 800631a:	4770      	bx	lr

0800631c <__i2b>:
 800631c:	b510      	push	{r4, lr}
 800631e:	460c      	mov	r4, r1
 8006320:	2101      	movs	r1, #1
 8006322:	f7ff febd 	bl	80060a0 <_Balloc>
 8006326:	4602      	mov	r2, r0
 8006328:	b928      	cbnz	r0, 8006336 <__i2b+0x1a>
 800632a:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <__i2b+0x24>)
 800632c:	4805      	ldr	r0, [pc, #20]	@ (8006344 <__i2b+0x28>)
 800632e:	f240 1145 	movw	r1, #325	@ 0x145
 8006332:	f7ff f9e9 	bl	8005708 <__assert_func>
 8006336:	2301      	movs	r3, #1
 8006338:	6144      	str	r4, [r0, #20]
 800633a:	6103      	str	r3, [r0, #16]
 800633c:	bd10      	pop	{r4, pc}
 800633e:	bf00      	nop
 8006340:	080076fe 	.word	0x080076fe
 8006344:	0800776f 	.word	0x0800776f

08006348 <__multiply>:
 8006348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634c:	4614      	mov	r4, r2
 800634e:	690a      	ldr	r2, [r1, #16]
 8006350:	6923      	ldr	r3, [r4, #16]
 8006352:	429a      	cmp	r2, r3
 8006354:	bfa8      	it	ge
 8006356:	4623      	movge	r3, r4
 8006358:	460f      	mov	r7, r1
 800635a:	bfa4      	itt	ge
 800635c:	460c      	movge	r4, r1
 800635e:	461f      	movge	r7, r3
 8006360:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006364:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006368:	68a3      	ldr	r3, [r4, #8]
 800636a:	6861      	ldr	r1, [r4, #4]
 800636c:	eb0a 0609 	add.w	r6, sl, r9
 8006370:	42b3      	cmp	r3, r6
 8006372:	b085      	sub	sp, #20
 8006374:	bfb8      	it	lt
 8006376:	3101      	addlt	r1, #1
 8006378:	f7ff fe92 	bl	80060a0 <_Balloc>
 800637c:	b930      	cbnz	r0, 800638c <__multiply+0x44>
 800637e:	4602      	mov	r2, r0
 8006380:	4b44      	ldr	r3, [pc, #272]	@ (8006494 <__multiply+0x14c>)
 8006382:	4845      	ldr	r0, [pc, #276]	@ (8006498 <__multiply+0x150>)
 8006384:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006388:	f7ff f9be 	bl	8005708 <__assert_func>
 800638c:	f100 0514 	add.w	r5, r0, #20
 8006390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006394:	462b      	mov	r3, r5
 8006396:	2200      	movs	r2, #0
 8006398:	4543      	cmp	r3, r8
 800639a:	d321      	bcc.n	80063e0 <__multiply+0x98>
 800639c:	f107 0114 	add.w	r1, r7, #20
 80063a0:	f104 0214 	add.w	r2, r4, #20
 80063a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80063a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80063ac:	9302      	str	r3, [sp, #8]
 80063ae:	1b13      	subs	r3, r2, r4
 80063b0:	3b15      	subs	r3, #21
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	3304      	adds	r3, #4
 80063b8:	f104 0715 	add.w	r7, r4, #21
 80063bc:	42ba      	cmp	r2, r7
 80063be:	bf38      	it	cc
 80063c0:	2304      	movcc	r3, #4
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	9103      	str	r1, [sp, #12]
 80063c8:	428b      	cmp	r3, r1
 80063ca:	d80c      	bhi.n	80063e6 <__multiply+0x9e>
 80063cc:	2e00      	cmp	r6, #0
 80063ce:	dd03      	ble.n	80063d8 <__multiply+0x90>
 80063d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d05b      	beq.n	8006490 <__multiply+0x148>
 80063d8:	6106      	str	r6, [r0, #16]
 80063da:	b005      	add	sp, #20
 80063dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	f843 2b04 	str.w	r2, [r3], #4
 80063e4:	e7d8      	b.n	8006398 <__multiply+0x50>
 80063e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80063ea:	f1ba 0f00 	cmp.w	sl, #0
 80063ee:	d024      	beq.n	800643a <__multiply+0xf2>
 80063f0:	f104 0e14 	add.w	lr, r4, #20
 80063f4:	46a9      	mov	r9, r5
 80063f6:	f04f 0c00 	mov.w	ip, #0
 80063fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80063fe:	f8d9 3000 	ldr.w	r3, [r9]
 8006402:	fa1f fb87 	uxth.w	fp, r7
 8006406:	b29b      	uxth	r3, r3
 8006408:	fb0a 330b 	mla	r3, sl, fp, r3
 800640c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006410:	f8d9 7000 	ldr.w	r7, [r9]
 8006414:	4463      	add	r3, ip
 8006416:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800641a:	fb0a c70b 	mla	r7, sl, fp, ip
 800641e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006428:	4572      	cmp	r2, lr
 800642a:	f849 3b04 	str.w	r3, [r9], #4
 800642e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006432:	d8e2      	bhi.n	80063fa <__multiply+0xb2>
 8006434:	9b01      	ldr	r3, [sp, #4]
 8006436:	f845 c003 	str.w	ip, [r5, r3]
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006440:	3104      	adds	r1, #4
 8006442:	f1b9 0f00 	cmp.w	r9, #0
 8006446:	d021      	beq.n	800648c <__multiply+0x144>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	f104 0c14 	add.w	ip, r4, #20
 800644e:	46ae      	mov	lr, r5
 8006450:	f04f 0a00 	mov.w	sl, #0
 8006454:	f8bc b000 	ldrh.w	fp, [ip]
 8006458:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800645c:	fb09 770b 	mla	r7, r9, fp, r7
 8006460:	4457      	add	r7, sl
 8006462:	b29b      	uxth	r3, r3
 8006464:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006468:	f84e 3b04 	str.w	r3, [lr], #4
 800646c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006470:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006474:	f8be 3000 	ldrh.w	r3, [lr]
 8006478:	fb09 330a 	mla	r3, r9, sl, r3
 800647c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006480:	4562      	cmp	r2, ip
 8006482:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006486:	d8e5      	bhi.n	8006454 <__multiply+0x10c>
 8006488:	9f01      	ldr	r7, [sp, #4]
 800648a:	51eb      	str	r3, [r5, r7]
 800648c:	3504      	adds	r5, #4
 800648e:	e799      	b.n	80063c4 <__multiply+0x7c>
 8006490:	3e01      	subs	r6, #1
 8006492:	e79b      	b.n	80063cc <__multiply+0x84>
 8006494:	080076fe 	.word	0x080076fe
 8006498:	0800776f 	.word	0x0800776f

0800649c <__pow5mult>:
 800649c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a0:	4615      	mov	r5, r2
 80064a2:	f012 0203 	ands.w	r2, r2, #3
 80064a6:	4607      	mov	r7, r0
 80064a8:	460e      	mov	r6, r1
 80064aa:	d007      	beq.n	80064bc <__pow5mult+0x20>
 80064ac:	4c25      	ldr	r4, [pc, #148]	@ (8006544 <__pow5mult+0xa8>)
 80064ae:	3a01      	subs	r2, #1
 80064b0:	2300      	movs	r3, #0
 80064b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064b6:	f7ff fe55 	bl	8006164 <__multadd>
 80064ba:	4606      	mov	r6, r0
 80064bc:	10ad      	asrs	r5, r5, #2
 80064be:	d03d      	beq.n	800653c <__pow5mult+0xa0>
 80064c0:	69fc      	ldr	r4, [r7, #28]
 80064c2:	b97c      	cbnz	r4, 80064e4 <__pow5mult+0x48>
 80064c4:	2010      	movs	r0, #16
 80064c6:	f7ff fc77 	bl	8005db8 <malloc>
 80064ca:	4602      	mov	r2, r0
 80064cc:	61f8      	str	r0, [r7, #28]
 80064ce:	b928      	cbnz	r0, 80064dc <__pow5mult+0x40>
 80064d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006548 <__pow5mult+0xac>)
 80064d2:	481e      	ldr	r0, [pc, #120]	@ (800654c <__pow5mult+0xb0>)
 80064d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80064d8:	f7ff f916 	bl	8005708 <__assert_func>
 80064dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064e0:	6004      	str	r4, [r0, #0]
 80064e2:	60c4      	str	r4, [r0, #12]
 80064e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80064e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064ec:	b94c      	cbnz	r4, 8006502 <__pow5mult+0x66>
 80064ee:	f240 2171 	movw	r1, #625	@ 0x271
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7ff ff12 	bl	800631c <__i2b>
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80064fe:	4604      	mov	r4, r0
 8006500:	6003      	str	r3, [r0, #0]
 8006502:	f04f 0900 	mov.w	r9, #0
 8006506:	07eb      	lsls	r3, r5, #31
 8006508:	d50a      	bpl.n	8006520 <__pow5mult+0x84>
 800650a:	4631      	mov	r1, r6
 800650c:	4622      	mov	r2, r4
 800650e:	4638      	mov	r0, r7
 8006510:	f7ff ff1a 	bl	8006348 <__multiply>
 8006514:	4631      	mov	r1, r6
 8006516:	4680      	mov	r8, r0
 8006518:	4638      	mov	r0, r7
 800651a:	f7ff fe01 	bl	8006120 <_Bfree>
 800651e:	4646      	mov	r6, r8
 8006520:	106d      	asrs	r5, r5, #1
 8006522:	d00b      	beq.n	800653c <__pow5mult+0xa0>
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	b938      	cbnz	r0, 8006538 <__pow5mult+0x9c>
 8006528:	4622      	mov	r2, r4
 800652a:	4621      	mov	r1, r4
 800652c:	4638      	mov	r0, r7
 800652e:	f7ff ff0b 	bl	8006348 <__multiply>
 8006532:	6020      	str	r0, [r4, #0]
 8006534:	f8c0 9000 	str.w	r9, [r0]
 8006538:	4604      	mov	r4, r0
 800653a:	e7e4      	b.n	8006506 <__pow5mult+0x6a>
 800653c:	4630      	mov	r0, r6
 800653e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006542:	bf00      	nop
 8006544:	080077c8 	.word	0x080077c8
 8006548:	08007548 	.word	0x08007548
 800654c:	0800776f 	.word	0x0800776f

08006550 <__lshift>:
 8006550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006554:	460c      	mov	r4, r1
 8006556:	6849      	ldr	r1, [r1, #4]
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800655e:	68a3      	ldr	r3, [r4, #8]
 8006560:	4607      	mov	r7, r0
 8006562:	4691      	mov	r9, r2
 8006564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006568:	f108 0601 	add.w	r6, r8, #1
 800656c:	42b3      	cmp	r3, r6
 800656e:	db0b      	blt.n	8006588 <__lshift+0x38>
 8006570:	4638      	mov	r0, r7
 8006572:	f7ff fd95 	bl	80060a0 <_Balloc>
 8006576:	4605      	mov	r5, r0
 8006578:	b948      	cbnz	r0, 800658e <__lshift+0x3e>
 800657a:	4602      	mov	r2, r0
 800657c:	4b28      	ldr	r3, [pc, #160]	@ (8006620 <__lshift+0xd0>)
 800657e:	4829      	ldr	r0, [pc, #164]	@ (8006624 <__lshift+0xd4>)
 8006580:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006584:	f7ff f8c0 	bl	8005708 <__assert_func>
 8006588:	3101      	adds	r1, #1
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	e7ee      	b.n	800656c <__lshift+0x1c>
 800658e:	2300      	movs	r3, #0
 8006590:	f100 0114 	add.w	r1, r0, #20
 8006594:	f100 0210 	add.w	r2, r0, #16
 8006598:	4618      	mov	r0, r3
 800659a:	4553      	cmp	r3, sl
 800659c:	db33      	blt.n	8006606 <__lshift+0xb6>
 800659e:	6920      	ldr	r0, [r4, #16]
 80065a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065a4:	f104 0314 	add.w	r3, r4, #20
 80065a8:	f019 091f 	ands.w	r9, r9, #31
 80065ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065b4:	d02b      	beq.n	800660e <__lshift+0xbe>
 80065b6:	f1c9 0e20 	rsb	lr, r9, #32
 80065ba:	468a      	mov	sl, r1
 80065bc:	2200      	movs	r2, #0
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	fa00 f009 	lsl.w	r0, r0, r9
 80065c4:	4310      	orrs	r0, r2
 80065c6:	f84a 0b04 	str.w	r0, [sl], #4
 80065ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ce:	459c      	cmp	ip, r3
 80065d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80065d4:	d8f3      	bhi.n	80065be <__lshift+0x6e>
 80065d6:	ebac 0304 	sub.w	r3, ip, r4
 80065da:	3b15      	subs	r3, #21
 80065dc:	f023 0303 	bic.w	r3, r3, #3
 80065e0:	3304      	adds	r3, #4
 80065e2:	f104 0015 	add.w	r0, r4, #21
 80065e6:	4584      	cmp	ip, r0
 80065e8:	bf38      	it	cc
 80065ea:	2304      	movcc	r3, #4
 80065ec:	50ca      	str	r2, [r1, r3]
 80065ee:	b10a      	cbz	r2, 80065f4 <__lshift+0xa4>
 80065f0:	f108 0602 	add.w	r6, r8, #2
 80065f4:	3e01      	subs	r6, #1
 80065f6:	4638      	mov	r0, r7
 80065f8:	612e      	str	r6, [r5, #16]
 80065fa:	4621      	mov	r1, r4
 80065fc:	f7ff fd90 	bl	8006120 <_Bfree>
 8006600:	4628      	mov	r0, r5
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	f842 0f04 	str.w	r0, [r2, #4]!
 800660a:	3301      	adds	r3, #1
 800660c:	e7c5      	b.n	800659a <__lshift+0x4a>
 800660e:	3904      	subs	r1, #4
 8006610:	f853 2b04 	ldr.w	r2, [r3], #4
 8006614:	f841 2f04 	str.w	r2, [r1, #4]!
 8006618:	459c      	cmp	ip, r3
 800661a:	d8f9      	bhi.n	8006610 <__lshift+0xc0>
 800661c:	e7ea      	b.n	80065f4 <__lshift+0xa4>
 800661e:	bf00      	nop
 8006620:	080076fe 	.word	0x080076fe
 8006624:	0800776f 	.word	0x0800776f

08006628 <__mcmp>:
 8006628:	690a      	ldr	r2, [r1, #16]
 800662a:	4603      	mov	r3, r0
 800662c:	6900      	ldr	r0, [r0, #16]
 800662e:	1a80      	subs	r0, r0, r2
 8006630:	b530      	push	{r4, r5, lr}
 8006632:	d10e      	bne.n	8006652 <__mcmp+0x2a>
 8006634:	3314      	adds	r3, #20
 8006636:	3114      	adds	r1, #20
 8006638:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800663c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006640:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006644:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006648:	4295      	cmp	r5, r2
 800664a:	d003      	beq.n	8006654 <__mcmp+0x2c>
 800664c:	d205      	bcs.n	800665a <__mcmp+0x32>
 800664e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006652:	bd30      	pop	{r4, r5, pc}
 8006654:	42a3      	cmp	r3, r4
 8006656:	d3f3      	bcc.n	8006640 <__mcmp+0x18>
 8006658:	e7fb      	b.n	8006652 <__mcmp+0x2a>
 800665a:	2001      	movs	r0, #1
 800665c:	e7f9      	b.n	8006652 <__mcmp+0x2a>
	...

08006660 <__mdiff>:
 8006660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	4689      	mov	r9, r1
 8006666:	4606      	mov	r6, r0
 8006668:	4611      	mov	r1, r2
 800666a:	4648      	mov	r0, r9
 800666c:	4614      	mov	r4, r2
 800666e:	f7ff ffdb 	bl	8006628 <__mcmp>
 8006672:	1e05      	subs	r5, r0, #0
 8006674:	d112      	bne.n	800669c <__mdiff+0x3c>
 8006676:	4629      	mov	r1, r5
 8006678:	4630      	mov	r0, r6
 800667a:	f7ff fd11 	bl	80060a0 <_Balloc>
 800667e:	4602      	mov	r2, r0
 8006680:	b928      	cbnz	r0, 800668e <__mdiff+0x2e>
 8006682:	4b3f      	ldr	r3, [pc, #252]	@ (8006780 <__mdiff+0x120>)
 8006684:	f240 2137 	movw	r1, #567	@ 0x237
 8006688:	483e      	ldr	r0, [pc, #248]	@ (8006784 <__mdiff+0x124>)
 800668a:	f7ff f83d 	bl	8005708 <__assert_func>
 800668e:	2301      	movs	r3, #1
 8006690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006694:	4610      	mov	r0, r2
 8006696:	b003      	add	sp, #12
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	bfbc      	itt	lt
 800669e:	464b      	movlt	r3, r9
 80066a0:	46a1      	movlt	r9, r4
 80066a2:	4630      	mov	r0, r6
 80066a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80066a8:	bfba      	itte	lt
 80066aa:	461c      	movlt	r4, r3
 80066ac:	2501      	movlt	r5, #1
 80066ae:	2500      	movge	r5, #0
 80066b0:	f7ff fcf6 	bl	80060a0 <_Balloc>
 80066b4:	4602      	mov	r2, r0
 80066b6:	b918      	cbnz	r0, 80066c0 <__mdiff+0x60>
 80066b8:	4b31      	ldr	r3, [pc, #196]	@ (8006780 <__mdiff+0x120>)
 80066ba:	f240 2145 	movw	r1, #581	@ 0x245
 80066be:	e7e3      	b.n	8006688 <__mdiff+0x28>
 80066c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80066c4:	6926      	ldr	r6, [r4, #16]
 80066c6:	60c5      	str	r5, [r0, #12]
 80066c8:	f109 0310 	add.w	r3, r9, #16
 80066cc:	f109 0514 	add.w	r5, r9, #20
 80066d0:	f104 0e14 	add.w	lr, r4, #20
 80066d4:	f100 0b14 	add.w	fp, r0, #20
 80066d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80066dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	46d9      	mov	r9, fp
 80066e4:	f04f 0c00 	mov.w	ip, #0
 80066e8:	9b01      	ldr	r3, [sp, #4]
 80066ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80066ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	fa1f f38a 	uxth.w	r3, sl
 80066f8:	4619      	mov	r1, r3
 80066fa:	b283      	uxth	r3, r0
 80066fc:	1acb      	subs	r3, r1, r3
 80066fe:	0c00      	lsrs	r0, r0, #16
 8006700:	4463      	add	r3, ip
 8006702:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006706:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006710:	4576      	cmp	r6, lr
 8006712:	f849 3b04 	str.w	r3, [r9], #4
 8006716:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800671a:	d8e5      	bhi.n	80066e8 <__mdiff+0x88>
 800671c:	1b33      	subs	r3, r6, r4
 800671e:	3b15      	subs	r3, #21
 8006720:	f023 0303 	bic.w	r3, r3, #3
 8006724:	3415      	adds	r4, #21
 8006726:	3304      	adds	r3, #4
 8006728:	42a6      	cmp	r6, r4
 800672a:	bf38      	it	cc
 800672c:	2304      	movcc	r3, #4
 800672e:	441d      	add	r5, r3
 8006730:	445b      	add	r3, fp
 8006732:	461e      	mov	r6, r3
 8006734:	462c      	mov	r4, r5
 8006736:	4544      	cmp	r4, r8
 8006738:	d30e      	bcc.n	8006758 <__mdiff+0xf8>
 800673a:	f108 0103 	add.w	r1, r8, #3
 800673e:	1b49      	subs	r1, r1, r5
 8006740:	f021 0103 	bic.w	r1, r1, #3
 8006744:	3d03      	subs	r5, #3
 8006746:	45a8      	cmp	r8, r5
 8006748:	bf38      	it	cc
 800674a:	2100      	movcc	r1, #0
 800674c:	440b      	add	r3, r1
 800674e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006752:	b191      	cbz	r1, 800677a <__mdiff+0x11a>
 8006754:	6117      	str	r7, [r2, #16]
 8006756:	e79d      	b.n	8006694 <__mdiff+0x34>
 8006758:	f854 1b04 	ldr.w	r1, [r4], #4
 800675c:	46e6      	mov	lr, ip
 800675e:	0c08      	lsrs	r0, r1, #16
 8006760:	fa1c fc81 	uxtah	ip, ip, r1
 8006764:	4471      	add	r1, lr
 8006766:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800676a:	b289      	uxth	r1, r1
 800676c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006770:	f846 1b04 	str.w	r1, [r6], #4
 8006774:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006778:	e7dd      	b.n	8006736 <__mdiff+0xd6>
 800677a:	3f01      	subs	r7, #1
 800677c:	e7e7      	b.n	800674e <__mdiff+0xee>
 800677e:	bf00      	nop
 8006780:	080076fe 	.word	0x080076fe
 8006784:	0800776f 	.word	0x0800776f

08006788 <__ulp>:
 8006788:	b082      	sub	sp, #8
 800678a:	ed8d 0b00 	vstr	d0, [sp]
 800678e:	9a01      	ldr	r2, [sp, #4]
 8006790:	4b0f      	ldr	r3, [pc, #60]	@ (80067d0 <__ulp+0x48>)
 8006792:	4013      	ands	r3, r2
 8006794:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006798:	2b00      	cmp	r3, #0
 800679a:	dc08      	bgt.n	80067ae <__ulp+0x26>
 800679c:	425b      	negs	r3, r3
 800679e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80067a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80067a6:	da04      	bge.n	80067b2 <__ulp+0x2a>
 80067a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80067ac:	4113      	asrs	r3, r2
 80067ae:	2200      	movs	r2, #0
 80067b0:	e008      	b.n	80067c4 <__ulp+0x3c>
 80067b2:	f1a2 0314 	sub.w	r3, r2, #20
 80067b6:	2b1e      	cmp	r3, #30
 80067b8:	bfda      	itte	le
 80067ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80067be:	40da      	lsrle	r2, r3
 80067c0:	2201      	movgt	r2, #1
 80067c2:	2300      	movs	r3, #0
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	ec41 0b10 	vmov	d0, r0, r1
 80067cc:	b002      	add	sp, #8
 80067ce:	4770      	bx	lr
 80067d0:	7ff00000 	.word	0x7ff00000

080067d4 <__b2d>:
 80067d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d8:	6906      	ldr	r6, [r0, #16]
 80067da:	f100 0814 	add.w	r8, r0, #20
 80067de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80067e2:	1f37      	subs	r7, r6, #4
 80067e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7ff fd4b 	bl	8006284 <__hi0bits>
 80067ee:	f1c0 0320 	rsb	r3, r0, #32
 80067f2:	280a      	cmp	r0, #10
 80067f4:	600b      	str	r3, [r1, #0]
 80067f6:	491b      	ldr	r1, [pc, #108]	@ (8006864 <__b2d+0x90>)
 80067f8:	dc15      	bgt.n	8006826 <__b2d+0x52>
 80067fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80067fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8006802:	45b8      	cmp	r8, r7
 8006804:	ea43 0501 	orr.w	r5, r3, r1
 8006808:	bf34      	ite	cc
 800680a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800680e:	2300      	movcs	r3, #0
 8006810:	3015      	adds	r0, #21
 8006812:	fa02 f000 	lsl.w	r0, r2, r0
 8006816:	fa23 f30c 	lsr.w	r3, r3, ip
 800681a:	4303      	orrs	r3, r0
 800681c:	461c      	mov	r4, r3
 800681e:	ec45 4b10 	vmov	d0, r4, r5
 8006822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006826:	45b8      	cmp	r8, r7
 8006828:	bf3a      	itte	cc
 800682a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800682e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006832:	2300      	movcs	r3, #0
 8006834:	380b      	subs	r0, #11
 8006836:	d012      	beq.n	800685e <__b2d+0x8a>
 8006838:	f1c0 0120 	rsb	r1, r0, #32
 800683c:	fa23 f401 	lsr.w	r4, r3, r1
 8006840:	4082      	lsls	r2, r0
 8006842:	4322      	orrs	r2, r4
 8006844:	4547      	cmp	r7, r8
 8006846:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800684a:	bf8c      	ite	hi
 800684c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006850:	2200      	movls	r2, #0
 8006852:	4083      	lsls	r3, r0
 8006854:	40ca      	lsrs	r2, r1
 8006856:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800685a:	4313      	orrs	r3, r2
 800685c:	e7de      	b.n	800681c <__b2d+0x48>
 800685e:	ea42 0501 	orr.w	r5, r2, r1
 8006862:	e7db      	b.n	800681c <__b2d+0x48>
 8006864:	3ff00000 	.word	0x3ff00000

08006868 <__d2b>:
 8006868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800686c:	460f      	mov	r7, r1
 800686e:	2101      	movs	r1, #1
 8006870:	ec59 8b10 	vmov	r8, r9, d0
 8006874:	4616      	mov	r6, r2
 8006876:	f7ff fc13 	bl	80060a0 <_Balloc>
 800687a:	4604      	mov	r4, r0
 800687c:	b930      	cbnz	r0, 800688c <__d2b+0x24>
 800687e:	4602      	mov	r2, r0
 8006880:	4b23      	ldr	r3, [pc, #140]	@ (8006910 <__d2b+0xa8>)
 8006882:	4824      	ldr	r0, [pc, #144]	@ (8006914 <__d2b+0xac>)
 8006884:	f240 310f 	movw	r1, #783	@ 0x30f
 8006888:	f7fe ff3e 	bl	8005708 <__assert_func>
 800688c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006894:	b10d      	cbz	r5, 800689a <__d2b+0x32>
 8006896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	f1b8 0300 	subs.w	r3, r8, #0
 80068a0:	d023      	beq.n	80068ea <__d2b+0x82>
 80068a2:	4668      	mov	r0, sp
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	f7ff fd0c 	bl	80062c2 <__lo0bits>
 80068aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068ae:	b1d0      	cbz	r0, 80068e6 <__d2b+0x7e>
 80068b0:	f1c0 0320 	rsb	r3, r0, #32
 80068b4:	fa02 f303 	lsl.w	r3, r2, r3
 80068b8:	430b      	orrs	r3, r1
 80068ba:	40c2      	lsrs	r2, r0
 80068bc:	6163      	str	r3, [r4, #20]
 80068be:	9201      	str	r2, [sp, #4]
 80068c0:	9b01      	ldr	r3, [sp, #4]
 80068c2:	61a3      	str	r3, [r4, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	bf0c      	ite	eq
 80068c8:	2201      	moveq	r2, #1
 80068ca:	2202      	movne	r2, #2
 80068cc:	6122      	str	r2, [r4, #16]
 80068ce:	b1a5      	cbz	r5, 80068fa <__d2b+0x92>
 80068d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80068d4:	4405      	add	r5, r0
 80068d6:	603d      	str	r5, [r7, #0]
 80068d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80068dc:	6030      	str	r0, [r6, #0]
 80068de:	4620      	mov	r0, r4
 80068e0:	b003      	add	sp, #12
 80068e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068e6:	6161      	str	r1, [r4, #20]
 80068e8:	e7ea      	b.n	80068c0 <__d2b+0x58>
 80068ea:	a801      	add	r0, sp, #4
 80068ec:	f7ff fce9 	bl	80062c2 <__lo0bits>
 80068f0:	9b01      	ldr	r3, [sp, #4]
 80068f2:	6163      	str	r3, [r4, #20]
 80068f4:	3020      	adds	r0, #32
 80068f6:	2201      	movs	r2, #1
 80068f8:	e7e8      	b.n	80068cc <__d2b+0x64>
 80068fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006902:	6038      	str	r0, [r7, #0]
 8006904:	6918      	ldr	r0, [r3, #16]
 8006906:	f7ff fcbd 	bl	8006284 <__hi0bits>
 800690a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800690e:	e7e5      	b.n	80068dc <__d2b+0x74>
 8006910:	080076fe 	.word	0x080076fe
 8006914:	0800776f 	.word	0x0800776f

08006918 <__ratio>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	b085      	sub	sp, #20
 800691e:	e9cd 1000 	strd	r1, r0, [sp]
 8006922:	a902      	add	r1, sp, #8
 8006924:	f7ff ff56 	bl	80067d4 <__b2d>
 8006928:	9800      	ldr	r0, [sp, #0]
 800692a:	a903      	add	r1, sp, #12
 800692c:	ec55 4b10 	vmov	r4, r5, d0
 8006930:	f7ff ff50 	bl	80067d4 <__b2d>
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	6919      	ldr	r1, [r3, #16]
 8006938:	9b00      	ldr	r3, [sp, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	1ac9      	subs	r1, r1, r3
 800693e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	ec5b ab10 	vmov	sl, fp, d0
 8006948:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800694c:	2b00      	cmp	r3, #0
 800694e:	bfce      	itee	gt
 8006950:	462a      	movgt	r2, r5
 8006952:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006956:	465a      	movle	r2, fp
 8006958:	462f      	mov	r7, r5
 800695a:	46d9      	mov	r9, fp
 800695c:	bfcc      	ite	gt
 800695e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006962:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006966:	464b      	mov	r3, r9
 8006968:	4652      	mov	r2, sl
 800696a:	4620      	mov	r0, r4
 800696c:	4639      	mov	r1, r7
 800696e:	f7f9 ff8d 	bl	800088c <__aeabi_ddiv>
 8006972:	ec41 0b10 	vmov	d0, r0, r1
 8006976:	b005      	add	sp, #20
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800697c <__copybits>:
 800697c:	3901      	subs	r1, #1
 800697e:	b570      	push	{r4, r5, r6, lr}
 8006980:	1149      	asrs	r1, r1, #5
 8006982:	6914      	ldr	r4, [r2, #16]
 8006984:	3101      	adds	r1, #1
 8006986:	f102 0314 	add.w	r3, r2, #20
 800698a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800698e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006992:	1f05      	subs	r5, r0, #4
 8006994:	42a3      	cmp	r3, r4
 8006996:	d30c      	bcc.n	80069b2 <__copybits+0x36>
 8006998:	1aa3      	subs	r3, r4, r2
 800699a:	3b11      	subs	r3, #17
 800699c:	f023 0303 	bic.w	r3, r3, #3
 80069a0:	3211      	adds	r2, #17
 80069a2:	42a2      	cmp	r2, r4
 80069a4:	bf88      	it	hi
 80069a6:	2300      	movhi	r3, #0
 80069a8:	4418      	add	r0, r3
 80069aa:	2300      	movs	r3, #0
 80069ac:	4288      	cmp	r0, r1
 80069ae:	d305      	bcc.n	80069bc <__copybits+0x40>
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80069b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80069ba:	e7eb      	b.n	8006994 <__copybits+0x18>
 80069bc:	f840 3b04 	str.w	r3, [r0], #4
 80069c0:	e7f4      	b.n	80069ac <__copybits+0x30>

080069c2 <__any_on>:
 80069c2:	f100 0214 	add.w	r2, r0, #20
 80069c6:	6900      	ldr	r0, [r0, #16]
 80069c8:	114b      	asrs	r3, r1, #5
 80069ca:	4298      	cmp	r0, r3
 80069cc:	b510      	push	{r4, lr}
 80069ce:	db11      	blt.n	80069f4 <__any_on+0x32>
 80069d0:	dd0a      	ble.n	80069e8 <__any_on+0x26>
 80069d2:	f011 011f 	ands.w	r1, r1, #31
 80069d6:	d007      	beq.n	80069e8 <__any_on+0x26>
 80069d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80069dc:	fa24 f001 	lsr.w	r0, r4, r1
 80069e0:	fa00 f101 	lsl.w	r1, r0, r1
 80069e4:	428c      	cmp	r4, r1
 80069e6:	d10b      	bne.n	8006a00 <__any_on+0x3e>
 80069e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d803      	bhi.n	80069f8 <__any_on+0x36>
 80069f0:	2000      	movs	r0, #0
 80069f2:	bd10      	pop	{r4, pc}
 80069f4:	4603      	mov	r3, r0
 80069f6:	e7f7      	b.n	80069e8 <__any_on+0x26>
 80069f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d0f5      	beq.n	80069ec <__any_on+0x2a>
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7f6      	b.n	80069f2 <__any_on+0x30>

08006a04 <__sread>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	460c      	mov	r4, r1
 8006a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0c:	f000 f880 	bl	8006b10 <_read_r>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	bfab      	itete	ge
 8006a14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a16:	89a3      	ldrhlt	r3, [r4, #12]
 8006a18:	181b      	addge	r3, r3, r0
 8006a1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a1e:	bfac      	ite	ge
 8006a20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a22:	81a3      	strhlt	r3, [r4, #12]
 8006a24:	bd10      	pop	{r4, pc}

08006a26 <__swrite>:
 8006a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2a:	461f      	mov	r7, r3
 8006a2c:	898b      	ldrh	r3, [r1, #12]
 8006a2e:	05db      	lsls	r3, r3, #23
 8006a30:	4605      	mov	r5, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	4616      	mov	r6, r2
 8006a36:	d505      	bpl.n	8006a44 <__swrite+0x1e>
 8006a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f000 f854 	bl	8006aec <_lseek_r>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	4632      	mov	r2, r6
 8006a52:	463b      	mov	r3, r7
 8006a54:	4628      	mov	r0, r5
 8006a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5a:	f000 b87b 	b.w	8006b54 <_write_r>

08006a5e <__sseek>:
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	460c      	mov	r4, r1
 8006a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a66:	f000 f841 	bl	8006aec <_lseek_r>
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	bf15      	itete	ne
 8006a70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a7a:	81a3      	strheq	r3, [r4, #12]
 8006a7c:	bf18      	it	ne
 8006a7e:	81a3      	strhne	r3, [r4, #12]
 8006a80:	bd10      	pop	{r4, pc}

08006a82 <__sclose>:
 8006a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a86:	f000 b821 	b.w	8006acc <_close_r>
	...

08006a8c <fiprintf>:
 8006a8c:	b40e      	push	{r1, r2, r3}
 8006a8e:	b503      	push	{r0, r1, lr}
 8006a90:	4601      	mov	r1, r0
 8006a92:	ab03      	add	r3, sp, #12
 8006a94:	4805      	ldr	r0, [pc, #20]	@ (8006aac <fiprintf+0x20>)
 8006a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	f000 f8fb 	bl	8006c98 <_vfiprintf_r>
 8006aa2:	b002      	add	sp, #8
 8006aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa8:	b003      	add	sp, #12
 8006aaa:	4770      	bx	lr
 8006aac:	2000018c 	.word	0x2000018c

08006ab0 <__ascii_wctomb>:
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	4608      	mov	r0, r1
 8006ab4:	b141      	cbz	r1, 8006ac8 <__ascii_wctomb+0x18>
 8006ab6:	2aff      	cmp	r2, #255	@ 0xff
 8006ab8:	d904      	bls.n	8006ac4 <__ascii_wctomb+0x14>
 8006aba:	228a      	movs	r2, #138	@ 0x8a
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ac2:	4770      	bx	lr
 8006ac4:	700a      	strb	r2, [r1, #0]
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	4770      	bx	lr
	...

08006acc <_close_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d06      	ldr	r5, [pc, #24]	@ (8006ae8 <_close_r+0x1c>)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fa ff90 	bl	80019fc <_close>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_close_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_close_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20000484 	.word	0x20000484

08006aec <_lseek_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4d07      	ldr	r5, [pc, #28]	@ (8006b0c <_lseek_r+0x20>)
 8006af0:	4604      	mov	r4, r0
 8006af2:	4608      	mov	r0, r1
 8006af4:	4611      	mov	r1, r2
 8006af6:	2200      	movs	r2, #0
 8006af8:	602a      	str	r2, [r5, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f7fa ffa5 	bl	8001a4a <_lseek>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d102      	bne.n	8006b0a <_lseek_r+0x1e>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	b103      	cbz	r3, 8006b0a <_lseek_r+0x1e>
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	20000484 	.word	0x20000484

08006b10 <_read_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	@ (8006b30 <_read_r+0x20>)
 8006b14:	4604      	mov	r4, r0
 8006b16:	4608      	mov	r0, r1
 8006b18:	4611      	mov	r1, r2
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	602a      	str	r2, [r5, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f7fa ff33 	bl	800198a <_read>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_read_r+0x1e>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_read_r+0x1e>
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	20000484 	.word	0x20000484

08006b34 <_sbrk_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	@ (8006b50 <_sbrk_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fa ff90 	bl	8001a64 <_sbrk>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_sbrk_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_sbrk_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	20000484 	.word	0x20000484

08006b54 <_write_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4d07      	ldr	r5, [pc, #28]	@ (8006b74 <_write_r+0x20>)
 8006b58:	4604      	mov	r4, r0
 8006b5a:	4608      	mov	r0, r1
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	2200      	movs	r2, #0
 8006b60:	602a      	str	r2, [r5, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f7fa ff2e 	bl	80019c4 <_write>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d102      	bne.n	8006b72 <_write_r+0x1e>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	b103      	cbz	r3, 8006b72 <_write_r+0x1e>
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	20000484 	.word	0x20000484

08006b78 <abort>:
 8006b78:	b508      	push	{r3, lr}
 8006b7a:	2006      	movs	r0, #6
 8006b7c:	f000 fc72 	bl	8007464 <raise>
 8006b80:	2001      	movs	r0, #1
 8006b82:	f7fa fef7 	bl	8001974 <_exit>

08006b86 <_calloc_r>:
 8006b86:	b570      	push	{r4, r5, r6, lr}
 8006b88:	fba1 5402 	umull	r5, r4, r1, r2
 8006b8c:	b93c      	cbnz	r4, 8006b9e <_calloc_r+0x18>
 8006b8e:	4629      	mov	r1, r5
 8006b90:	f7ff f93c 	bl	8005e0c <_malloc_r>
 8006b94:	4606      	mov	r6, r0
 8006b96:	b928      	cbnz	r0, 8006ba4 <_calloc_r+0x1e>
 8006b98:	2600      	movs	r6, #0
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	bd70      	pop	{r4, r5, r6, pc}
 8006b9e:	220c      	movs	r2, #12
 8006ba0:	6002      	str	r2, [r0, #0]
 8006ba2:	e7f9      	b.n	8006b98 <_calloc_r+0x12>
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	f7fe fd62 	bl	8005670 <memset>
 8006bac:	e7f5      	b.n	8006b9a <_calloc_r+0x14>
	...

08006bb0 <_free_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	d041      	beq.n	8006c3c <_free_r+0x8c>
 8006bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bbc:	1f0c      	subs	r4, r1, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfb8      	it	lt
 8006bc2:	18e4      	addlt	r4, r4, r3
 8006bc4:	f7ff fa60 	bl	8006088 <__malloc_lock>
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c40 <_free_r+0x90>)
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	b933      	cbnz	r3, 8006bdc <_free_r+0x2c>
 8006bce:	6063      	str	r3, [r4, #4]
 8006bd0:	6014      	str	r4, [r2, #0]
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bd8:	f7ff ba5c 	b.w	8006094 <__malloc_unlock>
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	d908      	bls.n	8006bf2 <_free_r+0x42>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	1821      	adds	r1, r4, r0
 8006be4:	428b      	cmp	r3, r1
 8006be6:	bf01      	itttt	eq
 8006be8:	6819      	ldreq	r1, [r3, #0]
 8006bea:	685b      	ldreq	r3, [r3, #4]
 8006bec:	1809      	addeq	r1, r1, r0
 8006bee:	6021      	streq	r1, [r4, #0]
 8006bf0:	e7ed      	b.n	8006bce <_free_r+0x1e>
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	b10b      	cbz	r3, 8006bfc <_free_r+0x4c>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d9fa      	bls.n	8006bf2 <_free_r+0x42>
 8006bfc:	6811      	ldr	r1, [r2, #0]
 8006bfe:	1850      	adds	r0, r2, r1
 8006c00:	42a0      	cmp	r0, r4
 8006c02:	d10b      	bne.n	8006c1c <_free_r+0x6c>
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	4401      	add	r1, r0
 8006c08:	1850      	adds	r0, r2, r1
 8006c0a:	4283      	cmp	r3, r0
 8006c0c:	6011      	str	r1, [r2, #0]
 8006c0e:	d1e0      	bne.n	8006bd2 <_free_r+0x22>
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	6053      	str	r3, [r2, #4]
 8006c16:	4408      	add	r0, r1
 8006c18:	6010      	str	r0, [r2, #0]
 8006c1a:	e7da      	b.n	8006bd2 <_free_r+0x22>
 8006c1c:	d902      	bls.n	8006c24 <_free_r+0x74>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	e7d6      	b.n	8006bd2 <_free_r+0x22>
 8006c24:	6820      	ldr	r0, [r4, #0]
 8006c26:	1821      	adds	r1, r4, r0
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	bf04      	itt	eq
 8006c2c:	6819      	ldreq	r1, [r3, #0]
 8006c2e:	685b      	ldreq	r3, [r3, #4]
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	bf04      	itt	eq
 8006c34:	1809      	addeq	r1, r1, r0
 8006c36:	6021      	streq	r1, [r4, #0]
 8006c38:	6054      	str	r4, [r2, #4]
 8006c3a:	e7ca      	b.n	8006bd2 <_free_r+0x22>
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000480 	.word	0x20000480

08006c44 <__sfputc_r>:
 8006c44:	6893      	ldr	r3, [r2, #8]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	b410      	push	{r4}
 8006c4c:	6093      	str	r3, [r2, #8]
 8006c4e:	da08      	bge.n	8006c62 <__sfputc_r+0x1e>
 8006c50:	6994      	ldr	r4, [r2, #24]
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	db01      	blt.n	8006c5a <__sfputc_r+0x16>
 8006c56:	290a      	cmp	r1, #10
 8006c58:	d103      	bne.n	8006c62 <__sfputc_r+0x1e>
 8006c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5e:	f000 bac1 	b.w	80071e4 <__swbuf_r>
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	1c58      	adds	r0, r3, #1
 8006c66:	6010      	str	r0, [r2, #0]
 8006c68:	7019      	strb	r1, [r3, #0]
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <__sfputs_r>:
 8006c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c74:	4606      	mov	r6, r0
 8006c76:	460f      	mov	r7, r1
 8006c78:	4614      	mov	r4, r2
 8006c7a:	18d5      	adds	r5, r2, r3
 8006c7c:	42ac      	cmp	r4, r5
 8006c7e:	d101      	bne.n	8006c84 <__sfputs_r+0x12>
 8006c80:	2000      	movs	r0, #0
 8006c82:	e007      	b.n	8006c94 <__sfputs_r+0x22>
 8006c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c88:	463a      	mov	r2, r7
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ffda 	bl	8006c44 <__sfputc_r>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d1f3      	bne.n	8006c7c <__sfputs_r+0xa>
 8006c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c98 <_vfiprintf_r>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	460d      	mov	r5, r1
 8006c9e:	b09d      	sub	sp, #116	@ 0x74
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	4698      	mov	r8, r3
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	b118      	cbz	r0, 8006cb0 <_vfiprintf_r+0x18>
 8006ca8:	6a03      	ldr	r3, [r0, #32]
 8006caa:	b90b      	cbnz	r3, 8006cb0 <_vfiprintf_r+0x18>
 8006cac:	f7fd fe2e 	bl	800490c <__sinit>
 8006cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cb2:	07d9      	lsls	r1, r3, #31
 8006cb4:	d405      	bmi.n	8006cc2 <_vfiprintf_r+0x2a>
 8006cb6:	89ab      	ldrh	r3, [r5, #12]
 8006cb8:	059a      	lsls	r2, r3, #22
 8006cba:	d402      	bmi.n	8006cc2 <_vfiprintf_r+0x2a>
 8006cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cbe:	f7fe fd0a 	bl	80056d6 <__retarget_lock_acquire_recursive>
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	071b      	lsls	r3, r3, #28
 8006cc6:	d501      	bpl.n	8006ccc <_vfiprintf_r+0x34>
 8006cc8:	692b      	ldr	r3, [r5, #16]
 8006cca:	b99b      	cbnz	r3, 8006cf4 <_vfiprintf_r+0x5c>
 8006ccc:	4629      	mov	r1, r5
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f000 fac6 	bl	8007260 <__swsetup_r>
 8006cd4:	b170      	cbz	r0, 8006cf4 <_vfiprintf_r+0x5c>
 8006cd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cd8:	07dc      	lsls	r4, r3, #31
 8006cda:	d504      	bpl.n	8006ce6 <_vfiprintf_r+0x4e>
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ce0:	b01d      	add	sp, #116	@ 0x74
 8006ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	0598      	lsls	r0, r3, #22
 8006cea:	d4f7      	bmi.n	8006cdc <_vfiprintf_r+0x44>
 8006cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cee:	f7fe fcf3 	bl	80056d8 <__retarget_lock_release_recursive>
 8006cf2:	e7f3      	b.n	8006cdc <_vfiprintf_r+0x44>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d02:	2330      	movs	r3, #48	@ 0x30
 8006d04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006eb4 <_vfiprintf_r+0x21c>
 8006d08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d0c:	f04f 0901 	mov.w	r9, #1
 8006d10:	4623      	mov	r3, r4
 8006d12:	469a      	mov	sl, r3
 8006d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d18:	b10a      	cbz	r2, 8006d1e <_vfiprintf_r+0x86>
 8006d1a:	2a25      	cmp	r2, #37	@ 0x25
 8006d1c:	d1f9      	bne.n	8006d12 <_vfiprintf_r+0x7a>
 8006d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d22:	d00b      	beq.n	8006d3c <_vfiprintf_r+0xa4>
 8006d24:	465b      	mov	r3, fp
 8006d26:	4622      	mov	r2, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ffa1 	bl	8006c72 <__sfputs_r>
 8006d30:	3001      	adds	r0, #1
 8006d32:	f000 80a7 	beq.w	8006e84 <_vfiprintf_r+0x1ec>
 8006d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d38:	445a      	add	r2, fp
 8006d3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 809f 	beq.w	8006e84 <_vfiprintf_r+0x1ec>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d50:	f10a 0a01 	add.w	sl, sl, #1
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d5e:	4654      	mov	r4, sl
 8006d60:	2205      	movs	r2, #5
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	4853      	ldr	r0, [pc, #332]	@ (8006eb4 <_vfiprintf_r+0x21c>)
 8006d68:	f7f9 fa5a 	bl	8000220 <memchr>
 8006d6c:	9a04      	ldr	r2, [sp, #16]
 8006d6e:	b9d8      	cbnz	r0, 8006da8 <_vfiprintf_r+0x110>
 8006d70:	06d1      	lsls	r1, r2, #27
 8006d72:	bf44      	itt	mi
 8006d74:	2320      	movmi	r3, #32
 8006d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d7a:	0713      	lsls	r3, r2, #28
 8006d7c:	bf44      	itt	mi
 8006d7e:	232b      	movmi	r3, #43	@ 0x2b
 8006d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d84:	f89a 3000 	ldrb.w	r3, [sl]
 8006d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d8a:	d015      	beq.n	8006db8 <_vfiprintf_r+0x120>
 8006d8c:	9a07      	ldr	r2, [sp, #28]
 8006d8e:	4654      	mov	r4, sl
 8006d90:	2000      	movs	r0, #0
 8006d92:	f04f 0c0a 	mov.w	ip, #10
 8006d96:	4621      	mov	r1, r4
 8006d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d9c:	3b30      	subs	r3, #48	@ 0x30
 8006d9e:	2b09      	cmp	r3, #9
 8006da0:	d94b      	bls.n	8006e3a <_vfiprintf_r+0x1a2>
 8006da2:	b1b0      	cbz	r0, 8006dd2 <_vfiprintf_r+0x13a>
 8006da4:	9207      	str	r2, [sp, #28]
 8006da6:	e014      	b.n	8006dd2 <_vfiprintf_r+0x13a>
 8006da8:	eba0 0308 	sub.w	r3, r0, r8
 8006dac:	fa09 f303 	lsl.w	r3, r9, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	9304      	str	r3, [sp, #16]
 8006db4:	46a2      	mov	sl, r4
 8006db6:	e7d2      	b.n	8006d5e <_vfiprintf_r+0xc6>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	1d19      	adds	r1, r3, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	9103      	str	r1, [sp, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bfbb      	ittet	lt
 8006dc4:	425b      	neglt	r3, r3
 8006dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8006dca:	9307      	strge	r3, [sp, #28]
 8006dcc:	9307      	strlt	r3, [sp, #28]
 8006dce:	bfb8      	it	lt
 8006dd0:	9204      	strlt	r2, [sp, #16]
 8006dd2:	7823      	ldrb	r3, [r4, #0]
 8006dd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dd6:	d10a      	bne.n	8006dee <_vfiprintf_r+0x156>
 8006dd8:	7863      	ldrb	r3, [r4, #1]
 8006dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ddc:	d132      	bne.n	8006e44 <_vfiprintf_r+0x1ac>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	1d1a      	adds	r2, r3, #4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	9203      	str	r2, [sp, #12]
 8006de6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dea:	3402      	adds	r4, #2
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ec4 <_vfiprintf_r+0x22c>
 8006df2:	7821      	ldrb	r1, [r4, #0]
 8006df4:	2203      	movs	r2, #3
 8006df6:	4650      	mov	r0, sl
 8006df8:	f7f9 fa12 	bl	8000220 <memchr>
 8006dfc:	b138      	cbz	r0, 8006e0e <_vfiprintf_r+0x176>
 8006dfe:	9b04      	ldr	r3, [sp, #16]
 8006e00:	eba0 000a 	sub.w	r0, r0, sl
 8006e04:	2240      	movs	r2, #64	@ 0x40
 8006e06:	4082      	lsls	r2, r0
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	3401      	adds	r4, #1
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e12:	4829      	ldr	r0, [pc, #164]	@ (8006eb8 <_vfiprintf_r+0x220>)
 8006e14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e18:	2206      	movs	r2, #6
 8006e1a:	f7f9 fa01 	bl	8000220 <memchr>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d03f      	beq.n	8006ea2 <_vfiprintf_r+0x20a>
 8006e22:	4b26      	ldr	r3, [pc, #152]	@ (8006ebc <_vfiprintf_r+0x224>)
 8006e24:	bb1b      	cbnz	r3, 8006e6e <_vfiprintf_r+0x1d6>
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	3307      	adds	r3, #7
 8006e2a:	f023 0307 	bic.w	r3, r3, #7
 8006e2e:	3308      	adds	r3, #8
 8006e30:	9303      	str	r3, [sp, #12]
 8006e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e34:	443b      	add	r3, r7
 8006e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e38:	e76a      	b.n	8006d10 <_vfiprintf_r+0x78>
 8006e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e3e:	460c      	mov	r4, r1
 8006e40:	2001      	movs	r0, #1
 8006e42:	e7a8      	b.n	8006d96 <_vfiprintf_r+0xfe>
 8006e44:	2300      	movs	r3, #0
 8006e46:	3401      	adds	r4, #1
 8006e48:	9305      	str	r3, [sp, #20]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	f04f 0c0a 	mov.w	ip, #10
 8006e50:	4620      	mov	r0, r4
 8006e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e56:	3a30      	subs	r2, #48	@ 0x30
 8006e58:	2a09      	cmp	r2, #9
 8006e5a:	d903      	bls.n	8006e64 <_vfiprintf_r+0x1cc>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0c6      	beq.n	8006dee <_vfiprintf_r+0x156>
 8006e60:	9105      	str	r1, [sp, #20]
 8006e62:	e7c4      	b.n	8006dee <_vfiprintf_r+0x156>
 8006e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e68:	4604      	mov	r4, r0
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e7f0      	b.n	8006e50 <_vfiprintf_r+0x1b8>
 8006e6e:	ab03      	add	r3, sp, #12
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	462a      	mov	r2, r5
 8006e74:	4b12      	ldr	r3, [pc, #72]	@ (8006ec0 <_vfiprintf_r+0x228>)
 8006e76:	a904      	add	r1, sp, #16
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f3af 8000 	nop.w
 8006e7e:	4607      	mov	r7, r0
 8006e80:	1c78      	adds	r0, r7, #1
 8006e82:	d1d6      	bne.n	8006e32 <_vfiprintf_r+0x19a>
 8006e84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e86:	07d9      	lsls	r1, r3, #31
 8006e88:	d405      	bmi.n	8006e96 <_vfiprintf_r+0x1fe>
 8006e8a:	89ab      	ldrh	r3, [r5, #12]
 8006e8c:	059a      	lsls	r2, r3, #22
 8006e8e:	d402      	bmi.n	8006e96 <_vfiprintf_r+0x1fe>
 8006e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e92:	f7fe fc21 	bl	80056d8 <__retarget_lock_release_recursive>
 8006e96:	89ab      	ldrh	r3, [r5, #12]
 8006e98:	065b      	lsls	r3, r3, #25
 8006e9a:	f53f af1f 	bmi.w	8006cdc <_vfiprintf_r+0x44>
 8006e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ea0:	e71e      	b.n	8006ce0 <_vfiprintf_r+0x48>
 8006ea2:	ab03      	add	r3, sp, #12
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	4b05      	ldr	r3, [pc, #20]	@ (8006ec0 <_vfiprintf_r+0x228>)
 8006eaa:	a904      	add	r1, sp, #16
 8006eac:	4630      	mov	r0, r6
 8006eae:	f000 f879 	bl	8006fa4 <_printf_i>
 8006eb2:	e7e4      	b.n	8006e7e <_vfiprintf_r+0x1e6>
 8006eb4:	080078c8 	.word	0x080078c8
 8006eb8:	080078d2 	.word	0x080078d2
 8006ebc:	00000000 	.word	0x00000000
 8006ec0:	08006c73 	.word	0x08006c73
 8006ec4:	080078ce 	.word	0x080078ce

08006ec8 <_printf_common>:
 8006ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	4616      	mov	r6, r2
 8006ece:	4698      	mov	r8, r3
 8006ed0:	688a      	ldr	r2, [r1, #8]
 8006ed2:	690b      	ldr	r3, [r1, #16]
 8006ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	bfb8      	it	lt
 8006edc:	4613      	movlt	r3, r2
 8006ede:	6033      	str	r3, [r6, #0]
 8006ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	b10a      	cbz	r2, 8006eee <_printf_common+0x26>
 8006eea:	3301      	adds	r3, #1
 8006eec:	6033      	str	r3, [r6, #0]
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	0699      	lsls	r1, r3, #26
 8006ef2:	bf42      	ittt	mi
 8006ef4:	6833      	ldrmi	r3, [r6, #0]
 8006ef6:	3302      	addmi	r3, #2
 8006ef8:	6033      	strmi	r3, [r6, #0]
 8006efa:	6825      	ldr	r5, [r4, #0]
 8006efc:	f015 0506 	ands.w	r5, r5, #6
 8006f00:	d106      	bne.n	8006f10 <_printf_common+0x48>
 8006f02:	f104 0a19 	add.w	sl, r4, #25
 8006f06:	68e3      	ldr	r3, [r4, #12]
 8006f08:	6832      	ldr	r2, [r6, #0]
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	42ab      	cmp	r3, r5
 8006f0e:	dc26      	bgt.n	8006f5e <_printf_common+0x96>
 8006f10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	3b00      	subs	r3, #0
 8006f18:	bf18      	it	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	0692      	lsls	r2, r2, #26
 8006f1e:	d42b      	bmi.n	8006f78 <_printf_common+0xb0>
 8006f20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f24:	4641      	mov	r1, r8
 8006f26:	4638      	mov	r0, r7
 8006f28:	47c8      	blx	r9
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d01e      	beq.n	8006f6c <_printf_common+0xa4>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	6922      	ldr	r2, [r4, #16]
 8006f32:	f003 0306 	and.w	r3, r3, #6
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	bf02      	ittt	eq
 8006f3a:	68e5      	ldreq	r5, [r4, #12]
 8006f3c:	6833      	ldreq	r3, [r6, #0]
 8006f3e:	1aed      	subeq	r5, r5, r3
 8006f40:	68a3      	ldr	r3, [r4, #8]
 8006f42:	bf0c      	ite	eq
 8006f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f48:	2500      	movne	r5, #0
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	bfc4      	itt	gt
 8006f4e:	1a9b      	subgt	r3, r3, r2
 8006f50:	18ed      	addgt	r5, r5, r3
 8006f52:	2600      	movs	r6, #0
 8006f54:	341a      	adds	r4, #26
 8006f56:	42b5      	cmp	r5, r6
 8006f58:	d11a      	bne.n	8006f90 <_printf_common+0xc8>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e008      	b.n	8006f70 <_printf_common+0xa8>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4652      	mov	r2, sl
 8006f62:	4641      	mov	r1, r8
 8006f64:	4638      	mov	r0, r7
 8006f66:	47c8      	blx	r9
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d103      	bne.n	8006f74 <_printf_common+0xac>
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f74:	3501      	adds	r5, #1
 8006f76:	e7c6      	b.n	8006f06 <_printf_common+0x3e>
 8006f78:	18e1      	adds	r1, r4, r3
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	2030      	movs	r0, #48	@ 0x30
 8006f7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f82:	4422      	add	r2, r4
 8006f84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	e7c7      	b.n	8006f20 <_printf_common+0x58>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4622      	mov	r2, r4
 8006f94:	4641      	mov	r1, r8
 8006f96:	4638      	mov	r0, r7
 8006f98:	47c8      	blx	r9
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d0e6      	beq.n	8006f6c <_printf_common+0xa4>
 8006f9e:	3601      	adds	r6, #1
 8006fa0:	e7d9      	b.n	8006f56 <_printf_common+0x8e>
	...

08006fa4 <_printf_i>:
 8006fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	7e0f      	ldrb	r7, [r1, #24]
 8006faa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fac:	2f78      	cmp	r7, #120	@ 0x78
 8006fae:	4691      	mov	r9, r2
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	469a      	mov	sl, r3
 8006fb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fba:	d807      	bhi.n	8006fcc <_printf_i+0x28>
 8006fbc:	2f62      	cmp	r7, #98	@ 0x62
 8006fbe:	d80a      	bhi.n	8006fd6 <_printf_i+0x32>
 8006fc0:	2f00      	cmp	r7, #0
 8006fc2:	f000 80d2 	beq.w	800716a <_printf_i+0x1c6>
 8006fc6:	2f58      	cmp	r7, #88	@ 0x58
 8006fc8:	f000 80b9 	beq.w	800713e <_printf_i+0x19a>
 8006fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fd4:	e03a      	b.n	800704c <_printf_i+0xa8>
 8006fd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fda:	2b15      	cmp	r3, #21
 8006fdc:	d8f6      	bhi.n	8006fcc <_printf_i+0x28>
 8006fde:	a101      	add	r1, pc, #4	@ (adr r1, 8006fe4 <_printf_i+0x40>)
 8006fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fe4:	0800703d 	.word	0x0800703d
 8006fe8:	08007051 	.word	0x08007051
 8006fec:	08006fcd 	.word	0x08006fcd
 8006ff0:	08006fcd 	.word	0x08006fcd
 8006ff4:	08006fcd 	.word	0x08006fcd
 8006ff8:	08006fcd 	.word	0x08006fcd
 8006ffc:	08007051 	.word	0x08007051
 8007000:	08006fcd 	.word	0x08006fcd
 8007004:	08006fcd 	.word	0x08006fcd
 8007008:	08006fcd 	.word	0x08006fcd
 800700c:	08006fcd 	.word	0x08006fcd
 8007010:	08007151 	.word	0x08007151
 8007014:	0800707b 	.word	0x0800707b
 8007018:	0800710b 	.word	0x0800710b
 800701c:	08006fcd 	.word	0x08006fcd
 8007020:	08006fcd 	.word	0x08006fcd
 8007024:	08007173 	.word	0x08007173
 8007028:	08006fcd 	.word	0x08006fcd
 800702c:	0800707b 	.word	0x0800707b
 8007030:	08006fcd 	.word	0x08006fcd
 8007034:	08006fcd 	.word	0x08006fcd
 8007038:	08007113 	.word	0x08007113
 800703c:	6833      	ldr	r3, [r6, #0]
 800703e:	1d1a      	adds	r2, r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6032      	str	r2, [r6, #0]
 8007044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007048:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800704c:	2301      	movs	r3, #1
 800704e:	e09d      	b.n	800718c <_printf_i+0x1e8>
 8007050:	6833      	ldr	r3, [r6, #0]
 8007052:	6820      	ldr	r0, [r4, #0]
 8007054:	1d19      	adds	r1, r3, #4
 8007056:	6031      	str	r1, [r6, #0]
 8007058:	0606      	lsls	r6, r0, #24
 800705a:	d501      	bpl.n	8007060 <_printf_i+0xbc>
 800705c:	681d      	ldr	r5, [r3, #0]
 800705e:	e003      	b.n	8007068 <_printf_i+0xc4>
 8007060:	0645      	lsls	r5, r0, #25
 8007062:	d5fb      	bpl.n	800705c <_printf_i+0xb8>
 8007064:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007068:	2d00      	cmp	r5, #0
 800706a:	da03      	bge.n	8007074 <_printf_i+0xd0>
 800706c:	232d      	movs	r3, #45	@ 0x2d
 800706e:	426d      	negs	r5, r5
 8007070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007074:	4859      	ldr	r0, [pc, #356]	@ (80071dc <_printf_i+0x238>)
 8007076:	230a      	movs	r3, #10
 8007078:	e011      	b.n	800709e <_printf_i+0xfa>
 800707a:	6821      	ldr	r1, [r4, #0]
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	0608      	lsls	r0, r1, #24
 8007080:	f853 5b04 	ldr.w	r5, [r3], #4
 8007084:	d402      	bmi.n	800708c <_printf_i+0xe8>
 8007086:	0649      	lsls	r1, r1, #25
 8007088:	bf48      	it	mi
 800708a:	b2ad      	uxthmi	r5, r5
 800708c:	2f6f      	cmp	r7, #111	@ 0x6f
 800708e:	4853      	ldr	r0, [pc, #332]	@ (80071dc <_printf_i+0x238>)
 8007090:	6033      	str	r3, [r6, #0]
 8007092:	bf14      	ite	ne
 8007094:	230a      	movne	r3, #10
 8007096:	2308      	moveq	r3, #8
 8007098:	2100      	movs	r1, #0
 800709a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800709e:	6866      	ldr	r6, [r4, #4]
 80070a0:	60a6      	str	r6, [r4, #8]
 80070a2:	2e00      	cmp	r6, #0
 80070a4:	bfa2      	ittt	ge
 80070a6:	6821      	ldrge	r1, [r4, #0]
 80070a8:	f021 0104 	bicge.w	r1, r1, #4
 80070ac:	6021      	strge	r1, [r4, #0]
 80070ae:	b90d      	cbnz	r5, 80070b4 <_printf_i+0x110>
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	d04b      	beq.n	800714c <_printf_i+0x1a8>
 80070b4:	4616      	mov	r6, r2
 80070b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80070ba:	fb03 5711 	mls	r7, r3, r1, r5
 80070be:	5dc7      	ldrb	r7, [r0, r7]
 80070c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070c4:	462f      	mov	r7, r5
 80070c6:	42bb      	cmp	r3, r7
 80070c8:	460d      	mov	r5, r1
 80070ca:	d9f4      	bls.n	80070b6 <_printf_i+0x112>
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d10b      	bne.n	80070e8 <_printf_i+0x144>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	07df      	lsls	r7, r3, #31
 80070d4:	d508      	bpl.n	80070e8 <_printf_i+0x144>
 80070d6:	6923      	ldr	r3, [r4, #16]
 80070d8:	6861      	ldr	r1, [r4, #4]
 80070da:	4299      	cmp	r1, r3
 80070dc:	bfde      	ittt	le
 80070de:	2330      	movle	r3, #48	@ 0x30
 80070e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80070e8:	1b92      	subs	r2, r2, r6
 80070ea:	6122      	str	r2, [r4, #16]
 80070ec:	f8cd a000 	str.w	sl, [sp]
 80070f0:	464b      	mov	r3, r9
 80070f2:	aa03      	add	r2, sp, #12
 80070f4:	4621      	mov	r1, r4
 80070f6:	4640      	mov	r0, r8
 80070f8:	f7ff fee6 	bl	8006ec8 <_printf_common>
 80070fc:	3001      	adds	r0, #1
 80070fe:	d14a      	bne.n	8007196 <_printf_i+0x1f2>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007104:	b004      	add	sp, #16
 8007106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f043 0320 	orr.w	r3, r3, #32
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	4833      	ldr	r0, [pc, #204]	@ (80071e0 <_printf_i+0x23c>)
 8007114:	2778      	movs	r7, #120	@ 0x78
 8007116:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	6831      	ldr	r1, [r6, #0]
 800711e:	061f      	lsls	r7, r3, #24
 8007120:	f851 5b04 	ldr.w	r5, [r1], #4
 8007124:	d402      	bmi.n	800712c <_printf_i+0x188>
 8007126:	065f      	lsls	r7, r3, #25
 8007128:	bf48      	it	mi
 800712a:	b2ad      	uxthmi	r5, r5
 800712c:	6031      	str	r1, [r6, #0]
 800712e:	07d9      	lsls	r1, r3, #31
 8007130:	bf44      	itt	mi
 8007132:	f043 0320 	orrmi.w	r3, r3, #32
 8007136:	6023      	strmi	r3, [r4, #0]
 8007138:	b11d      	cbz	r5, 8007142 <_printf_i+0x19e>
 800713a:	2310      	movs	r3, #16
 800713c:	e7ac      	b.n	8007098 <_printf_i+0xf4>
 800713e:	4827      	ldr	r0, [pc, #156]	@ (80071dc <_printf_i+0x238>)
 8007140:	e7e9      	b.n	8007116 <_printf_i+0x172>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	f023 0320 	bic.w	r3, r3, #32
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	e7f6      	b.n	800713a <_printf_i+0x196>
 800714c:	4616      	mov	r6, r2
 800714e:	e7bd      	b.n	80070cc <_printf_i+0x128>
 8007150:	6833      	ldr	r3, [r6, #0]
 8007152:	6825      	ldr	r5, [r4, #0]
 8007154:	6961      	ldr	r1, [r4, #20]
 8007156:	1d18      	adds	r0, r3, #4
 8007158:	6030      	str	r0, [r6, #0]
 800715a:	062e      	lsls	r6, r5, #24
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	d501      	bpl.n	8007164 <_printf_i+0x1c0>
 8007160:	6019      	str	r1, [r3, #0]
 8007162:	e002      	b.n	800716a <_printf_i+0x1c6>
 8007164:	0668      	lsls	r0, r5, #25
 8007166:	d5fb      	bpl.n	8007160 <_printf_i+0x1bc>
 8007168:	8019      	strh	r1, [r3, #0]
 800716a:	2300      	movs	r3, #0
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	4616      	mov	r6, r2
 8007170:	e7bc      	b.n	80070ec <_printf_i+0x148>
 8007172:	6833      	ldr	r3, [r6, #0]
 8007174:	1d1a      	adds	r2, r3, #4
 8007176:	6032      	str	r2, [r6, #0]
 8007178:	681e      	ldr	r6, [r3, #0]
 800717a:	6862      	ldr	r2, [r4, #4]
 800717c:	2100      	movs	r1, #0
 800717e:	4630      	mov	r0, r6
 8007180:	f7f9 f84e 	bl	8000220 <memchr>
 8007184:	b108      	cbz	r0, 800718a <_printf_i+0x1e6>
 8007186:	1b80      	subs	r0, r0, r6
 8007188:	6060      	str	r0, [r4, #4]
 800718a:	6863      	ldr	r3, [r4, #4]
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	2300      	movs	r3, #0
 8007190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007194:	e7aa      	b.n	80070ec <_printf_i+0x148>
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	4632      	mov	r2, r6
 800719a:	4649      	mov	r1, r9
 800719c:	4640      	mov	r0, r8
 800719e:	47d0      	blx	sl
 80071a0:	3001      	adds	r0, #1
 80071a2:	d0ad      	beq.n	8007100 <_printf_i+0x15c>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	079b      	lsls	r3, r3, #30
 80071a8:	d413      	bmi.n	80071d2 <_printf_i+0x22e>
 80071aa:	68e0      	ldr	r0, [r4, #12]
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	4298      	cmp	r0, r3
 80071b0:	bfb8      	it	lt
 80071b2:	4618      	movlt	r0, r3
 80071b4:	e7a6      	b.n	8007104 <_printf_i+0x160>
 80071b6:	2301      	movs	r3, #1
 80071b8:	4632      	mov	r2, r6
 80071ba:	4649      	mov	r1, r9
 80071bc:	4640      	mov	r0, r8
 80071be:	47d0      	blx	sl
 80071c0:	3001      	adds	r0, #1
 80071c2:	d09d      	beq.n	8007100 <_printf_i+0x15c>
 80071c4:	3501      	adds	r5, #1
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	9903      	ldr	r1, [sp, #12]
 80071ca:	1a5b      	subs	r3, r3, r1
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dcf2      	bgt.n	80071b6 <_printf_i+0x212>
 80071d0:	e7eb      	b.n	80071aa <_printf_i+0x206>
 80071d2:	2500      	movs	r5, #0
 80071d4:	f104 0619 	add.w	r6, r4, #25
 80071d8:	e7f5      	b.n	80071c6 <_printf_i+0x222>
 80071da:	bf00      	nop
 80071dc:	080078d9 	.word	0x080078d9
 80071e0:	080078ea 	.word	0x080078ea

080071e4 <__swbuf_r>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	460e      	mov	r6, r1
 80071e8:	4614      	mov	r4, r2
 80071ea:	4605      	mov	r5, r0
 80071ec:	b118      	cbz	r0, 80071f6 <__swbuf_r+0x12>
 80071ee:	6a03      	ldr	r3, [r0, #32]
 80071f0:	b90b      	cbnz	r3, 80071f6 <__swbuf_r+0x12>
 80071f2:	f7fd fb8b 	bl	800490c <__sinit>
 80071f6:	69a3      	ldr	r3, [r4, #24]
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	071a      	lsls	r2, r3, #28
 80071fe:	d501      	bpl.n	8007204 <__swbuf_r+0x20>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	b943      	cbnz	r3, 8007216 <__swbuf_r+0x32>
 8007204:	4621      	mov	r1, r4
 8007206:	4628      	mov	r0, r5
 8007208:	f000 f82a 	bl	8007260 <__swsetup_r>
 800720c:	b118      	cbz	r0, 8007216 <__swbuf_r+0x32>
 800720e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007212:	4638      	mov	r0, r7
 8007214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	6922      	ldr	r2, [r4, #16]
 800721a:	1a98      	subs	r0, r3, r2
 800721c:	6963      	ldr	r3, [r4, #20]
 800721e:	b2f6      	uxtb	r6, r6
 8007220:	4283      	cmp	r3, r0
 8007222:	4637      	mov	r7, r6
 8007224:	dc05      	bgt.n	8007232 <__swbuf_r+0x4e>
 8007226:	4621      	mov	r1, r4
 8007228:	4628      	mov	r0, r5
 800722a:	f7fe ff05 	bl	8006038 <_fflush_r>
 800722e:	2800      	cmp	r0, #0
 8007230:	d1ed      	bne.n	800720e <__swbuf_r+0x2a>
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	3b01      	subs	r3, #1
 8007236:	60a3      	str	r3, [r4, #8]
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	6022      	str	r2, [r4, #0]
 800723e:	701e      	strb	r6, [r3, #0]
 8007240:	6962      	ldr	r2, [r4, #20]
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	429a      	cmp	r2, r3
 8007246:	d004      	beq.n	8007252 <__swbuf_r+0x6e>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	07db      	lsls	r3, r3, #31
 800724c:	d5e1      	bpl.n	8007212 <__swbuf_r+0x2e>
 800724e:	2e0a      	cmp	r6, #10
 8007250:	d1df      	bne.n	8007212 <__swbuf_r+0x2e>
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f7fe feef 	bl	8006038 <_fflush_r>
 800725a:	2800      	cmp	r0, #0
 800725c:	d0d9      	beq.n	8007212 <__swbuf_r+0x2e>
 800725e:	e7d6      	b.n	800720e <__swbuf_r+0x2a>

08007260 <__swsetup_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4b29      	ldr	r3, [pc, #164]	@ (8007308 <__swsetup_r+0xa8>)
 8007264:	4605      	mov	r5, r0
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	460c      	mov	r4, r1
 800726a:	b118      	cbz	r0, 8007274 <__swsetup_r+0x14>
 800726c:	6a03      	ldr	r3, [r0, #32]
 800726e:	b90b      	cbnz	r3, 8007274 <__swsetup_r+0x14>
 8007270:	f7fd fb4c 	bl	800490c <__sinit>
 8007274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007278:	0719      	lsls	r1, r3, #28
 800727a:	d422      	bmi.n	80072c2 <__swsetup_r+0x62>
 800727c:	06da      	lsls	r2, r3, #27
 800727e:	d407      	bmi.n	8007290 <__swsetup_r+0x30>
 8007280:	2209      	movs	r2, #9
 8007282:	602a      	str	r2, [r5, #0]
 8007284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800728e:	e033      	b.n	80072f8 <__swsetup_r+0x98>
 8007290:	0758      	lsls	r0, r3, #29
 8007292:	d512      	bpl.n	80072ba <__swsetup_r+0x5a>
 8007294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007296:	b141      	cbz	r1, 80072aa <__swsetup_r+0x4a>
 8007298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800729c:	4299      	cmp	r1, r3
 800729e:	d002      	beq.n	80072a6 <__swsetup_r+0x46>
 80072a0:	4628      	mov	r0, r5
 80072a2:	f7ff fc85 	bl	8006bb0 <_free_r>
 80072a6:	2300      	movs	r3, #0
 80072a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	2300      	movs	r3, #0
 80072b4:	6063      	str	r3, [r4, #4]
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f043 0308 	orr.w	r3, r3, #8
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	6923      	ldr	r3, [r4, #16]
 80072c4:	b94b      	cbnz	r3, 80072da <__swsetup_r+0x7a>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d0:	d003      	beq.n	80072da <__swsetup_r+0x7a>
 80072d2:	4621      	mov	r1, r4
 80072d4:	4628      	mov	r0, r5
 80072d6:	f000 f83f 	bl	8007358 <__smakebuf_r>
 80072da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072de:	f013 0201 	ands.w	r2, r3, #1
 80072e2:	d00a      	beq.n	80072fa <__swsetup_r+0x9a>
 80072e4:	2200      	movs	r2, #0
 80072e6:	60a2      	str	r2, [r4, #8]
 80072e8:	6962      	ldr	r2, [r4, #20]
 80072ea:	4252      	negs	r2, r2
 80072ec:	61a2      	str	r2, [r4, #24]
 80072ee:	6922      	ldr	r2, [r4, #16]
 80072f0:	b942      	cbnz	r2, 8007304 <__swsetup_r+0xa4>
 80072f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072f6:	d1c5      	bne.n	8007284 <__swsetup_r+0x24>
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	0799      	lsls	r1, r3, #30
 80072fc:	bf58      	it	pl
 80072fe:	6962      	ldrpl	r2, [r4, #20]
 8007300:	60a2      	str	r2, [r4, #8]
 8007302:	e7f4      	b.n	80072ee <__swsetup_r+0x8e>
 8007304:	2000      	movs	r0, #0
 8007306:	e7f7      	b.n	80072f8 <__swsetup_r+0x98>
 8007308:	2000018c 	.word	0x2000018c

0800730c <__swhatbuf_r>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	460c      	mov	r4, r1
 8007310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007314:	2900      	cmp	r1, #0
 8007316:	b096      	sub	sp, #88	@ 0x58
 8007318:	4615      	mov	r5, r2
 800731a:	461e      	mov	r6, r3
 800731c:	da0d      	bge.n	800733a <__swhatbuf_r+0x2e>
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007324:	f04f 0100 	mov.w	r1, #0
 8007328:	bf14      	ite	ne
 800732a:	2340      	movne	r3, #64	@ 0x40
 800732c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007330:	2000      	movs	r0, #0
 8007332:	6031      	str	r1, [r6, #0]
 8007334:	602b      	str	r3, [r5, #0]
 8007336:	b016      	add	sp, #88	@ 0x58
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	466a      	mov	r2, sp
 800733c:	f000 f848 	bl	80073d0 <_fstat_r>
 8007340:	2800      	cmp	r0, #0
 8007342:	dbec      	blt.n	800731e <__swhatbuf_r+0x12>
 8007344:	9901      	ldr	r1, [sp, #4]
 8007346:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800734a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800734e:	4259      	negs	r1, r3
 8007350:	4159      	adcs	r1, r3
 8007352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007356:	e7eb      	b.n	8007330 <__swhatbuf_r+0x24>

08007358 <__smakebuf_r>:
 8007358:	898b      	ldrh	r3, [r1, #12]
 800735a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800735c:	079d      	lsls	r5, r3, #30
 800735e:	4606      	mov	r6, r0
 8007360:	460c      	mov	r4, r1
 8007362:	d507      	bpl.n	8007374 <__smakebuf_r+0x1c>
 8007364:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	6123      	str	r3, [r4, #16]
 800736c:	2301      	movs	r3, #1
 800736e:	6163      	str	r3, [r4, #20]
 8007370:	b003      	add	sp, #12
 8007372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007374:	ab01      	add	r3, sp, #4
 8007376:	466a      	mov	r2, sp
 8007378:	f7ff ffc8 	bl	800730c <__swhatbuf_r>
 800737c:	9f00      	ldr	r7, [sp, #0]
 800737e:	4605      	mov	r5, r0
 8007380:	4639      	mov	r1, r7
 8007382:	4630      	mov	r0, r6
 8007384:	f7fe fd42 	bl	8005e0c <_malloc_r>
 8007388:	b948      	cbnz	r0, 800739e <__smakebuf_r+0x46>
 800738a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800738e:	059a      	lsls	r2, r3, #22
 8007390:	d4ee      	bmi.n	8007370 <__smakebuf_r+0x18>
 8007392:	f023 0303 	bic.w	r3, r3, #3
 8007396:	f043 0302 	orr.w	r3, r3, #2
 800739a:	81a3      	strh	r3, [r4, #12]
 800739c:	e7e2      	b.n	8007364 <__smakebuf_r+0xc>
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	6020      	str	r0, [r4, #0]
 80073a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	9b01      	ldr	r3, [sp, #4]
 80073aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073ae:	b15b      	cbz	r3, 80073c8 <__smakebuf_r+0x70>
 80073b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b4:	4630      	mov	r0, r6
 80073b6:	f000 f81d 	bl	80073f4 <_isatty_r>
 80073ba:	b128      	cbz	r0, 80073c8 <__smakebuf_r+0x70>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	431d      	orrs	r5, r3
 80073cc:	81a5      	strh	r5, [r4, #12]
 80073ce:	e7cf      	b.n	8007370 <__smakebuf_r+0x18>

080073d0 <_fstat_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d07      	ldr	r5, [pc, #28]	@ (80073f0 <_fstat_r+0x20>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	602b      	str	r3, [r5, #0]
 80073de:	f7fa fb19 	bl	8001a14 <_fstat>
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	d102      	bne.n	80073ec <_fstat_r+0x1c>
 80073e6:	682b      	ldr	r3, [r5, #0]
 80073e8:	b103      	cbz	r3, 80073ec <_fstat_r+0x1c>
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	bd38      	pop	{r3, r4, r5, pc}
 80073ee:	bf00      	nop
 80073f0:	20000484 	.word	0x20000484

080073f4 <_isatty_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4d06      	ldr	r5, [pc, #24]	@ (8007410 <_isatty_r+0x1c>)
 80073f8:	2300      	movs	r3, #0
 80073fa:	4604      	mov	r4, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	f7fa fb18 	bl	8001a34 <_isatty>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_isatty_r+0x1a>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b103      	cbz	r3, 800740e <_isatty_r+0x1a>
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	20000484 	.word	0x20000484

08007414 <_raise_r>:
 8007414:	291f      	cmp	r1, #31
 8007416:	b538      	push	{r3, r4, r5, lr}
 8007418:	4605      	mov	r5, r0
 800741a:	460c      	mov	r4, r1
 800741c:	d904      	bls.n	8007428 <_raise_r+0x14>
 800741e:	2316      	movs	r3, #22
 8007420:	6003      	str	r3, [r0, #0]
 8007422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800742a:	b112      	cbz	r2, 8007432 <_raise_r+0x1e>
 800742c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007430:	b94b      	cbnz	r3, 8007446 <_raise_r+0x32>
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f830 	bl	8007498 <_getpid_r>
 8007438:	4622      	mov	r2, r4
 800743a:	4601      	mov	r1, r0
 800743c:	4628      	mov	r0, r5
 800743e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007442:	f000 b817 	b.w	8007474 <_kill_r>
 8007446:	2b01      	cmp	r3, #1
 8007448:	d00a      	beq.n	8007460 <_raise_r+0x4c>
 800744a:	1c59      	adds	r1, r3, #1
 800744c:	d103      	bne.n	8007456 <_raise_r+0x42>
 800744e:	2316      	movs	r3, #22
 8007450:	6003      	str	r3, [r0, #0]
 8007452:	2001      	movs	r0, #1
 8007454:	e7e7      	b.n	8007426 <_raise_r+0x12>
 8007456:	2100      	movs	r1, #0
 8007458:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800745c:	4620      	mov	r0, r4
 800745e:	4798      	blx	r3
 8007460:	2000      	movs	r0, #0
 8007462:	e7e0      	b.n	8007426 <_raise_r+0x12>

08007464 <raise>:
 8007464:	4b02      	ldr	r3, [pc, #8]	@ (8007470 <raise+0xc>)
 8007466:	4601      	mov	r1, r0
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	f7ff bfd3 	b.w	8007414 <_raise_r>
 800746e:	bf00      	nop
 8007470:	2000018c 	.word	0x2000018c

08007474 <_kill_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d07      	ldr	r5, [pc, #28]	@ (8007494 <_kill_r+0x20>)
 8007478:	2300      	movs	r3, #0
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	f7fa fa67 	bl	8001954 <_kill>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	d102      	bne.n	8007490 <_kill_r+0x1c>
 800748a:	682b      	ldr	r3, [r5, #0]
 800748c:	b103      	cbz	r3, 8007490 <_kill_r+0x1c>
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	bf00      	nop
 8007494:	20000484 	.word	0x20000484

08007498 <_getpid_r>:
 8007498:	f7fa ba54 	b.w	8001944 <_getpid>

0800749c <_init>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr

080074a8 <_fini>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr
